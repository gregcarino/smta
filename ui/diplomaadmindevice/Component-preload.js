/**
* This file was auto-generated by SAP Web IDE build and includes all
* the source files required by SAPUI5 runtime for performance optimization.
* PLEASE DO NOT EDIT THIS FILE!! Changes will be overwritten the next time the build is run.
*/
jQuery.sap.registerPreloadedModules({
	"version": "2.0",
	"name": "diploma/admin/devices/Component-preload",
	"modules": {
		"diploma/admin/devices/Component.js": "sap.ui.define([\n\t\"sap/ui/core/UIComponent\",\n\t\"sap/ui/Device\",\n\t\"diploma/admin/devices/model/models\",\n\t\"diploma/admin/devices/controller/ListSelector\",\n\t\"diploma/admin/devices/controller/ErrorHandler\"\n], function(UIComponent, Device, models, ListSelector, ErrorHandler) {\n\t\"use strict\";\n\n\treturn UIComponent.extend(\"diploma.admin.devices.Component\", {\n\n\t\tmetadata: {\n\t\t\tmanifest: \"json\"\n\t\t},\n\n\t\t/**\n\t\t * The component is initialized by UI5 automatically during the startup of the app and calls the init method once.\n\t\t * In this method, the FLP and device models are set and the router is initialized.\n\t\t * @public\n\t\t * @override\n\t\t */\n\t\tinit: function() {\n\t\t\tthis.oListSelector = new ListSelector();\n\t\t\tthis._oErrorHandler = new ErrorHandler(this);\n\n\t\t\t// set the device model\n\t\t\tthis.setModel(models.createDeviceModel(), \"device\");\n\t\t\t// set the FLP model\n\t\t\tthis.setModel(models.createFLPModel(), \"FLP\");\n\t\t\t// set the global model\n\t\t\tthis.setModel(models.createGlobalModel(), \"global\");\n\n\t\t\t// call the base component's init function and create the App view\n\t\t\tUIComponent.prototype.init.apply(this, arguments);\n\n\t\t\t// create the views based on the url/hash\n\t\t\tthis.getRouter().initialize();\n\t\t},\n\n\t\t/**\n\t\t * The component is destroyed by UI5 automatically.\n\t\t * In this method, the ListSelector and ErrorHandler are destroyed.\n\t\t * @public\n\t\t * @override\n\t\t */\n\t\tdestroy: function() {\n\t\t\tthis.oListSelector.destroy();\n\t\t\tthis._oErrorHandler.destroy();\n\t\t\t// call the base component's destroy function\n\t\t\tUIComponent.prototype.destroy.apply(this, arguments);\n\t\t},\n\n\t\t/**\n\t\t * This method can be called to determine whether the sapUiSizeCompact or sapUiSizeCozy\n\t\t * design mode class should be set, which influences the size appearance of some controls.\n\t\t * @public\n\t\t * @return {string} css class, either 'sapUiSizeCompact' or 'sapUiSizeCozy' - or an empty string if no css class should be set\n\t\t */\n\t\tgetContentDensityClass: function() {\n\t\t\tif (this._sContentDensityClass === undefined) {\n\t\t\t\t// check whether FLP has already set the content density class; do nothing in this case\n\t\t\t\tif (jQuery(document.body).hasClass(\"sapUiSizeCozy\") || jQuery(document.body).hasClass(\"sapUiSizeCompact\")) {\n\t\t\t\t\tthis._sContentDensityClass = \"\";\n\t\t\t\t} else if (!Device.support.touch) { // apply \"compact\" mode if touch is not supported\n\t\t\t\t\tthis._sContentDensityClass = \"sapUiSizeCompact\";\n\t\t\t\t} else {\n\t\t\t\t\t// \"cozy\" in case of touch support; default for most sap.m controls, but needed for desktop-first controls like sap.ui.table.Table\n\t\t\t\t\tthis._sContentDensityClass = \"sapUiSizeCozy\";\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this._sContentDensityClass;\n\t\t}\n\n\t});\n\n});",
		"diploma/admin/devices/controller/App.controller.js": "sap.ui.define([\n\t\"diploma/admin/devices/controller/BaseController\",\n\t\"sap/ui/model/json/JSONModel\"\n], function(BaseController, JSONModel) {\n\t\"use strict\";\n\n\treturn BaseController.extend(\"diploma.admin.devices.controller.App\", {\n\n\t\tonInit: function() {\n\t\t\tvar oViewModel,\n\t\t\t\tfnSetAppNotBusy,\n\t\t\t\toListSelector = this.getOwnerComponent().oListSelector,\n\t\t\t\tiOriginalBusyDelay = this.getView().getBusyIndicatorDelay();\n\n\t\t\toViewModel = new JSONModel({\n\t\t\t\tbusy: true,\n\t\t\t\tdelay: 0\n\t\t\t});\n\t\t\tthis.setModel(oViewModel, \"appView\");\n\n\t\t\tfnSetAppNotBusy = function() {\n\t\t\t\toViewModel.setProperty(\"/busy\", false);\n\t\t\t\toViewModel.setProperty(\"/delay\", iOriginalBusyDelay);\n\t\t\t};\n\n\t\t\tthis.getOwnerComponent().getModel().metadataLoaded()\n\t\t\t\t.then(fnSetAppNotBusy);\n\n\t\t\t// Makes sure that master view is hidden in split app\n\t\t\t// after a new list entry has been selected.\n\t\t\toListSelector.attachListSelectionChange(function() {\n\t\t\t\tthis.byId(\"idAppControl\").hideMaster();\n\t\t\t}, this);\n\n\t\t\t// apply content density mode to root view\n\t\t\tthis.getView().addStyleClass(this.getOwnerComponent().getContentDensityClass());\n\t\t}\n\n\t});\n\n});",
		"diploma/admin/devices/controller/BaseController.js": "/*global history */\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/ui/core/routing/History\"\n], function(Controller, History) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"diploma.admin.devices.controller.BaseController\", {\n\t\t/**\n\t\t * Convenience method for accessing the router in every controller of the application.\n\t\t * @public\n\t\t * @returns {sap.ui.core.routing.Router} the router for this component\n\t\t */\n\t\tgetRouter: function() {\n\t\t\treturn this.getOwnerComponent().getRouter();\n\t\t},\n\n\t\t/**\n\t\t * Convenience method for getting the view model by name in every controller of the application.\n\t\t * @public\n\t\t * @param {string} sName the model name\n\t\t * @returns {sap.ui.model.Model} the model instance\n\t\t */\n\t\tgetModel: function(sName) {\n\t\t\treturn this.getView().getModel(sName);\n\t\t},\n\n\t\t/**\n\t\t * Convenience method for setting the view model in every controller of the application.\n\t\t * @public\n\t\t * @param {sap.ui.model.Model} oModel the model instance\n\t\t * @param {string} sName the model name\n\t\t * @returns {sap.ui.mvc.View} the view instance\n\t\t */\n\t\tsetModel: function(oModel, sName) {\n\t\t\treturn this.getView().setModel(oModel, sName);\n\t\t},\n\n\t\t/**\n\t\t * Convenience method for getting the resource bundle.\n\t\t * @public\n\t\t * @returns {sap.ui.model.resource.ResourceModel} the resourceModel of the component\n\t\t */\n\t\tgetResourceBundle: function() {\n\t\t\treturn this.getOwnerComponent().getModel(\"i18n\").getResourceBundle();\n\t\t},\n\n\t\t/**\n\t\t * Event handler  for navigating back.\n\t\t * It checks if there is a history entry. If yes, history.go(-1) will happen.\n\t\t * If not, it will replace the current entry of the browser history with the master route.\n\t\t * @public\n\t\t */\n\t\tonNavBack: function() {\n\t\t\tvar sPreviousHash = History.getInstance().getPreviousHash();\n\n\t\t\tif (sPreviousHash !== undefined) {\n\t\t\t\t// The history contains a previous entry\n\t\t\t\thistory.go(-1);\n\t\t\t} else {\n\t\t\t\t// Otherwise we go backwards with a forward history\n\t\t\t\tvar bReplace = true;\n\t\t\t\tthis.getRouter().navTo(\"master\", {}, bReplace);\n\t\t\t}\n\t\t}\n\n\t});\n\n});",
		"diploma/admin/devices/controller/ListSelector.js": "sap.ui.define([\n\t\"sap/ui/base/Object\"\n], function(BaseObject) {\n\t\"use strict\";\n\n\treturn BaseObject.extend(\"diploma.admin.devices.model.ListSelector\", {\n\n\t\t/**\n\t\t * Provides a convenience API for selecting list items. All the functions will wait until the initial load of the a List passed to the instance by the setBoundMasterList\n\t\t * function.\n\t\t * @class\n\t\t * @public\n\t\t * @alias diploma.admin.devices.model.ListSelector\n\t\t */\n\n\t\tconstructor: function() {\n\t\t\tthis._oWhenListHasBeenSet = new Promise(function(fnResolveListHasBeenSet) {\n\t\t\t\tthis._fnResolveListHasBeenSet = fnResolveListHasBeenSet;\n\t\t\t}.bind(this));\n\t\t\t// This promise needs to be created in the constructor, since it is allowed to\n\t\t\t// invoke selectItem functions before calling setBoundMasterList\n\t\t\tthis.oWhenListLoadingIsDone = new Promise(function(fnResolve, fnReject) {\n\t\t\t\t// Used to wait until the setBound masterList function is invoked\n\t\t\t\tthis._oWhenListHasBeenSet\n\t\t\t\t\t.then(function(oList) {\n\t\t\t\t\t\toList.getBinding(\"items\").attachEventOnce(\"dataReceived\",\n\t\t\t\t\t\t\tfunction(oData) {\n\t\t\t\t\t\t\t\tif (!oData.getParameter(\"data\")) {\n\t\t\t\t\t\t\t\t\tfnReject({\n\t\t\t\t\t\t\t\t\t\tlist: oList,\n\t\t\t\t\t\t\t\t\t\terror: true\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvar oFirstListItem = oList.getItems()[0];\n\t\t\t\t\t\t\t\tif (oFirstListItem) {\n\t\t\t\t\t\t\t\t\t// Have to make sure that first list Item is selected\n\t\t\t\t\t\t\t\t\t// and a select event is triggered. Like that, the corresponding\n\t\t\t\t\t\t\t\t\t// detail page is loaded automatically\n\t\t\t\t\t\t\t\t\tfnResolve({\n\t\t\t\t\t\t\t\t\t\tlist: oList,\n\t\t\t\t\t\t\t\t\t\tfirstListitem: oFirstListItem\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// No items in the list\n\t\t\t\t\t\t\t\t\tfnReject({\n\t\t\t\t\t\t\t\t\t\tlist: oList,\n\t\t\t\t\t\t\t\t\t\terror: false\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t}.bind(this));\n\t\t},\n\n\t\t/**\n\t\t * A bound list should be passed in here. Should be done, before the list has received its initial data from the server.\n\t\t * May only be invoked once per ListSelector instance.\n\t\t * @param {sap.m.List} oList The list all the select functions will be invoked on.\n\t\t * @public\n\t\t */\n\t\tsetBoundMasterList: function(oList) {\n\t\t\tthis._oList = oList;\n\t\t\tthis._fnResolveListHasBeenSet(oList);\n\t\t},\n\n\t\t/**\n\t\t * Tries to select and scroll to a list item with a matching binding context. If there are no items matching the binding context or the ListMode is none,\n\t\t * no selection/scrolling will happen\n\t\t * @param {string} sBindingPath the binding path matching the binding path of a list item\n\t\t * @public\n\t\t */\n\t\tselectAListItem: function(sBindingPath) {\n\n\t\t\tthis.oWhenListLoadingIsDone.then(\n\t\t\t\tfunction() {\n\t\t\t\t\tvar oList = this._oList,\n\t\t\t\t\t\toSelectedItem;\n\n\t\t\t\t\tif (oList.getMode() === \"None\") {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\toSelectedItem = oList.getSelectedItem();\n\n\t\t\t\t\t// skip update if the current selection is already matching the object path\n\t\t\t\t\tif (oSelectedItem && oSelectedItem.getBindingContext().getPath() === sBindingPath) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\toList.getItems().some(function(oItem) {\n\t\t\t\t\t\tif (oItem.getBindingContext() && oItem.getBindingContext().getPath() === sBindingPath) {\n\t\t\t\t\t\t\toList.setSelectedItem(oItem);\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}.bind(this),\n\t\t\t\tfunction() {\n\t\t\t\t\tjQuery.sap.log.warning(\"Could not select the list item with the path\" + sBindingPath +\n\t\t\t\t\t\t\" because the list encountered an error or had no items\");\n\t\t\t\t}\n\t\t\t);\n\t\t},\n\n\t\t/* =========================================================== */\n\t\t/* Convenience Functions for List Selection Change Event       */\n\t\t/* =========================================================== */\n\n\t\t/**\n\t\t * Attaches a listener and listener function to the ListSelector's bound master list. By using\n\t\t * a promise, the listener is added, even if the list is not available when 'attachListSelectionChange'\n\t\t * is called.\n\t\t * @param {function} fnFunction the function to be executed when the list fires a selection change event\n\t\t * @param {function} oListener the listener object\n\t\t * @return {diploma.admin.devices.model.ListSelector} the list selector object for method chaining\n\t\t * @public\n\t\t */\n\t\tattachListSelectionChange: function(fnFunction, oListener) {\n\t\t\tthis._oWhenListHasBeenSet.then(function() {\n\t\t\t\tthis._oList.attachSelectionChange(fnFunction, oListener);\n\t\t\t}.bind(this));\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * Detaches a listener and listener function from the ListSelector's bound master list. By using\n\t\t * a promise, the listener is removed, even if the list is not available when 'detachListSelectionChange'\n\t\t * is called.\n\t\t * @param {function} fnFunction the function to be executed when the list fires a selection change event\n\t\t * @param {function} oListener the listener object\n\t\t * @return {diploma.admin.devices.model.ListSelector} the list selector object for method chaining\n\t\t * @public\n\t\t */\n\t\tdetachListSelectionChange: function(fnFunction, oListener) {\n\t\t\tthis._oWhenListHasBeenSet.then(function() {\n\t\t\t\tthis._oList.detachSelectionChange(fnFunction, oListener);\n\t\t\t}.bind(this));\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * Removes all selections from master list.\n\t\t * Does not trigger 'selectionChange' event on master list, though.\n\t\t * @public\n\t\t */\n\t\tclearMasterListSelection: function() {\n\t\t\t//use promise to make sure that 'this._oList' is available\n\t\t\tthis._oWhenListHasBeenSet.then(function() {\n\t\t\t\tthis._oList.removeSelections(true);\n\t\t\t}.bind(this));\n\t\t}\n\n\t});\n\n});",
		"diploma/admin/devices/controller/Detail.controller.js": "/*global location */\nsap.ui.define([\n\t\"diploma/admin/devices/controller/BaseController\",\n\t\"sap/ui/model/json/JSONModel\",\n\t\"sap/m/MessageToast\",\n\t\"sap/m/MessageBox\",\n\t\"diploma/admin/devices/model/formatter\"\n], function(BaseController, JSONModel, MessageToast, MessageBox, formatter) {\n\t\"use strict\";\n\n\treturn BaseController.extend(\"diploma.admin.devices.controller.Detail\", {\n\t\t\n\t\tformatter: formatter,\n\n\t\t/* =========================================================== */\n\t\t/* lifecycle methods                                           */\n\t\t/* =========================================================== */\n\n\t\tonInit: function() {\n\t\t\t// Model used to manipulate control states. The chosen values make sure,\n\t\t\t// detail page is busy indication immediately so there is no break in\n\t\t\t// between the busy indication for loading the view's meta data\n\t\t\tvar oViewModel = new JSONModel({\n\t\t\t\tbusy: false,\n\t\t\t\tdelay: 0,\n\t\t\t\tlineItemListTitle: this.getResourceBundle().getText(\"detailLineItemTableHeading\")\n\t\t\t});\n\n\t\t\tthis.getRouter().getRoute(\"object\").attachPatternMatched(this._onObjectMatched, this);\n\n\t\t\tthis.setModel(oViewModel, \"detailView\");\n\n\t\t\tthis.getOwnerComponent().getModel().metadataLoaded().then(this._onMetadataLoaded.bind(this));\n\t\t\t\n\t\t\tvar sDensityClass = this.getOwnerComponent().getContentDensityClass();\n\t\t\tthis.byId(\"page\").getDependents().forEach(function(oItem) {\n\t\t\t    oItem.addStyleClass(sDensityClass);\n\t\t\t});\n\t\t\t\n\t\t\tthis.byId(\"vhdTransports\").getController().addStyleClass(sDensityClass);\n\t\t\tthis.byId(\"vhdTransports\").getController().attachSelect(this.onTransportValueHelpSelect, this);\n\t\t\tthis.byId(\"vhdTransports\").getController().attachClear(this.onTransportValueHelpClear, this);\n\t\t},\n\n\t\t/* =========================================================== */\n\t\t/* event handlers                                              */\n\t\t/* =========================================================== */\n        \n        /**\n         * Called when the value help of the transport input field is pressed.\n         * Opens the transport value help dialog. \n         */\n        onTransportValueHelpRequested: function() {\n            this.byId(\"vhdTransports\").getController().open();\n        },\n        \n        /**\n         * Called when the user selects a transport in the value help.\n         * Updates the device transport input.\n         * @param   {Event} oEvent  The event object.\n         * @returns {void}\n         */\n        onTransportValueHelpSelect: function(oEvent) {\n            var oContext = oEvent.getParameter(\"source\").getBindingContext();\n            this.byId(\"deviceTrans\").setValue(oContext.getProperty(\"Transport/description\"));\n            this.byId(\"deviceTrans\").data(\"transport\", oContext.getProperty(\"id\"));\n        },\n        \n        /**\n         * Called when the user pressed the clear button the value help.\n         * Updates the device transport input.\n         * @returns {void}\n         */\n        onTransportValueHelpClear: function() {\n            this.byId(\"deviceTrans\").setValue(\"\");\n            this.byId(\"deviceTrans\").data(\"transport\", \"\");\n        },\n        \n\t\t/**\n\t\t * Updates the item count within the line item table's header\n\t\t * @param {object} oEvent an event containing the total number of items in the list\n\t\t * @private\n\t\t */\n\t\tonListUpdateFinished: function(oEvent) {\n\t\t\tvar sTitle,\n\t\t\t\tiTotalItems = oEvent.getParameter(\"total\"),\n\t\t\t\toViewModel = this.getModel(\"detailView\");\n\n\t\t\t// only update the counter if the length is final\n\t\t\tif (this.byId(\"lineItemsList\").getBinding(\"items\").isLengthFinal()) {\n\t\t\t\tif (iTotalItems) {\n\t\t\t\t\tsTitle = this.getResourceBundle().getText(\"detailLineItemTableHeadingCount\", [iTotalItems]);\n\t\t\t\t} else {\n\t\t\t\t\t//Display 'Line Items' instead of 'Line items (0)'\n\t\t\t\t\tsTitle = this.getResourceBundle().getText(\"detailLineItemTableHeading\");\n\t\t\t\t}\n\t\t\t\toViewModel.setProperty(\"/lineItemListTitle\", sTitle);\n\t\t\t}\n\t\t},\n\n\t\t/* =========================================================== */\n\t\t/* begin: internal methods                                     */\n\t\t/* =========================================================== */\n\n\t\t/**\n\t\t * Binds the view to the object path and expands the aggregated line items.\n\t\t * @function\n\t\t * @param {sap.ui.base.Event} oEvent pattern match event in route 'object'\n\t\t * @private\n\t\t */\n\t\t_onObjectMatched: function(oEvent) {\n\t\t\tvar oViewModel = this.getModel(\"detailView\");\n\t\t\tvar oGlobalModel = this.getModel(\"global\");\n\t\t\tvar sObjectId = oEvent.getParameter(\"arguments\").objectId;\n\t\t\tif (sObjectId === \"new\") {\n\t\t\t\toGlobalModel.setProperty(\"/isNew\", true);\n\t\t\t\toGlobalModel.setProperty(\"/edit\", true);\n\t\t\t\toViewModel.setProperty(\"/busy\", false);\n\t\t\t\tthis.getView().unbindElement();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (oGlobalModel.getProperty(\"/isNew\")) {\n\t\t\t\t\toGlobalModel.setProperty(\"/edit\", false);\n\t\t\t\t}\n\t\t\t\toGlobalModel.setProperty(\"/isNew\", false);\n\t\t\t\tvar sObjectPath = \"/Devices('\" + sObjectId + \"')\";\n\t\t\t\tthis._bindView(sObjectPath);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Binds the view to the object path. Makes sure that detail view displays\n\t\t * a busy indicator while data for the corresponding element binding is loaded.\n\t\t * @function\n\t\t * @param {string} sObjectPath path to the object to be bound to the view.\n\t\t * @private\n\t\t */\n\t\t_bindView: function(sObjectPath) {\n\t\t\t// Set busy indicator during view binding\n\t\t\tvar oViewModel = this.getModel(\"detailView\");\n\n\t\t\t// If the view was not bound yet its not busy, only if the binding requests data it is set to busy again\n\t\t\toViewModel.setProperty(\"/busy\", false);\n\n\t\t\tthis.getView().bindElement({\n\t\t\t\tpath: sObjectPath,\n\t\t\t\tevents: {\n\t\t\t\t\tchange: this._onBindingChange.bind(this),\n\t\t\t\t\tdataRequested: function() {\n\t\t\t\t\t\toViewModel.setProperty(\"/busy\", true);\n\t\t\t\t\t},\n\t\t\t\t\tdataReceived: function() {\n\t\t\t\t\t\toViewModel.setProperty(\"/busy\", false);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tparameters: {\n\t\t\t\t\texpand: \"Transport,Transport/Route/ToLocation,Transport/Route/FromLocation\"\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t\n\t\t\n\t\t/**\n\t\t * Called when the page's event binding was changed.\n\t\t */\n\t\t_onBindingChange: function() {\n\t\t\tvar oView = this.getView(),\n\t\t\t\toElementBinding = oView.getElementBinding();\n\n\t\t\t// No data for the binding\n\t\t\tif (!oElementBinding.getBoundContext()) {\n\t\t\t\tthis.getRouter().getTargets().display(\"detailObjectNotFound\");\n\t\t\t\t// if object could not be found, the selection in the master list\n\t\t\t\t// does not make sense anymore.\n\t\t\t\tthis.getOwnerComponent().oListSelector.clearMasterListSelection();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.getOwnerComponent().oListSelector.selectAListItem(oElementBinding.getPath());\n\t\t},\n\t\t\n\t\t/**\n\t\t * Called when the odata service's model is loaded. Hides the busy indicator and resets busy delay.\n\t\t */\n\t\t_onMetadataLoaded: function() {\n\t\t\t// Store original busy indicator delay for the detail view\n\t\t\tvar iOriginalViewBusyDelay = this.getView().getBusyIndicatorDelay(),\n\t\t\t\toViewModel = this.getModel(\"detailView\"),\n\t\t\t\toLineItemTable = this.byId(\"lineItemsList\"),\n\t\t\t\tiOriginalLineItemTableBusyDelay = oLineItemTable.getBusyIndicatorDelay();\n\n\t\t\t// Make sure busy indicator is displayed immediately when\n\t\t\t// detail view is displayed for the first time\n\t\t\toViewModel.setProperty(\"/delay\", 0);\n\t\t\toViewModel.setProperty(\"/lineItemTableDelay\", 0);\n\n\t\t\toLineItemTable.attachEventOnce(\"updateFinished\", function() {\n\t\t\t\t// Restore original busy indicator delay for line item table\n\t\t\t\toViewModel.setProperty(\"/lineItemTableDelay\", iOriginalLineItemTableBusyDelay);\n\t\t\t});\n\t\t\t\n\t\t\tif (!this.getModel(\"global\").getProperty(\"/isNew\")) {\n\t\t\t\t// Binding the view will set it to not busy - so the view is always busy if it is not bound\n\t\t\t\toViewModel.setProperty(\"/busy\", true);\n\t\t\t\t// Restore original busy indicator delay for the detail view\n\t\t\t\toViewModel.setProperty(\"/delay\", iOriginalViewBusyDelay);\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Event handler for pressing the edit button.\n\t\t */\n\t\tonEdit: function() {\n\t\t\tthis.getModel(\"global\").setProperty(\"/edit\", true);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Event handler for pressing the cancel button.\n\t\t */\n\t\tonCreateCancel: function() {\n\t\t\tthis.getModel(\"global\").setProperty(\"/edit\", false);\n\t\t\tthis.getModel(\"global\").setProperty(\"/isNew\", false);\n\t\t\tthis.getRouter().navTo(\"master\");\n\t\t},\n\t\t\n\t\t/**  \n\t\t* Event handler for pressing the display button.\n\t\t*/\n\t\tonDisplay: function() {\n\t\t    this.getModel(\"global\").setProperty(\"/edit\", false);\n\t\t\tthis.getModel().updateBindings(true);\n\t\t},\n\t\t\n\t\t/** Revert the changes done to the entity. */\n\t\tonUndo: function() {\n\t\t\tthis.getModel().updateBindings(true);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Deletes a device.\n\t\t */\n\t\tonDelete: function() {\n\t\t    var oContext = this.getView().getBindingContext(),\n\t\t        fnOnSuccess = this.getRouter().navTo.bind(this.getRouter(), \"master\");\n\t        MessageBox.confirm(this.getResourceBundle().getText(\"confirmDeleteDevice\", [oContext.getProperty(\"name\")]), {\n\t            onClose: function(sAction) {\n\t                if (sAction === MessageBox.Action.OK) {\n\t                    oContext.getModel().remove(oContext.getPath(), {\n\t                        success: fnOnSuccess\n\t                    });\n\t                }\n\t            }\n\t        });\n\t\t},\n\t\t\n\t\t/**\n\t\t * Commits the changes to the backend. \n\t\t * \n\t\t */\n\t\tonUpdateCommit: function() {\n\t\t    this.getModel().update(this.getView().getElementBinding().getPath(), {\n\t\t\t\tname:\t\t\tthis.byId(\"deviceName\").getValue(),\n\t\t\t\tdescription:\tthis.byId(\"deviceDesc\").getValue(),\n\t\t\t\tactive:\t\t\t1,\n\t\t\t\ttransport:\t\tthis.byId(\"deviceTrans\").data(\"transport\")\n\t\t\t}, {\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tMessageToast.show(this.getResourceBundle().getText(\"changesSavedSuccesfully\"));\n\t\t\t\t}.bind(this)\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Commits the newly created entity to the backend.\n\t\t */\n\t\tonCreateCommit: function() {\n\t\t\tthis.getModel().create(\"/Devices\", {\n\t\t\t\tid:\t\t\t\t\"\",\n\t\t\t\tname:\t\t\tthis.byId(\"deviceName\").getValue(),\n\t\t\t\tdescription:\tthis.byId(\"deviceDesc\").getValue(),\n\t\t\t\tactive:\t\t\t1,\n\t\t\t\ttransport:\t\tthis.byId(\"deviceTrans\").data(\"transport\")\n\t\t\t}, {\n\t\t\t\tsuccess: function(oData) {\n\t\t\t\t\tthis.getRouter().navTo(\"object\", {objectId: oData.id});\n\t\t\t\t}.bind(this)\n\t\t\t});\n\t\t},\n\t\t\n\t\t\n\t\t/**\n\t\t * Opens the sensor maintainence dialog.\n\t\t */\n\t\topenSensorDialog: function() {\n\t\t\tthis.byId(\"sensorNumber\").setValue(\"\");\n\t\t\tthis.byId(\"dialogSensor\").open();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Closes the sensor maintainence dialog.\n\t\t */\n\t\tcloseSensorDialog: function() {\n\t\t\tthis.byId(\"dialogSensor\").close();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Creates a new sensor.\n\t\t */\n\t\tonCreateSensor: function() {\n\t\t\tthis.getModel().create(\"/DeviceSensors\", {\n\t\t\t\tdevice: \tthis.getView().getBindingContext().getProperty(\"id\"),\n\t\t\t\tnumber:\t\tparseInt(this.byId(\"sensorNumber\").getValue()),\n\t\t\t\tsensorType: this.byId(\"sensorType\").getSelectedKey()\n\t\t\t},{ success:  this.closeSensorDialog.bind(this)});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Deletes a sensor\n\t\t */\n\t\tonDeleteSensor: function(oEvent) {\n\t\t\tthis.getModel().remove(oEvent.getParameter(\"listItem\").getBindingContext().getPath());\n\t\t},\n\t\t\n\t\t/**\n\t\t * Calls the navigation service if available and atempts to open the sensor management app.\n\t\t */\n\t\tnavigateToSensor: function(oEvent) {\n\t\t\tvar sSensorId = oEvent.getSource().getBindingContext().getProperty(\"sensorType\");\n\t\t\t\n\t\t\tif (!sap.ushell || !sap.ushell.Container || !sap.ushell.Container.getService) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar oService = sap.ushell.Container.getService(\"CrossApplicationNavigation\");\n\t\t\tif (!oService) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\toService.toExternal({\n\t\t\t\ttarget: {\n\t\t\t\t\tshellHash: \"Sensor-Manage&/SensorTypes/\" + sSensorId\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t\n\t\t\n\t\t/**\n\t\t * Calls the navigation service if available and atempts to open the sensor management app.\n\t\t */\n\t\tnavigateToTransport: function(oEvent) {\n\t\t\tvar sTransportId = oEvent.getSource().getBindingContext().getProperty(\"Transport/id\");\n\t\t\t\n\t\t\tif (!sap.ushell || !sap.ushell.Container || !sap.ushell.Container.getService) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar oService = sap.ushell.Container.getService(\"CrossApplicationNavigation\");\n\t\t\tif (!oService) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\toService.toExternal({\n\t\t\t\ttarget: {\n\t\t\t\t\tshellHash: \"Transport-Display&/Transports/\" + sTransportId\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\n});",
		"diploma/admin/devices/controller/ErrorHandler.js": "sap.ui.define([\n\t\"sap/ui/base/Object\",\n\t\"sap/m/MessageBox\"\n], function(Object, MessageBox) {\n\t\"use strict\";\n\n\treturn Object.extend(\"diploma.admin.devices.controller.ErrorHandler\", {\n\n\t\t/**\n\t\t * Handles application errors by automatically attaching to the model events and displaying errors when needed.\n\t\t * @class\n\t\t * @param {sap.ui.core.UIComponent} oComponent reference to the app's component\n\t\t * @public\n\t\t * @alias diploma.admin.devices.controller.ErrorHandler\n\t\t */\n\t\tconstructor: function(oComponent) {\n\t\t\tthis._oResourceBundle = oComponent.getModel(\"i18n\").getResourceBundle();\n\t\t\tthis._oComponent = oComponent;\n\t\t\tthis._oModel = oComponent.getModel();\n\t\t\tthis._bMessageOpen = false;\n\t\t\tthis._sErrorText = this._oResourceBundle.getText(\"errorText\");\n\n\t\t\tthis._oModel.attachMetadataFailed(function(oEvent) {\n\t\t\t\tvar oParams = oEvent.getParameters();\n\n\t\t\t\tthis._showMetadataError(oParams.response);\n\t\t\t}, this);\n\n\t\t\tthis._oModel.attachRequestFailed(function(oEvent) {\n\t\t\t\tvar oParams = oEvent.getParameters();\n\n\t\t\t\t// An entity that was not found in the service is also throwing a 404 error in oData.\n\t\t\t\t// We already cover this case with a notFound target so we skip it here.\n\t\t\t\t// A request that cannot be sent to the server is a technical error that we have to handle though\n\t\t\t\tif (oParams.response.statusCode !== \"404\" || (oParams.response.statusCode === 404 && oParams.response.responseText.indexOf(\n\t\t\t\t\t\"Cannot POST\") === 0)) {\n\t\t\t\t\tthis._showServiceError(oParams.response);\n\t\t\t\t}\n\t\t\t}, this);\n\t\t},\n\n\t\t/**\n\t\t * Shows a {@link sap.m.MessageBox} when the metadata call has failed.\n\t\t * The user can try to refresh the metadata.\n\t\t * @param {string} sDetails a technical error to be displayed on request\n\t\t * @private\n\t\t */\n\t\t_showMetadataError: function(sDetails) {\n\t\t\tMessageBox.error(\n\t\t\t\tthis._sErrorText, {\n\t\t\t\t\tid: \"metadataErrorMessageBox\",\n\t\t\t\t\tdetails: sDetails,\n\t\t\t\t\tstyleClass: this._oComponent.getContentDensityClass(),\n\t\t\t\t\tactions: [MessageBox.Action.RETRY, MessageBox.Action.CLOSE],\n\t\t\t\t\tonClose: function(sAction) {\n\t\t\t\t\t\tif (sAction === MessageBox.Action.RETRY) {\n\t\t\t\t\t\t\tthis._oModel.refreshMetadata();\n\t\t\t\t\t\t}\n\t\t\t\t\t}.bind(this)\n\t\t\t\t}\n\t\t\t);\n\t\t},\n\n\t\t/**\n\t\t * Shows a {@link sap.m.MessageBox} when a service call has failed.\n\t\t * Only the first error message will be display.\n\t\t * @param {string} sDetails a technical error to be displayed on request\n\t\t * @private\n\t\t */\n\t\t_showServiceError: function(sDetails) {\n\t\t\tif (this._bMessageOpen) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._bMessageOpen = true;\n\t\t\tMessageBox.error(\n\t\t\t\tthis._sErrorText, {\n\t\t\t\t\tid: \"serviceErrorMessageBox\",\n\t\t\t\t\tdetails: sDetails,\n\t\t\t\t\tstyleClass: this._oComponent.getContentDensityClass(),\n\t\t\t\t\tactions: [MessageBox.Action.CLOSE],\n\t\t\t\t\tonClose: function() {\n\t\t\t\t\t\tthis._bMessageOpen = false;\n\t\t\t\t\t}.bind(this)\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t});\n\n});",
		"diploma/admin/devices/controller/TransportValueHelp.controller.js": "sap.ui.define([\n\t\"diploma/admin/devices/controller/BaseController\",\n\t\"sap/ui/model/json/JSONModel\",\n\t\"sap/ui/model/Filter\",\n\t\"sap/ui/model/FilterOperator\"\n], function(BaseController, JSONModel, Filter, FilterOperator) {\n\t\"use strict\";\n\n\treturn BaseController.extend(\"diploma.admin.devices.controller.TransportValueHelp\", {\n\t\t\n\t\t/** Lifecycle method for initialization. */\n\t\tonInit: function() {\n\t\t    this.setModel(new JSONModel({\n\t\t        advanced: false,\n\t\t        search: {\n\t\t            description: \"\",\n\t\t            route: {\n\t\t                name: \"\",\n\t\t                from: \"\",\n\t\t                to:   \"\"\n\t\t            },\n\t\t            person: {\n\t\t                organization: \"\",\n\t\t                name: \"\"\n\t\t            },\n\t\t            waypoints: {\n\t\t                name:   \"\",\n\t\t                country:\"\",\n\t\t                region: \"\"\n\t\t            },\n\t\t            schedule: {\n\t\t                name:   \"\",\n\t\t                start:  null,\n\t\t                low:    \"\",\n\t\t                high:   \"\"\n\t\t            }\n\t\t        }\n\t\t    }), \"view\");\n\t\t},\n\t\t\n\t\t/**\n\t\t * Adds the given style class directly to the dialog.\n\t\t * @param   {string}    sStyleClass     The style class to be added.\n\t\t * @returns {void}\n\t\t */\n\t\taddStyleClass: function(sStyleClass) {\n\t\t    this.byId(\"vhdTransport\").addStyleClass(sStyleClass);\n\t\t},\n\t\t\n\t\t/** Opens the dialog. */\n\t\topen: function() {\n\t\t    this.byId(\"vhdTransport\").open();\n\t\t},\n\t\t\n\t\t/** Closes the dialog. */\n\t\tclose: function() {\n\t\t    this.byId(\"vhdTransport\").close();\n\t\t},\n\t\t\n\t\t/** Toggles between basic and advanced searching. */\n\t\tonToggle: function() {\n\t\t    this.getModel(\"view\").setProperty(\"/advanced\", !this.getModel(\"view\").getProperty(\"/advanced\"));\n\t\t},\n\t\t\n\t\t/** Called when the user presses the cancel button. Closes the dialog. */\n\t\tonCancel: function() {\n\t\t    if (this.fireEvent(\"cancel\", {}, true)) {\n\t\t        this.close();\n\t\t    }\n\t\t},\n\t\t\n\t\t/** Called when the user presses the clear button. Closes the dialog. */\n\t\tonClear: function() {\n\t\t    if (this.fireEvent(\"clear\", {}, true)) {\n\t\t        this.close();\n\t\t    }\n\t\t},\n\t\t\n\t\t/**\n\t\t * Attaches an event listener on the \"select\" event.\n\t\t * This event is a proxy event for the press event of the list items.\n\t\t * @param   {function}  fnHandler   Callback function.\n\t\t * @param   {object=}   oListener   Listener object on which the handler is called.    \n\t\t * @returns {void}\n\t\t */\n\t\tattachSelect: function(fnHandler, oListener) {\n\t\t    this.attachEvent(\"select\", fnHandler, oListener);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Attaches an event listener on the \"cancel\" event.\n\t\t * This event is fired when the user presses the cancel button.\n\t\t * @param   {function}  fnHandler   Callback function.\n\t\t * @param   {object=}   oListener   Listener object on which the handler is called.    \n\t\t * @returns {void}\n\t\t */\n\t\tattachCancel: function(fnHandler, oListener) {\n\t\t    this.attachEvent(\"cancel\", fnHandler, oListener);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Attaches an event listener on the \"clear\" event.\n\t\t * This event is fired when the user presses the clear button.\n\t\t * @param   {function}  fnHandler   Callback function.\n\t\t * @param   {object=}   oListener   Listener object on which the handler is called.    \n\t\t * @returns {void}\n\t\t */\n\t\tattachClear: function(fnHandler, oListener) {\n\t\t    this.attachEvent(\"clear\", fnHandler, oListener);\n\t\t},\n\t\t\n\t\t/** Handler method which is called when an item is pressed. Fires the select event. */\n\t\tonSelect: function(oEvent) {\n\t\t    var bResult = this.fireEvent(\"select\", {\n\t\t        source: oEvent.getSource(),\n\t\t        params: oEvent.getParameters()\n\t\t    }, true);\n\t\t    if (bResult) {\n\t\t        this.close();\n\t\t    }\n\t\t},\n\t\t\n\t\t/** Common handler method for all search events of the search fields. Performs the list filtering.*/\n\t\tonSearch: function() {\n\t\t    var oModel = this.getModel(\"view\"),\n\t\t        aFilters = [],\n\t\t        sQuery,\n\t\t        /**\n\t\t         * Helper function. Adds a new \"contains\" filter to the filter list.\n\t\t         * @param   {string}    sViewProperty   The path in the view model where the query is stored.\n\t\t         * @param   {string}    sOdataProperty  The OData model path on which the filtering is done.\n\t\t         * @param\t{boolean}\tbEscape\t\t\tFlag indicating the the value should be escaped.\n\t\t         * @returns {void}\n\t\t         */\n\t\t        fnAddContainsFilter = function(sViewProperty, sOdataProperty, bEscape) {\n\t\t            sQuery = oModel.getProperty(sViewProperty);\n        \t\t    if (sQuery) {\n        \t\t        aFilters.push(new Filter(sOdataProperty, FilterOperator.Contains, \n        \t\t        \tbEscape ? \"'\" + sQuery + \"'\" : sQuery));\n        \t\t    }\n\t\t        },\n\t\t        /**\n\t\t         * Helper function. Increments the given date by one day.\n\t\t         * @param   {Date}  oDate   The input date.\n\t\t         * @returns {Date}  The new, incremented date.\n\t\t         */\n\t\t        fnAddOneDay = function(oDate) {\n\t\t            return new Date(oDate.getFullYear(),oDate.getMonth(),oDate.getDate()+1);\n\t\t        };\n\t\t        \n\t\t    fnAddContainsFilter(\"/search/description\", \"Transport/description\");\n\t\t    if (oModel.getProperty(\"/advanced\")) {\n\t\t        fnAddContainsFilter(\"/search/route/name\", \"Transport/Route/name\", true);\n\t\t        fnAddContainsFilter(\"/search/route/from\", \"fromName\");\n\t\t        fnAddContainsFilter(\"/search/route/to\", \"toName\");\n\t\t        \n\t\t        fnAddContainsFilter(\"/search/waypoints/name\", \"waypointNames\");\n\t\t        fnAddContainsFilter(\"/search/waypoints/country\", \"waypointCountries\");\n\t\t        fnAddContainsFilter(\"/search/waypoints/region\", \"waypointRegions\");\n\t\t        \n\t\t        fnAddContainsFilter(\"/search/schedule/name\", \"Transport/Schedule/name\", true);\n\t            sQuery = oModel.getProperty(\"/search/schedule/low\");\n    \t\t    if (sQuery && !isNaN(sQuery)) {\n    \t\t        aFilters.push(new Filter(\"totalDuration\", FilterOperator.GE, parseInt(sQuery, 10)));\n    \t\t    }\n\t            sQuery = oModel.getProperty(\"/search/schedule/high\");\n    \t\t    if (sQuery && !isNaN(sQuery)) {\n    \t\t        aFilters.push(new Filter(\"totalDuration\", FilterOperator.LE, parseInt(sQuery, 10)));\n    \t\t    }\n    \t\t    sQuery = oModel.getProperty(\"/search/schedule/start\");\n    \t\t    if (sQuery) {\n    \t\t        aFilters.push(new Filter(\"Transport/tWhen\", FilterOperator.BT, sQuery, fnAddOneDay(sQuery)));\n    \t\t    }\n\t\t        \n\t\t        fnAddContainsFilter(\"/search/person/name\", \"persons\");\n\t\t        fnAddContainsFilter(\"/search/person/organization\", \"organizations\");\n\t\t    }\n\t\t    \n\t\t    this.byId(\"tblSearchMain\").getBinding(\"items\").filter(aFilters, \"Application\");\n\t\t}\n\t\t\n\t});\n});",
		"diploma/admin/devices/controller/Master.controller.js": "/*global history */\nsap.ui.define([\n\t\"diploma/admin/devices/controller/BaseController\",\n\t\"sap/ui/model/json/JSONModel\",\n\t\"sap/ui/model/Filter\",\n\t\"sap/ui/model/FilterOperator\",\n\t\"sap/ui/model/Sorter\",\n\t\"sap/m/GroupHeaderListItem\",\n\t\"sap/ui/Device\",\n\t\"diploma/admin/devices/model/formatter\"\n], function(BaseController, JSONModel, Filter, FilterOperator, Sorter, GroupHeaderListItem, Device, formatter) {\n\t\"use strict\";\n\n\treturn BaseController.extend(\"diploma.admin.devices.controller.Master\", {\n\n\t\tformatter: formatter,\n\n\t\t/* =========================================================== */\n\t\t/* lifecycle methods                                           */\n\t\t/* =========================================================== */\n\n\t\t/**\n\t\t * Called when the master list controller is instantiated. It sets up the event handling for the master/detail communication and other lifecycle tasks.\n\t\t * @public\n\t\t */\n\t\tonInit: function() {\n\t\t\t// Control state model\n\t\t\tvar oList = this.byId(\"list\"),\n\t\t\t\toViewModel = new JSONModel({\n\t\t\t\t\tisFilterBarVisible: false,\n\t\t\t\t\tfilterBarLabel: \"\",\n\t\t\t\t\tdelay: 0,\n\t\t\t\t\ttitle: this.getResourceBundle().getText(\"masterTitleCount\", [0]),\n\t\t\t\t\tnoDataText: this.getResourceBundle().getText(\"masterListNoDataText\"),\n\t\t\t\t\tsortBy: \"name\",\n\t\t\t\t\tgroupBy: \"None\"\n\t\t\t\t}),\n\t\t\t\t// Put down master list's original value for busy indicator delay,\n\t\t\t\t// so it can be restored later on. Busy handling on the master list is\n\t\t\t\t// taken care of by the master list itself.\n\t\t\t\tiOriginalBusyDelay = oList.getBusyIndicatorDelay();\n\n\t\t\tthis._oList = oList;\n\t\t\t// keeps the filter and search state\n\t\t\tthis._oListFilterState = {\n\t\t\t\taFilter: [],\n\t\t\t\taSearch: []\n\t\t\t};\n\n\t\t\tthis.setModel(oViewModel, \"masterView\");\n\t\t\t// Make sure, busy indication is showing immediately so there is no\n\t\t\t// break after the busy indication for loading the view's meta data is\n\t\t\t// ended (see promise 'oWhenMetadataIsLoaded' in AppController)\n\t\t\toList.attachEventOnce(\"updateFinished\", function() {\n\t\t\t\t// Restore original busy indicator delay for the list\n\t\t\t\toViewModel.setProperty(\"/delay\", iOriginalBusyDelay);\n\t\t\t});\n\n\t\t\tthis.getView().addEventDelegate({\n\t\t\t\tonBeforeFirstShow: function() {\n\t\t\t\t\tthis.getOwnerComponent().oListSelector.setBoundMasterList(oList);\n\t\t\t\t}.bind(this)\n\t\t\t});\n\n\t\t\tthis.getRouter().getRoute(\"master\").attachPatternMatched(this._onMasterMatched, this);\n\t\t\tthis.getRouter().attachBypassed(this.onBypassed, this);\n\t\t},\n\n\t\t/* =========================================================== */\n\t\t/* event handlers                                              */\n\t\t/* =========================================================== */\n\n\t\t/**\n\t\t * After list data is available, this handler method updates the\n\t\t * master list counter and hides the pull to refresh control, if\n\t\t * necessary.\n\t\t * @param {sap.ui.base.Event} oEvent the update finished event\n\t\t * @public\n\t\t */\n\t\tonUpdateFinished: function(oEvent) {\n\t\t\t// update the master list object counter after new data is loaded\n\t\t\tthis._updateListItemCount(oEvent.getParameter(\"total\"));\n\t\t\t// hide pull to refresh if necessary\n\t\t\tthis.byId(\"pullToRefresh\").hide();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Event handler for the create button press.\n\t\t * Simply navigates to the editable detail page.\n\t\t */\n\t\tonCreate: function() {\n\t\t\tthis.getRouter().navTo(\"object\", {\n\t\t\t\tobjectId: \"new\"\n\t\t\t}, true);\n\t\t},\n\n\t\t/**\n\t\t * Event handler for the master search field. Applies current\n\t\t * filter value and triggers a new search. If the search field's\n\t\t * 'refresh' button has been pressed, no new search is triggered\n\t\t * and the list binding is refresh instead.\n\t\t * @param {sap.ui.base.Event} oEvent the search event\n\t\t * @public\n\t\t */\n\t\tonSearch: function(oEvent) {\n\t\t\tif (oEvent.getParameters().refreshButtonPressed) {\n\t\t\t\t// Search field's 'refresh' button has been pressed.\n\t\t\t\t// This is visible if you select any master list item.\n\t\t\t\t// In this case no new search is triggered, we only\n\t\t\t\t// refresh the list binding.\n\t\t\t\tthis.onRefresh();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar sQuery = oEvent.getParameter(\"query\");\n\n\t\t\tif (sQuery) {\n\t\t\t\tthis._oListFilterState.aSearch = [new Filter(\"name\", FilterOperator.Contains, sQuery)];\n\t\t\t} else {\n\t\t\t\tthis._oListFilterState.aSearch = [];\n\t\t\t}\n\t\t\tthis._applyFilterSearch();\n\n\t\t},\n\n\t\t/**\n\t\t * Event handler for refresh event. Keeps filter, sort\n\t\t * and group settings and refreshes the list binding.\n\t\t * @public\n\t\t */\n\t\tonRefresh: function() {\n\t\t\tthis._oList.getBinding(\"items\").refresh();\n\t\t},\n\n\t\t/**\n\t\t * Event handler for the sorter selection.\n\t\t * @param {sap.ui.base.Event} oEvent the select event\n\t\t * @public\n\t\t */\n\t\tonSort: function(oEvent) {\n\t\t\tvar sKey = oEvent.getSource().getSelectedItem().getKey(),\n\t\t\t\toViewModel = this.getModel(\"masterView\"),\n\t\t\t\tsGroupKey = oViewModel.getProperty(\"/groupBy\");\n\n\t\t\tif (sGroupKey !== \"None\" && sKey !== sGroupKey) {\n\t\t\t\t// If the list is grouped by something different than the new sorting, remove the grouping\n\t\t\t\t// Grouping only works if the list is primary sorted by the grouping\n\t\t\t\toViewModel.setProperty(\"/groupBy\", \"None\");\n\t\t\t}\n\n\t\t\tthis._applyGroupSort([new Sorter(sKey, false)]);\n\t\t},\n\n\t\t/**\n\t\t * Event handler for the filter button to open the ViewSettingsDialog.\n\t\t * which is used to add or remove filters to the master list. This\n\t\t * handler method is also called when the filter bar is pressed,\n\t\t * which is added to the beginning of the master list when a filter is applied.\n\t\t * @public\n\t\t */\n\t\tonOpenViewSettings: function() {\n\t\t\tif (!this._oViewSettingsDialog) {\n\t\t\t\tthis._oViewSettingsDialog = sap.ui.xmlfragment(\"diploma.admin.devices.view.ViewSettingsDialog\", this);\n\t\t\t\tthis.getView().addDependent(this._oViewSettingsDialog);\n\t\t\t\t// forward compact/cozy style into Dialog\n\t\t\t\tthis._oViewSettingsDialog.addStyleClass(this.getOwnerComponent().getContentDensityClass());\n\t\t\t}\n\t\t\tthis._oViewSettingsDialog.open();\n\t\t},\n\n\t\t/**\n\t\t * Event handler for the list selection event\n\t\t * @param {sap.ui.base.Event} oEvent the list selectionChange event\n\t\t * @public\n\t\t */\n\t\tonSelectionChange: function(oEvent) {\n\t\t\t// get the list item, either from the listItem parameter or from the event's source itself (will depend on the device-dependent mode).\n\t\t\tthis._showDetail(oEvent.getParameter(\"listItem\") || oEvent.getSource());\n\t\t},\n\n\t\t/**\n\t\t * Event handler for the bypassed event, which is fired when no routing pattern matched.\n\t\t * If there was an object selected in the master list, that selection is removed.\n\t\t * @public\n\t\t */\n\t\tonBypassed: function() {\n\t\t\tthis._oList.removeSelections(true);\n\t\t},\n\n\t\t/**\n\t\t * Used to create GroupHeaders with non-capitalized caption.\n\t\t * These headers are inserted into the master list to\n\t\t * group the master list's items.\n\t\t * @param {Object} oGroup group whose text is to be displayed\n\t\t * @public\n\t\t * @returns {sap.m.GroupHeaderListItem} group header with non-capitalized caption.\n\t\t */\n\t\tcreateGroupHeader: function(oGroup) {\n\t\t\treturn new GroupHeaderListItem({\n\t\t\t\ttitle: oGroup.text,\n\t\t\t\tupperCase: false\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Navigates back in the browser history, if the entry was created by this app.\n\t\t * If not, it navigates to the Fiori Launchpad home page\n\t\t * @override\n\t\t * @public\n\t\t */\n\t\tonNavBack: function() {\n\t\t\tvar oHistory = sap.ui.core.routing.History.getInstance(),\n\t\t\t\tsPreviousHash = oHistory.getPreviousHash(),\n\t\t\t\toCrossAppNavigator = sap.ushell.Container.getService(\"CrossApplicationNavigation\");\n\n\t\t\tif (sPreviousHash !== undefined) {\n\t\t\t\t// The history contains a previous entry\n\t\t\t\thistory.go(-1);\n\t\t\t} else {\n\t\t\t\t// Navigate back to FLP home\n\t\t\t\toCrossAppNavigator.toExternal({\n\t\t\t\t\ttarget: {\n\t\t\t\t\t\tshellHash: \"#\"\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t/* =========================================================== */\n\t\t/* begin: internal methods                                     */\n\t\t/* =========================================================== */\n\n\t\t/**\n\t\t * If the master route was hit (empty hash) we have to set\n\t\t * the hash to to the first item in the list as soon as the\n\t\t * listLoading is done and the first item in the list is known\n\t\t * @private\n\t\t */\n\t\t_onMasterMatched: function() {\n\t\t\tthis.getOwnerComponent().oListSelector.oWhenListLoadingIsDone.then(\n\t\t\t\tfunction(mParams) {\n\t\t\t\t\tif (mParams.list.getMode() === \"None\") {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tvar sObjectId = mParams.firstListitem.getBindingContext().getProperty(\"id\");\n\t\t\t\t\tthis.getRouter().navTo(\"object\", {\n\t\t\t\t\t\tobjectId: sObjectId\n\t\t\t\t\t}, true);\n\t\t\t\t}.bind(this),\n\t\t\t\tfunction(mParams) {\n\t\t\t\t\tif (mParams.error) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis.getRouter().getTargets().display(\"detailNoObjectsAvailable\");\n\t\t\t\t}.bind(this)\n\t\t\t);\n\t\t},\n\n\t\t/**\n\t\t * Shows the selected item on the detail page\n\t\t * On phones a additional history entry is created\n\t\t * @param {sap.m.ObjectListItem} oItem selected Item\n\t\t * @private\n\t\t */\n\t\t_showDetail: function(oItem) {\n\t\t\tvar bReplace = !Device.system.phone;\n\t\t\tthis.getRouter().navTo(\"object\", {\n\t\t\t\tobjectId: oItem.getBindingContext().getProperty(\"id\")\n\t\t\t}, bReplace);\n\t\t},\n\n\t\t/**\n\t\t * Sets the item count on the master list header\n\t\t * @param {integer} iTotalItems the total number of items in the list\n\t\t * @private\n\t\t */\n\t\t_updateListItemCount: function(iTotalItems) {\n\t\t\tvar sTitle;\n\t\t\t// only update the counter if the length is final\n\t\t\tif (this._oList.getBinding(\"items\").isLengthFinal()) {\n\t\t\t\tsTitle = this.getResourceBundle().getText(\"masterTitleCount\", [iTotalItems]);\n\t\t\t\tthis.getModel(\"masterView\").setProperty(\"/title\", sTitle);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Internal helper method to apply both filter and search state together on the list binding\n\t\t * @private\n\t\t */\n\t\t_applyFilterSearch: function() {\n\t\t\tvar aFilters = this._oListFilterState.aSearch.concat(this._oListFilterState.aFilter),\n\t\t\t\toViewModel = this.getModel(\"masterView\");\n\t\t\tthis._oList.getBinding(\"items\").filter(aFilters, \"Application\");\n\t\t\t// changes the noDataText of the list in case there are no filter results\n\t\t\tif (aFilters.length !== 0) {\n\t\t\t\toViewModel.setProperty(\"/noDataText\", this.getResourceBundle().getText(\"masterListNoDataWithFilterOrSearchText\"));\n\t\t\t} else if (this._oListFilterState.aSearch.length > 0) {\n\t\t\t\t// only reset the no data text to default when no new search was triggered\n\t\t\t\toViewModel.setProperty(\"/noDataText\", this.getResourceBundle().getText(\"masterListNoDataText\"));\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Internal helper method to apply both group and sort state together on the list binding\n\t\t * @private\n\t\t */\n\t\t_applyGroupSort: function(aSorters) {\n\t\t\tthis._oList.getBinding(\"items\").sort(aSorters);\n\t\t},\n\n\t\t/**\n\t\t * Internal helper method that sets the filter bar visibility property and the label's caption to be shown\n\t\t * @param {string} sFilterBarText the selected filter value\n\t\t * @private\n\t\t */\n\t\t_updateFilterBar: function(sFilterBarText) {\n\t\t\tvar oViewModel = this.getModel(\"masterView\");\n\t\t\toViewModel.setProperty(\"/isFilterBarVisible\", (this._oListFilterState.aFilter.length > 0));\n\t\t\toViewModel.setProperty(\"/filterBarLabel\", this.getResourceBundle().getText(\"masterFilterBarText\", [sFilterBarText]));\n\t\t}\n\n\t});\n\n});",
		"diploma/admin/devices/localService/mockserver.js": "sap.ui.define([\n\t\"sap/ui/core/util/MockServer\"\n], function(MockServer) {\n\t\"use strict\";\n\n\tvar oMockServer,\n\t\t_sAppModulePath = \"diploma/admin/devices/\",\n\t\t_sJsonFilesModulePath = _sAppModulePath + \"localService/mockdata\";\n\n\treturn {\n\t\t/**\n\t\t * Initializes the mock server.\n\t\t * You can configure the delay with the URL parameter \"serverDelay\".\n\t\t * The local mock data in this folder is returned instead of the real data for testing.\n\t\t * @public\n\t\t */\n\n\t\tinit: function() {\n\t\t\tvar oUriParameters = jQuery.sap.getUriParameters(),\n\t\t\t\tsJsonFilesUrl = jQuery.sap.getModulePath(_sJsonFilesModulePath),\n\t\t\t\tsManifestUrl = jQuery.sap.getModulePath(_sAppModulePath + \"manifest\", \".json\"),\n\t\t\t\tsEntity = \"Devices\",\n\t\t\t\tsErrorParam = oUriParameters.get(\"errorType\"),\n\t\t\t\tiErrorCode = sErrorParam === \"badRequest\" ? 400 : 500,\n\t\t\t\toManifest = jQuery.sap.syncGetJSON(sManifestUrl).data,\n\t\t\t\toMainDataSource = oManifest[\"sap.app\"].dataSources.mainService,\n\t\t\t\tsMetadataUrl = jQuery.sap.getModulePath(_sAppModulePath + oMainDataSource.settings.localUri.replace(\".xml\", \"\"), \".xml\"),\n\t\t\t\t// ensure there is a trailing slash\n\t\t\t\tsMockServerUrl = /.*\\/$/.test(oMainDataSource.uri) ? oMainDataSource.uri : oMainDataSource.uri + \"/\";\n\n\t\t\toMockServer = new MockServer({\n\t\t\t\trootUri: sMockServerUrl\n\t\t\t});\n\n\t\t\t// configure mock server with a delay of 1s\n\t\t\tMockServer.config({\n\t\t\t\tautoRespond: true,\n\t\t\t\tautoRespondAfter: (oUriParameters.get(\"serverDelay\") || 1000)\n\t\t\t});\n\n\t\t\toMockServer.simulate(sMetadataUrl, {\n\t\t\t\tsMockdataBaseUrl: sJsonFilesUrl,\n\t\t\t\tbGenerateMissingMockData: true\n\t\t\t});\n\n\t\t\tvar aRequests = oMockServer.getRequests(),\n\t\t\t\tfnResponse = function(iErrCode, sMessage, aRequest) {\n\t\t\t\t\taRequest.response = function(oXhr) {\n\t\t\t\t\t\toXhr.respond(iErrCode, {\n\t\t\t\t\t\t\t\"Content-Type\": \"text/plain;charset=utf-8\"\n\t\t\t\t\t\t}, sMessage);\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t// handling the metadata error test\n\t\t\tif (oUriParameters.get(\"metadataError\")) {\n\t\t\t\taRequests.forEach(function(aEntry) {\n\t\t\t\t\tif (aEntry.path.toString().indexOf(\"$metadata\") > -1) {\n\t\t\t\t\t\tfnResponse(500, \"metadata Error\", aEntry);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Handling request errors\n\t\t\tif (sErrorParam) {\n\t\t\t\taRequests.forEach(function(aEntry) {\n\t\t\t\t\tif (aEntry.path.toString().indexOf(sEntity) > -1) {\n\t\t\t\t\t\tfnResponse(iErrorCode, sErrorParam, aEntry);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\toMockServer.start();\n\n\t\t\tjQuery.sap.log.info(\"Running the app with mock data\");\n\t\t},\n\n\t\t/**\n\t\t * @public returns the mockserver of the app, should be used in integration tests\n\t\t * @returns {sap.ui.core.util.MockServer} the mockserver instance\n\t\t */\n\t\tgetMockServer: function() {\n\t\t\treturn oMockServer;\n\t\t}\n\t};\n\n});",
		"diploma/admin/devices/model/formatter.js": "sap.ui.define([], function() {\n\t\"use strict\";\n\n\treturn {\n\t\t/**\n\t\t * Rounds the currency value to 2 digits\n\t\t *\n\t\t * @public\n\t\t * @param {string} sValue value to be formatted\n\t\t * @returns {string} formatted currency value with 2 digits\n\t\t */\n\t\tcurrencyValue: function(sValue) {\n\t\t\tif (!sValue) {\n\t\t\t\treturn \"\";\n\t\t\t}\n\n\t\t\treturn parseFloat(sValue).toFixed(2);\n\t\t}\n\t};\n\n});",
		"diploma/admin/devices/view/DetailNoObjectsAvailable.view.xml": "<mvc:View controllerName=\"diploma.admin.devices.controller.BaseController\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\">\n\t<MessagePage description=\"\" icon=\"{sap-icon://product}\" id=\"page\" navButtonPress=\"onNavBack\" showNavButton=\"{device>/system/phone}\"\n\t\ttext=\"{i18n>noObjectsAvailableText}\" title=\"{i18n>notAvailableViewTitle}\"></MessagePage>\n</mvc:View>",
		"diploma/admin/devices/view/Detail.view.xml": "<mvc:View controllerName=\"diploma.admin.devices.controller.Detail\" \n    xmlns:footerbar=\"sap.ushell.ui.footerbar\" \n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns:view=\"sap.ui.core.mvc.View\"\n\txmlns:core=\"sap.ui.core\" \n\txmlns:sap.ui.layout.form=\"sap.ui.layout.form\" \n\txmlns:semantic=\"sap.m.semantic\" \n\txmlns=\"sap.m\">\n\t<semantic:DetailPage \n\t    busy=\"{detailView&gt;/busy}\" \n\t    busyIndicatorDelay=\"{detailView&gt;/delay}\" \n\t    id=\"page\" \n\t    navButtonPress=\"onNavBack\"\n\t\tshowNavButton=\"{device&gt;/system/phone}\" \n\t\ttitle=\"{i18n&gt;detailTitle}\">\n\t\t<semantic:content>\n\t\t\t<ObjectHeader title=\"{name}\"/>\n\t\t\t<IconTabBar class=\"sapUiResponsiveContentPadding\" expandable=\"false\" expanded=\"true\" id=\"iconTabBar\">\n\t\t\t\t<items>\n\t\t\t\t\t<IconTabFilter icon=\"sap-icon://hint\" id=\"iconTabBarFilter1\" tooltip=\"{i18n&gt;detailIconTabBarInfo}\">\n\t\t\t\t\t\t<core:Fragment fragmentName=\"diploma.admin.devices.view.DetailFormDisplay\" type=\"XML\" />\n\t\t\t\t\t\t<core:Fragment fragmentName=\"diploma.admin.devices.view.DetailFormChange\" type=\"XML\" />\n\t\t\t\t\t</IconTabFilter>\n\t\t\t\t\t<IconTabFilter icon=\"sap-icon://connected\" id=\"iconTabBarFilter2\" \n\t\t\t\t\t    visible=\"{= !${global>/isNew} }\"\n\t\t\t\t\t    tooltip=\"{i18n&gt;detailIconTabBarAttachments}\">\n\t\t\t\t\t\t<Table busyIndicatorDelay=\"{detailView>/lineItemTableDelay}\" \n\t\t\t\t\t\t    id=\"lineItemsList\" \n            \t\t\t\titems=\"{path: 'Sensors', parameters: {expand: 'Type'}}\"\n            \t\t\t\tnoDataText=\"{i18n&gt;detailLineItemTableNoDataText}\" \n            \t\t\t\tupdateFinished=\"onListUpdateFinished\" width=\"auto\" \n            \t\t\t\tvisible=\"{= !${global>/isNew} }\" \n            \t\t\t\tmode=\"{= ${global>/edit} ? 'Delete' : 'None' }\" \n            \t\t\t\tdelete=\"onDeleteSensor\">\n            \t\t\t\t<headerToolbar>\n            \t\t\t\t\t<Toolbar id=\"lineItemsToolbar\">\n            \t\t\t\t\t\t<Title id=\"lineItemsHeader\" text=\"{detailView&gt;/lineItemListTitle}\"/>\n            \t\t\t\t\t\t<ToolbarSpacer />\n            \t\t\t\t\t\t<Button visible=\"{global>/edit}\" icon=\"sap-icon://add\" press=\"openSensorDialog\" />\n            \t\t\t\t\t</Toolbar>\n            \t\t\t\t</headerToolbar>\n            \t\t\t\t<columns>\n            \t\t\t\t\t<Column>\n            \t\t\t\t\t\t<Text text=\"{i18n&gt;detailLineItemTableIDColumn}\"/>\n            \t\t\t\t\t</Column>\n            \t\t\t\t\t<Column demandPopin=\"true\" hAlign=\"Right\" minScreenWidth=\"Tablet\">\n            \t\t\t\t\t\t<Text text=\"{i18n&gt;detailLineItemTableUnitNumberColumn}\"/>\n            \t\t\t\t\t</Column>\n            \t\t\t\t</columns>\n            \t\t\t\t<items>\n            \t\t\t\t\t<ColumnListItem type=\"{= ${global>/edit} ? 'Inactive' : 'Navigation' }\" press=\"navigateToSensor\">\n            \t\t\t\t\t\t<cells>\n            \t\t\t\t\t\t\t<ObjectIdentifier title=\"{Type/name}\"/>\n            \t\t\t\t\t\t\t<ObjectNumber number=\"{number}\"/>\n            \t\t\t\t\t\t</cells>\n            \t\t\t\t\t</ColumnListItem>\n            \t\t\t\t</items>\n            \t\t\t</Table>\n\t\t\t\t\t</IconTabFilter>\n\t\t\t\t</items>\n\t\t\t</IconTabBar>\n\t\t</semantic:content>\n\t\t\t\n\t\t<semantic:customFooterContent>\n\t\t\t<OverflowToolbarButton \n\t\t\t    visible=\"{= !${global>/edit} }\" \n\t\t        icon=\"sap-icon://delete\" \n\t\t        text=\"{i18n>btnRemove}\" \n\t\t        tooltip=\"{i18n>btnRemove}\" \n\t\t        press=\"onDelete\"/>\n\t\t\t<OverflowToolbarButton \n\t\t\t    visible=\"{= !${global>/edit} }\" \n\t\t        icon=\"sap-icon://edit\" \n\t\t        text=\"{i18n>btnEdit}\" \n\t\t        tooltip=\"{i18n>btnEdit}\" \n\t\t        press=\"onEdit\"/>\n\t\t\t<OverflowToolbarButton \n\t\t\t    visible=\"{global>/isNew}\" \n\t\t\t    icon=\"sap-icon://decline\" \n\t\t\t    text=\"{i18n>btnCancel}\" \n\t\t\t    tooltip=\"{i18n>btnCancel}\" \n\t\t\t    press=\"onCreateCancel\" />\n\t\t\t<OverflowToolbarButton \n\t\t\t    visible=\"{global>/isNew}\" \n\t\t\t    icon=\"sap-icon://save\" \n\t\t\t    text=\"{i18n>btnSave}\" \n\t\t\t    tooltip=\"{i18n>btnSave}\" \n\t\t\t    press=\"onCreateCommit\" />\n\t\t\t<OverflowToolbarButton \n\t\t\t    visible=\"{= !${global>/isNew} &amp;&amp; ${global>/edit} }\" \n\t\t\t    icon=\"sap-icon://display\" \n\t\t\t    text=\"{i18n>btnDisplay}\" \n\t\t\t    tooltip=\"{i18n>btnDisplay}\" \n\t\t\t    press=\"onDisplay\" />\n\t\t</semantic:customFooterContent>\n\t\t\n\t\t<semantic:dependents>\n    \t    <core:Fragment fragmentName=\"diploma.admin.devices.view.AddSensorDialog\" type=\"XML\" />\n\t\t\t<mvc:XMLView viewName=\"diploma.admin.devices.view.TransportValueHelp\" id=\"vhdTransports\"/>\n\t\t</semantic:dependents>\n\t</semantic:DetailPage>\n</mvc:View>",
		"diploma/admin/devices/view/App.view.xml": "<mvc:View busy=\"{appView>/busy}\" busyIndicatorDelay=\"{appView>/delay}\" controllerName=\"diploma.admin.devices.controller.App\"\n\tdisplayBlock=\"true\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\">\n\t<SplitApp id=\"idAppControl\"/>\n</mvc:View>",
		"diploma/admin/devices/view/DetailObjectNotFound.view.xml": "<mvc:View controllerName=\"diploma.admin.devices.controller.BaseController\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\">\n\t<MessagePage description=\"\" icon=\"{sap-icon://product}\" id=\"page\" navButtonPress=\"onNavBack\" showNavButton=\"{device>/system/phone}\"\n\t\ttext=\"{i18n>noObjectFoundText}\" title=\"{i18n>detailTitle}\"></MessagePage>\n</mvc:View>",
		"diploma/admin/devices/model/models.js": "sap.ui.define([\n\t\"sap/ui/model/json/JSONModel\",\n\t\"sap/ui/Device\"\n], function(JSONModel, Device) {\n\t\"use strict\";\n\n\treturn {\n\t\tcreateDeviceModel: function() {\n\t\t\tvar oModel = new JSONModel(Device);\n\t\t\toModel.setDefaultBindingMode(\"OneWay\");\n\t\t\treturn oModel;\n\t\t},\n\n\t\tcreateFLPModel: function() {\n\t\t\tvar fnGetuser = jQuery.sap.getObject(\"sap.ushell.Container.getUser\"),\n\t\t\t\tbIsShareInJamActive = fnGetuser ? fnGetuser().isJamActive() : false,\n\t\t\t\toModel = new JSONModel({\n\t\t\t\t\tisShareInJamActive: bIsShareInJamActive\n\t\t\t\t});\n\t\t\toModel.setDefaultBindingMode(\"OneWay\");\n\t\t\treturn oModel;\n\t\t},\n\t\t\t\n\t\tcreateGlobalModel : function() {\n\t\t\treturn new JSONModel({\n\t\t\t\tedit: false,\n\t\t\t\tisNew: false\n\t\t\t});\n\t\t}\n\t};\n\n});",
		"diploma/admin/devices/view/Master.view.xml": "<mvc:View controllerName=\"diploma.admin.devices.controller.Master\" xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns:semantic=\"sap.m.semantic\" xmlns=\"sap.m\">\n\t<semantic:MasterPage id=\"page\" navButtonPress=\"onNavBack\" showNavButton=\"true\" title=\"{masterView>/title}\">\n\t\t<semantic:subHeader>\n\t\t\t<Bar id=\"headerBar\">\n\t\t\t\t<contentMiddle>\n\t\t\t\t\t<SearchField id=\"searchField\" search=\"onSearch\" showRefreshButton=\"{= !${device>/support/touch} }\" tooltip=\"{i18n>masterSearchTooltip}\"\n\t\t\t\t\t\twidth=\"100%\"></SearchField>\n\t\t\t\t</contentMiddle>\n\t\t\t</Bar>\n\t\t</semantic:subHeader>\n\t\t<semantic:content>\n\t\t\t<PullToRefresh id=\"pullToRefresh\" refresh=\"onRefresh\" visible=\"{device>/support/touch}\"/>\n\t\t\t<!-- For client side filtering add this to the items attribute:  parameters: {operationMode: 'Client'}}\" -->\n\t\t\t<List busyIndicatorDelay=\"{masterView>/delay}\" growing=\"true\" growingScrollToLoad=\"true\" growingThreshold=\"10\" id=\"list\"\n\t\t\t\titems=\"{ path: '/Devices', sorter: { path: 'name', descending: false }, groupHeaderFactory: '.createGroupHeader' }\"\n\t\t\t\tmode=\"{= ${device>/system/phone} ? 'None' : 'SingleSelectMaster'}\" noDataText=\"{masterView>/noDataText}\" selectionChange=\"onSelectionChange\"\n\t\t\t\tupdateFinished=\"onUpdateFinished\">\n\t\t\t\t<infoToolbar>\n\t\t\t\t\t<Toolbar active=\"true\" id=\"filterBar\" press=\"onOpenViewSettings\" visible=\"{masterView>/isFilterBarVisible}\">\n\t\t\t\t\t\t<Title id=\"filterBarLabel\" text=\"{masterView>/filterBarLabel}\"/>\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</infoToolbar>\n\t\t\t\t<items>\n\t\t\t\t\t<ObjectListItem press=\"onSelectionChange\" title=\"{name}\" type=\"{= ${device>/system/phone} ? 'Active' : 'Inactive'}\"></ObjectListItem>\n\t\t\t\t</items>\n\t\t\t</List>\n\t\t</semantic:content>\n\t\t<semantic:customFooterContent>\n\t\t\t<Button icon=\"sap-icon://create\" text=\"{i18n>btnCreate}\" press=\"onCreate\" visible=\"{= !${global>/edit} }\"/>\n\t\t</semantic:customFooterContent>\n\t</semantic:MasterPage>\n</mvc:View>",
		"diploma/admin/devices/view/NotFound.view.xml": "<mvc:View controllerName=\"diploma.admin.devices.controller.BaseController\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\">\n\t<MessagePage description=\"\" icon=\"{sap-icon://document}\" id=\"page\" navButtonPress=\"onNavBack\" showNavButton=\"{device>/system/phone}\"\n\t\ttext=\"{i18n>notFoundText}\" title=\"{i18n>notFoundTitle}\"></MessagePage>\n</mvc:View>",
		"diploma/admin/devices/view/DetailFormDisplay.fragment.xml": "<core:FragmentDefinition \n    xmlns:core=\"sap.ui.core\" \n    xmlns:form=\"sap.ui.layout.form\"\n    xmlns=\"sap.m\">\n\t<form:SimpleForm layout=\"ResponsiveGridLayout\" \n\t\tmaxContainerCols=\"2\"\n\t\ttitle=\"{i18n>detailIconTabBarInfo}\" \n\t\tlabelSpanL=\"3\"  labelSpanM=\"3\" \n\t\temptySpanL=\"2\"  emptySpanM=\"2\" \n\t\tcolumnsL=\"1\"    columnsM=\"1\"\n\t\tvisible=\"{= !${global>/edit} }\">\n\t    \n\t\t<Label text=\"{i18n>deviceName}\"/>\n\t\t<Text text=\"{name}\"/>\n\t\t    \n\t\t<Label text=\"{i18n>deviceDesc}\"/>\n\t\t<Text text=\"{description}\" />\n\t\t    \n\t    <Label text=\"{i18n>transportName}\" visible=\"{= ${Transport} !== null }\"/>\n\t    <Link text=\"{Transport/description}\" press=\"navigateToTransport\" visible=\"{= ${Transport} !== null }\"/>\n\t        \n\t\t<Label text=\"{i18n>transWhen}\" visible=\"{= ${Transport} !== null }\"/>\n\t\t<Text text=\"{\n    \t        path: 'Transport/tWhen', \n    \t        type: 'sap.ui.model.type.DateTime',\n    \t        format: {style: 'short'}\n    \t    }\" visible=\"{= ${Transport} !== null }\"/>\n\t\t    \n\t\t<Label text=\"{i18n>transFrom}\" visible=\"{= ${Transport} !== null }\"/>\n\t\t<Text text=\"{= ${Transport/returning} === 0 ? ${Transport/Route/FromLocation/name} : ${Transport/Route/ToLocation/name}}\"\n\t\t\tvisible=\"{= ${Transport} !== null }\"/>\n\t\t    \n\t\t<Label text=\"{i18n>transTo}\" visible=\"{= ${Transport} !== null }\"/>\n\t\t<Text text=\"{= ${Transport/returning} === 1 ? ${Transport/Route/FromLocation/name} : ${Transport/Route/ToLocation/name}}\"\n\t\t\tvisible=\"{= ${Transport} !== null }\"/>\n\t</form:SimpleForm>\n</core:FragmentDefinition>",
		"diploma/admin/devices/view/DetailFormChange.fragment.xml": "<core:FragmentDefinition \n    xmlns:core=\"sap.ui.core\" \n    xmlns:form=\"sap.ui.layout.form\"\n    xmlns=\"sap.m\">\n\t<form:SimpleForm layout=\"ResponsiveGridLayout\" \n\t\tmaxContainerCols=\"2\" \n\t\teditable=\"true\" class=\"editableForm\"\n\t\tlabelSpanL=\"3\"  labelSpanM=\"3\" \n\t\temptySpanL=\"2\"  emptySpanM=\"2\" \n\t\tcolumnsL=\"1\"    columnsM=\"1\"\n\t\tvisible=\"{global>/edit}\">\n\t    <form:toolbar>\n\t        <Toolbar>\n\t            <Title text=\"{i18n>detailIconTabBarInfo}\" />\n\t            <ToolbarSpacer />\n    \t\t\t<Button visible=\"{= !${global>/isNew} }\" \n    \t\t\t    icon=\"sap-icon://undo\" \n    \t\t\t    tooltip=\"{i18n>undoButtonTooltip}\" \n    \t\t\t    press=\"onUndo\" />\n    \t\t\t<Button visible=\"{= !${global>/isNew} }\" \n    \t\t\t    icon=\"sap-icon://save\" \n    \t\t\t    tooltip=\"{i18n>saveButtonTooltip}\" \n    \t\t\t    press=\"onUpdateCommit\" />\n\t        </Toolbar>\n\t    </form:toolbar>\n\t    \n\t    <Label text=\"{i18n>deviceName}\"/>\n\t\t<Input id=\"deviceName\" value=\"{name}\" width=\"100%\"/>\n\t\t    \n\t\t<Label text=\"{i18n>deviceDesc}\"/>\n\t\t<Input id=\"deviceDesc\" value=\"{description}\" width=\"100%\"/>\n\t\t    \n\t\t<Label text=\"{i18n>transportName}\"/>\n\t\t<Input id=\"deviceTrans\" \n\t\t    valueHelpOnly=\"true\" \n\t\t    valueHelpRequest=\"onTransportValueHelpRequested\" \n\t\t    width=\"100%\"\n\t\t    value=\"{Transport/description}\"\n\t\t    showValueHelp=\"true\">\n\t\t    <customData><core:CustomData key=\"transport\" value=\"{transport}\"/></customData>\n\t\t</Input>\n\t</form:SimpleForm>\n</core:FragmentDefinition>",
		"diploma/admin/devices/view/AddSensorDialog.fragment.xml": "<core:FragmentDefinition \n    xmlns:core=\"sap.ui.core\" \n    xmlns:form=\"sap.ui.layout.form\"\n    xmlns=\"sap.m\">\n\t<Dialog title=\"{i18n>sensorTitle}\" id=\"dialogSensor\" type=\"Standard\">\n\t\t<content>\n\t\t\t<Panel>\n\t\t\t\t<Label text=\"{i18n>sensorNumber}\" />\n\t\t\t\t<Input type=\"Number\" id=\"sensorNumber\" width=\"100%\"/>\n\t\t\t\t<Label text=\"{i18n>sensorType}\" />\n\t\t\t\t<Select width=\"100%\" id=\"sensorType\" items=\"{/SensorTypes}\">\n\t\t\t\t\t<core:Item key=\"{id}\" text=\"{name}\"  />\n\t\t\t\t</Select>\n\t\t\t</Panel>\n\t\t</content>\n\t\t<beginButton><Button text=\"{i18n>create}\" press=\"onCreateSensor\"/></beginButton>\n\t\t<endButton><Button text=\"{i18n>cancel}\" press=\"closeSensorDialog\"/></endButton>\n\t</Dialog>\n</core:FragmentDefinition>",
		"diploma/admin/devices/view/ViewSettingsDialog.fragment.xml": "<core:FragmentDefinition xmlns:core=\"sap.ui.core\" xmlns=\"sap.m\">\n\t<ViewSettingsDialog confirm=\"onConfirmViewSettingsDialog\" id=\"viewSettingsDialog\" resetFilters=\"onViewSettingsDialogResetFilters\">\n\t\t<filterItems>\n\t\t\t<ViewSettingsFilterItem id=\"filterItems\" key=\"Price\" multiSelect=\"false\" text=\"{i18n>masterFilterName}\">\n\t\t\t\t<items>\n\t\t\t\t\t<ViewSettingsItem id=\"viewFilter1\" key=\"Filter1\" text=\"{i18n>masterFilter1}\"/>\n\t\t\t\t\t<ViewSettingsItem id=\"viewFilter2\" key=\"Filter2\" text=\"{i18n>masterFilter2}\"/>\n\t\t\t\t</items>\n\t\t\t</ViewSettingsFilterItem>\n\t\t</filterItems>\n\t</ViewSettingsDialog>\n</core:FragmentDefinition>",
		"diploma/admin/devices/view/TransportValueHelp.view.xml": "<mvc:View controllerName=\"diploma.admin.devices.controller.TransportValueHelp\" \n    xmlns:mvc=\"sap.ui.core.mvc\" \n    xmlns:core=\"sap.ui.core\" \n    xmlns:form=\"sap.ui.layout.form\"\n    xmlns=\"sap.m\">\n\t<Dialog id=\"vhdTransport\"\n\t    contentHeight=\"75%\"\n\t\tcontentWidth=\"40rem\" \n\t\tstretch=\"{device>/system/phone}\"\n\t    title=\"{i18n>vhdTransportTitle}\" >\n\t    <VBox>\n\t        <Toolbar id=\"tlbMainSearch\">\n\t            <SearchField value=\"{view>/search/description}\"\n\t                placeholder=\"{i18n>searchByDescription}\"\n\t                search=\"onSearch\"/>\n\t            <ToolbarSpacer/>\n\t            <Button id=\"btnAdvancedSearch\" \n\t                type=\"Transparent\"\n\t                text=\"{= ${view>/advanced} ? ${i18n>hideAdvanced} : ${i18n>showAdvanced} }\"\n\t                press=\"onToggle\"/>\n\t        </Toolbar>\n\t        <IconTabBar visible=\"{view>/advanced}\" class=\"sapUiNoMarginTop sapUiNoMarginEnd\">\n\t            <items>\n\t                <IconTabFilter text=\"{i18n>itfRouteText}\">\n        \t            <form:SimpleForm\n                \t\t\tmaxContainerCols=\"2\" editable=\"true\"\n                \t\t\tlayout=\"ResponsiveGridLayout\"\n                \t\t\tlabelSpanL=\"4\"  labelSpanM=\"4\"\n                \t\t\temptySpanL=\"0\"  emptySpanM=\"0\"\n                \t\t\tcolumnsL=\"2\"    columnsM=\"2\"\n                \t\t\tclass=\"editableForm sapUiNoMarginTop sapUiNoMarginEnd\">\n                \t\t\t<form:content>\n                \t\t\t    <Label text=\"{i18n>transportRouteName}\"/>\n        \t                    <SearchField value=\"{view>/search/route/name}\" search=\"onSearch\" />\n                \t\t\t    <Label text=\"{i18n>transportRouteFrom}\"/>\n        \t                    <SearchField value=\"{view>/search/route/from}\" search=\"onSearch\"/>\n                \t\t\t    <Label text=\"{i18n>transportRouteTo}\"/>\n        \t                    <SearchField value=\"{view>/search/route/to}\" search=\"onSearch\"/>\n            \t\t\t    </form:content>\n            \t\t    </form:SimpleForm>\n\t                </IconTabFilter>\n\t                <IconTabFilter text=\"{i18n>itfWaypointsText}\">\n        \t            <form:SimpleForm\n                \t\t\tmaxContainerCols=\"2\" editable=\"true\"\n                \t\t\tlayout=\"ResponsiveGridLayout\"\n                \t\t\tlabelSpanL=\"4\"  labelSpanM=\"4\"\n                \t\t\temptySpanL=\"0\"  emptySpanM=\"0\"\n                \t\t\tcolumnsL=\"2\"    columnsM=\"2\"\n                \t\t\tclass=\"editableForm\">\n                \t\t\t<form:content>\n                \t\t\t    <Label text=\"{i18n>transportWaypointName}\"/>\n        \t                    <SearchField value=\"{view>/search/waypoints/name}\" search=\"onSearch\" />\n                \t\t\t    <Label text=\"{i18n>transportWaypointRegion}\"/>\n        \t                    <SearchField value=\"{view>/search/waypoints/region}\" search=\"onSearch\"/>\n                \t\t\t    <Label text=\"{i18n>transportWaypointCountry}\"/>\n        \t                    <SearchField value=\"{view>/search/waypoints/country}\" search=\"onSearch\"/>\n            \t\t\t    </form:content>\n            \t\t    </form:SimpleForm>\n\t                </IconTabFilter>\n\t                <IconTabFilter text=\"{i18n>itfScheduleText}\">\n        \t            <form:SimpleForm\n                \t\t\tmaxContainerCols=\"2\" editable=\"true\"\n                \t\t\tlayout=\"ResponsiveGridLayout\"\n                \t\t\tlabelSpanL=\"4\"  labelSpanM=\"4\"\n                \t\t\temptySpanL=\"0\"  emptySpanM=\"0\"\n                \t\t\tcolumnsL=\"2\"    columnsM=\"2\"\n                \t\t\tclass=\"editableForm sapUiNoMarginTop sapUiNoMarginEnd\">\n                \t\t\t<form:content>\n                \t\t\t    <Label text=\"{i18n>transportScheduleName}\"/>\n        \t                    <SearchField value=\"{view>/search/schedule/name}\" search=\"onSearch\" />\n                \t\t\t    <Label text=\"{i18n>transportScheduleStart}\"/>\n                \t\t\t    <DatePicker dateValue=\"{view>/search/schedule/start}\" \n                \t\t\t        displayFormat=\"short\" \n                \t\t\t        change=\"onSearch\" />\n                \t\t\t    <Label text=\"{i18n>transportScheduleDurationLow}\"/>\n        \t                    <SearchField value=\"{\n        \t                        path: 'view>/search/schedule/low',\n        \t                        type: 'sap.ui.model.Integer',\n        \t                        constraints: {minimum: 0}\n    \t                        }\" search=\"onSearch\"/>\n                \t\t\t    <Label text=\"{i18n>transportScheduleDurationHigh}\"/>\n        \t                    <SearchField value=\"{\n        \t                        path: 'view>/search/schedule/high',\n        \t                        type: 'sap.ui.model.Integer',\n        \t                        constraints: {minimum: 0}\n    \t                        }\" search=\"onSearch\"/>\n            \t\t\t    </form:content>\n            \t\t    </form:SimpleForm>\n\t                </IconTabFilter>\n\t                <IconTabFilter text=\"{i18n>itfPersonText}\">\n        \t            <form:SimpleForm\n                \t\t\tmaxContainerCols=\"2\" editable=\"true\"\n                \t\t\tlayout=\"ResponsiveGridLayout\"\n                \t\t\tlabelSpanL=\"4\"  labelSpanM=\"4\"\n                \t\t\temptySpanL=\"0\"  emptySpanM=\"0\"\n                \t\t\tcolumnsL=\"2\"    columnsM=\"2\"\n                \t\t\tclass=\"editableForm sapUiNoMarginTop sapUiNoMarginEnd\">\n                \t\t\t<form:content>\n                \t\t\t    <Label text=\"{i18n>transportOrganization}\"/>\n        \t                    <SearchField value=\"{view>/search/person/organization}\" search=\"onSearch\" />\n                \t\t\t    <Label text=\"{i18n>transportPersonName}\"/>\n        \t                    <SearchField value=\"{view>/search/person/name}\" search=\"onSearch\"/>\n            \t\t\t    </form:content>\n            \t\t    </form:SimpleForm>\n\t                </IconTabFilter>\n    \t\t    </items>\n\t        </IconTabBar>\n\t        <Table id=\"tblSearchMain\"\n\t            growing=\"true\"\n\t            items=\"{path: '/ExpandedTransports', sorter: {path: 'Transport/description'}, parameters: {expand: 'Transport'}}\">\n\t            <columns>\n\t                <Column><Label text=\"{i18n>transportDescription}\"/></Column>\n\t                <Column><Label text=\"{i18n>transportDate}\"/></Column>\n\t                <Column minScreenWidth=\"Tablet\" demandPopin=\"true\"><Label text=\"{i18n>transportFrom}\"/></Column>\n\t                <Column minScreenWidth=\"Tablet\" demandPopin=\"true\"><Label text=\"{i18n>transportTo}\"/></Column>\n\t            </columns>\n\t            <items>\n\t                <ColumnListItem type=\"Active\" press=\"onSelect\">\n\t                    <cells>\n\t                        <Text text=\"{Transport/description}\"/>\n\t                        <Text text=\"{\n                    \t        path: 'Transport/tWhen', \n                    \t        type: 'sap.ui.model.type.DateTime',\n                    \t        format: {style: 'short'}\n                \t        }\"/>\n\t                        <Text text=\"{fromName}\"/>\n\t                        <Text text=\"{toName}\"/>\n\t                    </cells>\n\t                </ColumnListItem>\n\t            </items>\n\t        </Table>\n\t    </VBox>\n\t    <beginButton>\n\t        <Button text=\"{i18n>clear}\" press=\"onClear\"/>\n\t    </beginButton>\n\t    <endButton>\n\t        <Button text=\"{i18n>cancel}\" press=\"onCancel\"/>\n\t    </endButton>\n\t</Dialog>\n</mvc:View>"
	}
});