/**
* This file was auto-generated by SAP Web IDE build and includes all
* the source files required by SAPUI5 runtime for performance optimization.
* PLEASE DO NOT EDIT THIS FILE!! Changes will be overwritten the next time the build is run.
*/
jQuery.sap.registerPreloadedModules({
	"version": "2.0",
	"name": "diploma/admin/route/view/Component-preload",
	"modules": {
		"diploma/admin/route/view/Component.js": "sap.ui.define([\n\t\t\"sap/ui/core/UIComponent\",\n\t\t\"sap/ui/Device\",\n\t\t\"diploma/admin/route/view/model/models\",\n\t\t\"diploma/admin/route/view/controller/ListSelector\",\n\t\t\"diploma/admin/route/view/controller/ErrorHandler\"\n\t], function (UIComponent, Device, models, ListSelector, ErrorHandler) {\n\t\t\"use strict\";\n\n\t\treturn UIComponent.extend(\"diploma.admin.route.view.Component\", {\n\n\t\t\tmetadata : {\n\t\t\t\tmanifest : \"json\"\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * The component is initialized by UI5 automatically during the startup of the app and calls the init method once.\n\t\t\t * In this method, the FLP and device models are set and the router is initialized.\n\t\t\t * @public\n\t\t\t * @override\n\t\t\t */\n\t\t\tinit : function () {\n\t\t\t\tthis.oListSelector = new ListSelector();\n\t\t\t\tthis._oErrorHandler = new ErrorHandler(this);\n                this._loadGoogleMaps();\n                \n\t\t\t\t// set the device model\n\t\t\t\tthis.setModel(models.createDeviceModel(), \"device\");\n\t\t\t\t// set the FLP model\n\t\t\t\tthis.setModel(models.createFLPModel(), \"FLP\");\n\n\t\t\t\t// call the base component's init function and create the App view\n\t\t\t\tUIComponent.prototype.init.apply(this, arguments);\n\t\t\t\tthis.getModel().setDefaultBindingMode(sap.ui.model.BindingMode.TwoWay);\n\n\t\t\t\t// create the views based on the url/hash\n\t\t\t\tthis.getRouter().initialize();\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @function _loadGoogleMaps\n\t\t\t * @private\n\t\t\t * Loads the Google libraries if not already loaded.\n\t\t\t * \n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\t _loadGoogleMaps: function() {\n\t\t\t \tvar oPromise = jQuery.Deferred();\n\t\t\t \tif (typeof google === \"undefined\") {\n\t\t\t \t\tjQuery.sap.includeScript(\"https:/\" + \"/maps.googleapis.com/maps/api/js?libraries=visualization\", \"gmaps\", \n\t\t\t \t\t\toPromise.resolve.bind(oPromise), oPromise.reject.bind(oPromise));\n\t\t\t \t}\n\t\t\t \telse {\n\t\t\t \t\toPromise.resolve();\n\t\t\t \t}\n\t\t\t \tthis.getMapPromise = function() {\n\t\t\t \t    return oPromise.promise();\n\t\t\t \t};\n\t\t\t },\n\t\t\t \n\t\t\t/**\n\t\t\t * The component is destroyed by UI5 automatically.\n\t\t\t * In this method, the ListSelector and ErrorHandler are destroyed.\n\t\t\t * @public\n\t\t\t * @override\n\t\t\t */\n\t\t\tdestroy : function () {\n\t\t\t\tthis.oListSelector.destroy();\n\t\t\t\tthis._oErrorHandler.destroy();\n\t\t\t\t// call the base component's destroy function\n\t\t\t\tUIComponent.prototype.destroy.apply(this, arguments);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * This method can be called to determine whether the sapUiSizeCompact or sapUiSizeCozy\n\t\t\t * design mode class should be set, which influences the size appearance of some controls.\n\t\t\t * @public\n\t\t\t * @return {string} css class, either 'sapUiSizeCompact' or 'sapUiSizeCozy' - or an empty string if no css class should be set\n\t\t\t */\n\t\t\tgetContentDensityClass : function() {\n\t\t\t\tif (this._sContentDensityClass === undefined) {\n\t\t\t\t\t// check whether FLP has already set the content density class; do nothing in this case\n\t\t\t\t\tif (jQuery(document.body).hasClass(\"sapUiSizeCozy\") || jQuery(document.body).hasClass(\"sapUiSizeCompact\")) {\n\t\t\t\t\t\tthis._sContentDensityClass = \"\";\n\t\t\t\t\t} else if (!Device.support.touch) { // apply \"compact\" mode if touch is not supported\n\t\t\t\t\t\tthis._sContentDensityClass = \"sapUiSizeCompact\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// \"cozy\" in case of touch support; default for most sap.m controls, but needed for desktop-first controls like sap.ui.table.Table\n\t\t\t\t\t\tthis._sContentDensityClass = \"sapUiSizeCozy\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this._sContentDensityClass;\n\t\t\t}\n\n\t\t});\n\n\t}\n);",
		"diploma/admin/route/view/controller/App.controller.js": "sap.ui.define([\n\t\t\"diploma/admin/route/view/controller/BaseController\",\n\t\t\"sap/ui/model/json/JSONModel\"\n\t], function (BaseController, JSONModel) {\n\t\t\"use strict\";\n\n\t\treturn BaseController.extend(\"diploma.admin.route.view.controller.App\", {\n\n\t\t\tonInit : function () {\n\t\t\t\tvar oViewModel,\n\t\t\t\t\tfnSetAppNotBusy,\n\t\t\t\t\toListSelector = this.getOwnerComponent().oListSelector,\n\t\t\t\t\tiOriginalBusyDelay = this.getView().getBusyIndicatorDelay();\n\n\t\t\t\toViewModel = new JSONModel({\n\t\t\t\t\tbusy : true,\n\t\t\t\t\tdelay : 0\n\t\t\t\t});\n\t\t\t\tthis.setModel(oViewModel, \"appView\");\n\n\t\t\t\tfnSetAppNotBusy = function() {\n\t\t\t\t\toViewModel.setProperty(\"/busy\", false);\n\t\t\t\t\toViewModel.setProperty(\"/delay\", iOriginalBusyDelay);\n\t\t\t\t};\n\n\t\t\t\tthis.getOwnerComponent().getModel().metadataLoaded()\n\t\t\t\t\t\t.then(fnSetAppNotBusy);\n\n\t\t\t\t// Makes sure that master view is hidden in split app\n\t\t\t\t// after a new list entry has been selected.\n\t\t\t\toListSelector.attachListSelectionChange(function () {\n\t\t\t\t\tthis.byId(\"idAppControl\").hideMaster();\n\t\t\t\t}, this);\n\n\t\t\t\t// apply content density mode to root view\n\t\t\t\tthis.getView().addStyleClass(this.getOwnerComponent().getContentDensityClass());\n\t\t\t}\n\n\t\t});\n\n\t}\n);",
		"diploma/admin/route/view/controller/BaseController.js": "/*global history */\nsap.ui.define([\n\t\t\"sap/ui/core/mvc/Controller\",\n\t\t\"sap/ui/core/routing/History\"\n\t], function (Controller, History) {\n\t\t\"use strict\";\n\n\t\treturn Controller.extend(\"diploma.admin.route.view.controller.BaseController\", {\n\t\t\t/**\n\t\t\t * Convenience method for accessing the router in every controller of the application.\n\t\t\t * @public\n\t\t\t * @returns {sap.ui.core.routing.Router} the router for this component\n\t\t\t */\n\t\t\tgetRouter : function () {\n\t\t\t\treturn this.getOwnerComponent().getRouter();\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Convenience method for getting the view model by name in every controller of the application.\n\t\t\t * @public\n\t\t\t * @param {string} sName the model name\n\t\t\t * @returns {sap.ui.model.Model} the model instance\n\t\t\t */\n\t\t\tgetModel : function (sName) {\n\t\t\t\treturn this.getView().getModel(sName);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Convenience method for setting the view model in every controller of the application.\n\t\t\t * @public\n\t\t\t * @param {sap.ui.model.Model} oModel the model instance\n\t\t\t * @param {string} sName the model name\n\t\t\t * @returns {sap.ui.mvc.View} the view instance\n\t\t\t */\n\t\t\tsetModel : function (oModel, sName) {\n\t\t\t\treturn this.getView().setModel(oModel, sName);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Convenience method for getting the resource bundle.\n\t\t\t * @public\n\t\t\t * @returns {sap.ui.model.resource.ResourceModel} the resourceModel of the component\n\t\t\t */\n\t\t\tgetResourceBundle : function () {\n\t\t\t\treturn this.getOwnerComponent().getModel(\"i18n\").getResourceBundle();\n\t\t\t}\n\n\t\t});\n\n\t}\n);",
		"diploma/admin/route/view/controller/ErrorHandler.js": "sap.ui.define([\n\t\t\"sap/ui/base/Object\",\n\t\t\"sap/m/MessageBox\"\n\t], function (UI5Object, MessageBox) {\n\t\t\"use strict\";\n\n\t\treturn UI5Object.extend(\"diploma.admin.route.view.controller.ErrorHandler\", {\n\n\t\t\t/**\n\t\t\t * Handles application errors by automatically attaching to the model events and displaying errors when needed.\n\t\t\t * @class\n\t\t\t * @param {sap.ui.core.UIComponent} oComponent reference to the app's component\n\t\t\t * @public\n\t\t\t * @alias diploma.admin.route.view.controller.ErrorHandler\n\t\t\t */\n\t\t\tconstructor : function (oComponent) {\n\t\t\t\tthis._oResourceBundle = oComponent.getModel(\"i18n\").getResourceBundle();\n\t\t\t\tthis._oComponent = oComponent;\n\t\t\t\tthis._oModel = oComponent.getModel();\n\t\t\t\tthis._bMessageOpen = false;\n\t\t\t\tthis._sErrorText = this._oResourceBundle.getText(\"errorText\");\n\n\t\t\t\tthis._oModel.attachMetadataFailed(function (oEvent) {\n\t\t\t\t\tvar oParams = oEvent.getParameters();\n\n\t\t\t\t\tthis._showMetadataError(oParams.response);\n\t\t\t\t}, this);\n\n\t\t\t\tthis._oModel.attachRequestFailed(function (oEvent) {\n\t\t\t\t\tvar oParams = oEvent.getParameters();\n\n\t\t\t\t\t// An entity that was not found in the service is also throwing a 404 error in oData.\n\t\t\t\t\t// We already cover this case with a notFound target so we skip it here.\n\t\t\t\t\t// A request that cannot be sent to the server is a technical error that we have to handle though\n\t\t\t\t\tif (oParams.response.statusCode !== \"404\" || (oParams.response.statusCode === 404 && oParams.response.responseText.indexOf(\"Cannot POST\") === 0)) {\n\t\t\t\t\t\tthis._showServiceError(oParams.response);\n\t\t\t\t\t}\n\t\t\t\t}, this);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Shows a {@link sap.m.MessageBox} when the metadata call has failed.\n\t\t\t * The user can try to refresh the metadata.\n\t\t\t * @param {string} sDetails a technical error to be displayed on request\n\t\t\t * @private\n\t\t\t */\n\t\t\t_showMetadataError : function (sDetails) {\n\t\t\t\tMessageBox.error(\n\t\t\t\t\tthis._sErrorText,\n\t\t\t\t\t{\n\t\t\t\t\t\tid : \"metadataErrorMessageBox\",\n\t\t\t\t\t\tdetails : sDetails,\n\t\t\t\t\t\tstyleClass : this._oComponent.getContentDensityClass(),\n\t\t\t\t\t\tactions : [MessageBox.Action.RETRY, MessageBox.Action.CLOSE],\n\t\t\t\t\t\tonClose : function (sAction) {\n\t\t\t\t\t\t\tif (sAction === MessageBox.Action.RETRY) {\n\t\t\t\t\t\t\t\tthis._oModel.refreshMetadata();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}.bind(this)\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Shows a {@link sap.m.MessageBox} when a service call has failed.\n\t\t\t * Only the first error message will be display.\n\t\t\t * @param {string} sDetails a technical error to be displayed on request\n\t\t\t * @private\n\t\t\t */\n\t\t\t_showServiceError : function (sDetails) {\n\t\t\t\tif (this._bMessageOpen) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._bMessageOpen = true;\n\t\t\t\tMessageBox.error(\n\t\t\t\t\tthis._sErrorText,\n\t\t\t\t\t{\n\t\t\t\t\t\tid : \"serviceErrorMessageBox\",\n\t\t\t\t\t\tdetails : sDetails,\n\t\t\t\t\t\tstyleClass : this._oComponent.getContentDensityClass(),\n\t\t\t\t\t\tactions : [MessageBox.Action.CLOSE],\n\t\t\t\t\t\tonClose : function () {\n\t\t\t\t\t\t\tthis._bMessageOpen = false;\n\t\t\t\t\t\t}.bind(this)\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\n\t\t});\n\n\t}\n);",
		"diploma/admin/route/view/controller/Master.controller.js": "/*global history */\nsap.ui.define([\n\t\t\"diploma/admin/route/view/controller/BaseController\",\n\t\t\"sap/ui/model/json/JSONModel\",\n\t\t\"sap/ui/model/Filter\",\n\t\t\"sap/ui/model/FilterOperator\",\n\t\t\"sap/m/GroupHeaderListItem\",\n\t\t\"sap/ui/Device\",\n\t\t\"diploma/admin/route/view/model/formatter\"\n\t], function (BaseController, JSONModel, Filter, FilterOperator, GroupHeaderListItem, Device, formatter) {\n\t\t\"use strict\";\n\n\t\treturn BaseController.extend(\"diploma.admin.route.view.controller.Master\", {\n\n\t\t\tformatter: formatter,\n\n\t\t\t/* =========================================================== */\n\t\t\t/* lifecycle methods                                           */\n\t\t\t/* =========================================================== */\n\n\t\t\t/**\n\t\t\t * Called when the master list controller is instantiated. It sets up the event handling for the master/detail communication and other lifecycle tasks.\n\t\t\t * @public\n\t\t\t */\n\t\t\tonInit : function () {\n\t\t\t\t// Control state model\n\t\t\t\tvar oList = this.byId(\"list\"),\n\t\t\t\t\toViewModel = this._createViewModel(),\n\t\t\t\t\t// Put down master list's original value for busy indicator delay,\n\t\t\t\t\t// so it can be restored later on. Busy handling on the master list is\n\t\t\t\t\t// taken care of by the master list itself.\n\t\t\t\t\tiOriginalBusyDelay = oList.getBusyIndicatorDelay();\n\n\n\t\t\t\tthis._oList = oList;\n\t\t\t\t// keeps the filter and search state\n\t\t\t\tthis._oListFilterState = {\n\t\t\t\t\taFilter : [],\n\t\t\t\t\taSearch : []\n\t\t\t\t};\n\n\t\t\t\tthis.setModel(oViewModel, \"masterView\");\n\t\t\t\t// Make sure, busy indication is showing immediately so there is no\n\t\t\t\t// break after the busy indication for loading the view's meta data is\n\t\t\t\t// ended (see promise 'oWhenMetadataIsLoaded' in AppController)\n\t\t\t\toList.attachEventOnce(\"updateFinished\", function(){\n\t\t\t\t\t// Restore original busy indicator delay for the list\n\t\t\t\t\toViewModel.setProperty(\"/delay\", iOriginalBusyDelay);\n\t\t\t\t});\n\n\t\t\t\tthis.getView().addEventDelegate({\n\t\t\t\t\tonBeforeFirstShow: function () {\n\t\t\t\t\t\tthis.getOwnerComponent().oListSelector.setBoundMasterList(oList);\n\t\t\t\t\t}.bind(this)\n\t\t\t\t});\n\n\t\t\t\tthis.getRouter().getRoute(\"master\").attachPatternMatched(this._onMasterMatched, this);\n\t\t\t\tthis.getRouter().attachBypassed(this.onBypassed, this);\n\t\t\t},\n\n\t\t\t/* =========================================================== */\n\t\t\t/* event handlers                                              */\n\t\t\t/* =========================================================== */\n\n\t\t\t/**\n\t\t\t * After list data is available, this handler method updates the\n\t\t\t * master list counter and hides the pull to refresh control, if\n\t\t\t * necessary.\n\t\t\t * @param {sap.ui.base.Event} oEvent the update finished event\n\t\t\t * @public\n\t\t\t */\n\t\t\tonUpdateFinished : function (oEvent) {\n\t\t\t\t// update the master list object counter after new data is loaded\n\t\t\t\tthis._updateListItemCount(oEvent.getParameter(\"total\"));\n\t\t\t\t// hide pull to refresh if necessary\n\t\t\t\tthis.byId(\"pullToRefresh\").hide();\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Event handler for the master search field. Applies current\n\t\t\t * filter value and triggers a new search. If the search field's\n\t\t\t * 'refresh' button has been pressed, no new search is triggered\n\t\t\t * and the list binding is refresh instead.\n\t\t\t * @param {sap.ui.base.Event} oEvent the search event\n\t\t\t * @public\n\t\t\t */\n\t\t\tonSearch : function (oEvent) {\n\t\t\t\tif (oEvent.getParameters().refreshButtonPressed) {\n\t\t\t\t\t// Search field's 'refresh' button has been pressed.\n\t\t\t\t\t// This is visible if you select any master list item.\n\t\t\t\t\t// In this case no new search is triggered, we only\n\t\t\t\t\t// refresh the list binding.\n\t\t\t\t\tthis.onRefresh();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar sQuery = oEvent.getParameter(\"query\");\n\n\t\t\t\tif (sQuery) {\n\t\t\t\t\tthis._oListFilterState.aSearch = [new Filter(\"name\", FilterOperator.Contains, sQuery)];\n\t\t\t\t} else {\n\t\t\t\t\tthis._oListFilterState.aSearch = [];\n\t\t\t\t}\n\t\t\t\tthis._applyFilterSearch();\n\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Event handler for refresh event. Keeps filter, sort\n\t\t\t * and group settings and refreshes the list binding.\n\t\t\t * @public\n\t\t\t */\n\t\t\tonRefresh : function () {\n\t\t\t\tthis._oList.getBinding(\"items\").refresh();\n\t\t\t},\n\n\n\n\t\t\t/**\n\t\t\t * Event handler for the list selection event\n\t\t\t * @param {sap.ui.base.Event} oEvent the list selectionChange event\n\t\t\t * @public\n\t\t\t */\n\t\t\tonSelectionChange : function (oEvent) {\n\t\t\t\t// get the list item, either from the listItem parameter or from the event's source itself (will depend on the device-dependent mode).\n\t\t\t\tthis._showDetail(oEvent.getParameter(\"listItem\") || oEvent.getSource());\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Event handler for the bypassed event, which is fired when no routing pattern matched.\n\t\t\t * If there was an object selected in the master list, that selection is removed.\n\t\t\t * @public\n\t\t\t */\n\t\t\tonBypassed : function () {\n\t\t\t\tthis._oList.removeSelections(true);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Used to create GroupHeaders with non-capitalized caption.\n\t\t\t * These headers are inserted into the master list to\n\t\t\t * group the master list's items.\n\t\t\t * @param {Object} oGroup group whose text is to be displayed\n\t\t\t * @public\n\t\t\t * @returns {sap.m.GroupHeaderListItem} group header with non-capitalized caption.\n\t\t\t */\n\t\t\tcreateGroupHeader : function (oGroup) {\n\t\t\t\treturn new GroupHeaderListItem({\n\t\t\t\t\ttitle : oGroup.text,\n\t\t\t\t\tupperCase : false\n\t\t\t\t});\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Event handler for navigating back.\n\t\t\t * It there is a history entry or an previous app-to-app navigation we go one step back in the browser history\n\t\t\t * If not, it will navigate to the shell home\n\t\t\t * @public\n\t\t\t */\n\t\t\tonNavBack : function() {\n\t\t\t\tvar sPreviousHash = sap.ui.core.routing.History.getInstance().getPreviousHash(),\n\t\t\t\t\toCrossAppNavigator = sap.ushell.Container.getService(\"CrossApplicationNavigation\");\n\n\t\t\t\tif (sPreviousHash !== undefined || !oCrossAppNavigator.isInitialNavigation()) {\n\t\t\t\t\thistory.go(-1);\n\t\t\t\t} else {\n\t\t\t\t\toCrossAppNavigator.toExternal({\n\t\t\t\t\t\ttarget: {shellHash: \"#Shell-home\"}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/* =========================================================== */\n\t\t\t/* begin: internal methods                                     */\n\t\t\t/* =========================================================== */\n\n\n\t\t\t_createViewModel : function() {\n\t\t\t\treturn new JSONModel({\n\t\t\t\t\tisFilterBarVisible: false,\n\t\t\t\t\tfilterBarLabel: \"\",\n\t\t\t\t\tdelay: 0,\n\t\t\t\t\ttitle: this.getResourceBundle().getText(\"masterTitleCount\", [0]),\n\t\t\t\t\tnoDataText: this.getResourceBundle().getText(\"masterListNoDataText\"),\n\t\t\t\t\tsortBy: \"name\",\n\t\t\t\t\tgroupBy: \"None\"\n\t\t\t\t});\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * If the master route was hit (empty hash) we have to set\n\t\t\t * the hash to to the first item in the list as soon as the\n\t\t\t * listLoading is done and the first item in the list is known\n\t\t\t * @private\n\t\t\t */\n\t\t\t_onMasterMatched :  function() {\n\t\t\t\tthis.getOwnerComponent().oListSelector.oWhenListLoadingIsDone.then(\n\t\t\t\t\tfunction (mParams) {\n\t\t\t\t\t\tif (mParams.list.getMode() === \"None\") {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar sObjectId = mParams.firstListitem.getBindingContext().getProperty(\"id\");\n\t\t\t\t\t\tthis.getRouter().navTo(\"object\", {objectId : sObjectId}, true);\n\t\t\t\t\t}.bind(this),\n\t\t\t\t\tfunction (mParams) {\n\t\t\t\t\t\tif (mParams.error) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.getRouter().getTargets().display(\"detailNoObjectsAvailable\");\n\t\t\t\t\t}.bind(this)\n\t\t\t\t);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Shows the selected item on the detail page\n\t\t\t * On phones a additional history entry is created\n\t\t\t * @param {sap.m.ObjectListItem} oItem selected Item\n\t\t\t * @private\n\t\t\t */\n\t\t\t_showDetail : function (oItem) {\n\t\t\t\tvar bReplace = !Device.system.phone;\n\t\t\t\tthis.getRouter().navTo(\"object\", {\n\t\t\t\t\tobjectId : oItem.getBindingContext().getProperty(\"id\")\n\t\t\t\t}, bReplace);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Sets the item count on the master list header\n\t\t\t * @param {integer} iTotalItems the total number of items in the list\n\t\t\t * @private\n\t\t\t */\n\t\t\t_updateListItemCount : function (iTotalItems) {\n\t\t\t\tvar sTitle;\n\t\t\t\t// only update the counter if the length is final\n\t\t\t\tif (this._oList.getBinding(\"items\").isLengthFinal()) {\n\t\t\t\t\tsTitle = this.getResourceBundle().getText(\"masterTitleCount\", [iTotalItems]);\n\t\t\t\t\tthis.getModel(\"masterView\").setProperty(\"/title\", sTitle);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Internal helper method to apply both filter and search state together on the list binding\n\t\t\t * @private\n\t\t\t */\n\t\t\t_applyFilterSearch : function () {\n\t\t\t\tvar aFilters = this._oListFilterState.aSearch.concat(this._oListFilterState.aFilter),\n\t\t\t\t\toViewModel = this.getModel(\"masterView\");\n\t\t\t\tthis._oList.getBinding(\"items\").filter(aFilters, \"Application\");\n\t\t\t\t// changes the noDataText of the list in case there are no filter results\n\t\t\t\tif (aFilters.length !== 0) {\n\t\t\t\t\toViewModel.setProperty(\"/noDataText\", this.getResourceBundle().getText(\"masterListNoDataWithFilterOrSearchText\"));\n\t\t\t\t} else if (this._oListFilterState.aSearch.length > 0) {\n\t\t\t\t\t// only reset the no data text to default when no new search was triggered\n\t\t\t\t\toViewModel.setProperty(\"/noDataText\", this.getResourceBundle().getText(\"masterListNoDataText\"));\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Internal helper method to apply both group and sort state together on the list binding\n\t\t\t * @param {sap.ui.model.Sorter[]} aSorters an array of sorters\n\t\t\t * @private\n\t\t\t */\n\t\t\t_applyGroupSort : function (aSorters) {\n\t\t\t\tthis._oList.getBinding(\"items\").sort(aSorters);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Internal helper method that sets the filter bar visibility property and the label's caption to be shown\n\t\t\t * @param {string} sFilterBarText the selected filter value\n\t\t\t * @private\n\t\t\t */\n\t\t\t_updateFilterBar : function (sFilterBarText) {\n\t\t\t\tvar oViewModel = this.getModel(\"masterView\");\n\t\t\t\toViewModel.setProperty(\"/isFilterBarVisible\", (this._oListFilterState.aFilter.length > 0));\n\t\t\t\toViewModel.setProperty(\"/filterBarLabel\", this.getResourceBundle().getText(\"masterFilterBarText\", [sFilterBarText]));\n\t\t\t}\n\n\t\t});\n\n\t}\n);",
		"diploma/admin/route/view/model/formatter.js": "sap.ui.define([\n\t], function () {\n\t\t\"use strict\";\n\n\t\treturn {\n\t\t\t/**\n\t\t\t * Rounds the currency value to 2 digits\n\t\t\t *\n\t\t\t * @public\n\t\t\t * @param {string} sValue value to be formatted\n\t\t\t * @returns {string} formatted currency value with 2 digits\n\t\t\t */\n\t\t\tcurrencyValue : function (sValue) {\n\t\t\t\tif (!sValue) {\n\t\t\t\t\treturn \"\";\n\t\t\t\t}\n\n\t\t\t\treturn parseFloat(sValue).toFixed(2);\n\t\t\t},\n\t\t\t\n\t\t\t/**\n\t\t\t * Formats the details title.\n\t\t\t * @param\t{string}\tsWithRoute\t\tTranslatable text with placeholder for route name.\n\t\t\t * @param\t{string}\tsWithotuRoute\tTranslatable text with no placeholder.\n\t\t\t * @param\t{string}\tsRouteName\t\tRoute name.\n\t\t\t * @returns {string}\tThe detail view title.\n\t\t\t */\n\t\t\tdetailTitle: function(sWithRoute, sWithoutRoute, sRouteName){\n\t\t\t\tif (sRouteName) {\n\t\t\t\t\treturn jQuery.sap.formatMessage(sWithRoute, [sRouteName]);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn sWithoutRoute;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t}\n);",
		"diploma/admin/route/view/model/models.js": "sap.ui.define([\n\t\t\"sap/ui/model/json/JSONModel\",\n\t\t\"sap/ui/Device\"\n\t], function (JSONModel, Device) {\n\t\t\"use strict\";\n\n\t\treturn {\n\t\t\tcreateDeviceModel : function () {\n\t\t\t\tvar oModel = new JSONModel(Device);\n\t\t\t\toModel.setDefaultBindingMode(\"OneWay\");\n\t\t\t\treturn oModel;\n\t\t\t},\n\n\t\t\tcreateFLPModel : function () {\n\t\t\t\tvar fnGetuser = jQuery.sap.getObject(\"sap.ushell.Container.getUser\"),\n\t\t\t\t\tbIsShareInJamActive = fnGetuser ? fnGetuser().isJamActive() : false,\n\t\t\t\t\toModel = new JSONModel({\n\t\t\t\t\t\tisShareInJamActive: bIsShareInJamActive\n\t\t\t\t\t});\n\t\t\t\toModel.setDefaultBindingMode(\"OneWay\");\n\t\t\t\treturn oModel;\n\t\t\t}\n\t\t};\n\n\t}\n);",
		"diploma/admin/route/view/controller/Detail.controller.js": "/*global location, google */\nsap.ui.define([\n\t\t\"diploma/admin/route/view/controller/BaseController\",\n\t\t\"sap/ui/model/json/JSONModel\",\n\t\t\"sap/m/MessageBox\",\n\t\t\"diploma/admin/route/view/model/formatter\"\n\t], function (BaseController, JSONModel, MessageBox, formatter) {\n\t\t\"use strict\";\n\n\t\treturn BaseController.extend(\"diploma.admin.route.view.controller.Detail\", {\n            \n            /**\n             * Holds the loaded path string.\n             * Once the string is shown on the map, this attribute null'ed to free up memory.\n             * @private\n             */\n            _path: null,\n            \n            \n            /**\n             * Holds the waypoint coordinates.\n             * Once the markers are shown on the map, this attribute null'ed to free up memory.\n             * @private\n             */\n            _waypoints: null,\n            \n            /**\n             * Holds the marker references.\n             * @private\n             */\n            _markers: [],\n            \n            /**\n             * Holds the bounds of the map.\n             * @private\n             */\n            _bounds: null,\n    \n\t\t\tformatter: formatter,\n\n\t\t\t/* =========================================================== */\n\t\t\t/* lifecycle methods                                           */\n\t\t\t/* =========================================================== */\n            \n            /** Lifecycle hook. Builds the view model, attaches promise and event callbacks and adds style classes. */\n\t\t\tonInit : function () {\n\t\t\t\t// Model used to manipulate control states. The chosen values make sure,\n\t\t\t\t// detail page is busy indication immediately so there is no break in\n\t\t\t\t// between the busy indication for loading the view's meta data\n\t\t\t\tvar oViewModel = new JSONModel({\n\t\t\t\t\tbusy : false,\n\t\t\t\t\tdelay : 0,\n\t\t\t\t\tlineItemListTitle : this.getResourceBundle().getText(\"detailLineItemTableHeading\")\n\t\t\t\t});\n\n\t\t\t\tthis.getRouter().getRoute(\"object\").attachPatternMatched(this._onObjectMatched, this);\n\n\t\t\t\tthis.setModel(oViewModel, \"detailView\");\n\n\t\t\t\tthis.getOwnerComponent().getModel().metadataLoaded().then(this._onMetadataLoaded.bind(this));\n\t\t\t\tthis.getOwnerComponent().getMapPromise().then(this._refreshMap.bind(this));\n\t\t\t\tthis.byId(\"map\").attachAfterRendering(this._refreshMap, this);\n\t\t\t\t\n\t\t\t\t//this is a workaround to avoid OData errors caused by the edit schedule dialog relative binding\n\t\t\t\t//(because the dialog is embedded in the view, the OData model attempts to load the relatively\n\t\t\t\t//binded data, relative to the view --> we actually want to change the element binding just before show)\n\t\t\t\tthis.byId(\"dlgEditSchedule\").setModel(oViewModel);\n\t\t\t\t\n\t\t\t\tvar sStyleClass = this.getOwnerComponent().getContentDensityClass();\n    \t\t\tthis.byId(\"page\").getDependents().forEach(function(oItem){\n    \t\t\t    oItem.addStyleClass(sStyleClass);\n    \t\t\t});\n\t\t\t},\n\n\t\t\t/* =========================================================== */\n\t\t\t/* event handlers                                              */\n\t\t\t/* =========================================================== */\n\t\t\n\t\t\t/**\n\t\t\t * Updates the item count within the line item table's header\n\t\t\t * @param {object} oEvent an event containing the total number of items in the list\n\t\t\t * @private\n\t\t\t */\n\t\t\tonListUpdateFinished : function (oEvent) {\n\t\t\t\tvar sTitle,\n\t\t\t\t\tiTotalItems = oEvent.getParameter(\"total\"),\n\t\t\t\t\toViewModel = this.getModel(\"detailView\");\n\n\t\t\t\t// only update the counter if the length is final\n\t\t\t\tif (this.byId(\"lstLegs\").getBinding(\"items\").isLengthFinal()) {\n\t\t\t\t\tif (iTotalItems) {\n\t\t\t\t\t\tsTitle = this.getResourceBundle().getText(\"detailLineItemTableHeadingCount\", [iTotalItems]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//Display 'Line Items' instead of 'Line items (0)'\n\t\t\t\t\t\tsTitle = this.getResourceBundle().getText(\"detailLineItemTableHeading\");\n\t\t\t\t\t}\n\t\t\t\t\toViewModel.setProperty(\"/lineItemListTitle\", sTitle);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Event handler  for navigating back.\n\t\t\t * It there is a history entry or an previous app-to-app navigation we go one step back in the browser history\n\t\t\t * If not, it will replace the current entry of the browser history with the master route.\n\t\t\t * @public\n\t\t\t */\n\t\t\tonNavBack : function() {\n\t\t\t\tvar sPreviousHash = sap.ui.core.routing.History.getInstance().getPreviousHash(),\n\t\t\t\t\toCrossAppNavigator = sap.ushell.Container.getService(\"CrossApplicationNavigation\");\n\n\t\t\t\tif (sPreviousHash !== undefined || !oCrossAppNavigator.isInitialNavigation()) {\n\t\t\t\t\thistory.go(-1);\n\t\t\t\t} else {\n\t\t\t\t\tthis.getRouter().navTo(\"master\", {}, true);\n\t\t\t\t}\n\t\t\t},\n\t\t\t\n\t\t\t/**\n\t\t\t * Called when the \"plus\" button of the schedule list is pressed.\n\t\t\t * Opens the \"create schedule\" dialog.\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tonAddSchedule: function() {\n\t\t\t    this.byId(\"dlgCreateSchedule\").setVisible(true).open();\n\t\t\t},\n\t\t\t\n\t\t\t/**\n\t\t\t * Called when the cancel button is pressed (on the create schedule dialog).\n\t\t\t * Closes the dialog.\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tonCreateScheduleCancel: function() {\n\t\t\t    this.byId(\"dlgCreateSchedule\").setVisible(false).close();\n\t\t\t},\n\t\t\t\n\t\t\t/**\n\t\t\t * Called when the confirm button is pressed (on the create schedule dialog).\n\t\t\t * Collects data and sends it to the backend. If the ajax call is successful,\n\t\t\t * the dialog is closed. If not, an error message is shown.\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tonCreateScheduleConfirm: function() {\n\t\t\t    var oDialog = this.byId(\"dlgCreateSchedule\"),\n\t\t\t        oi18n = this.getResourceBundle(), \n\t\t\t        oScheduleList = this.byId(\"lstSchedules\"),\n\t\t\t        aFormElements = this.byId(\"frcCreateScheduleLegDurations\").getFormElements(),\n\t\t\t        i,\n\t\t\t        oData = {\n\t\t\t            route:      this.getView().getBindingContext().getProperty(\"id\"),\n\t\t\t            name:       this.byId(\"inpCreateScheduleName\").getValue(),\n\t\t\t            comment:    this.byId(\"inpCreateScheduleComment\").getValue(),\n\t\t\t            legs:       []\n\t\t\t        };\n\t\t\t    for (i = 0; i < aFormElements.length; ++i) {\n\t\t\t        oData.legs.push({\n\t\t\t            sequence:   aFormElements[i].getBindingContext().getProperty(\"sequence\"),\n\t\t\t            duration:   parseInt(aFormElements[i].getFields()[0].getItems()[0].getValue(), 10)\n\t\t\t        });\n\t\t\t    }\n\t\t\t    $.ajax({\n\t\t\t        method:     \"POST\",\n\t\t\t        url:        \"/destinations/INET_HTTP_DIPLOMA_J0I/services/primary.xsjs?entity=Schedule\",\n\t\t\t        data:       JSON.stringify(oData),\n\t\t            headers:    { \"X-CSRF-Token\": this.getModel().getSecurityToken() },\n\t\t\t        success:    function() {\n\t\t\t            oDialog.setVisible(false).close();\n\t\t\t            oScheduleList.getBinding(\"items\").refresh();\n\t\t\t        },\n\t\t\t        error:      function(oRequest) {\n\t\t\t            MessageBox.error(oi18n.getText(\"errorText\"), {details: oRequest.responseText});\n\t\t\t        }\n\t\t\t    });\n\t\t\t},\n\t\t\t\n\t\t\t/**\n\t\t\t * Called when the \"edit\" button of the schedule list is pressed.\n\t\t\t * Sents the appropriate binding and model for the \"edit schedule\" dialog and opens the dialog.\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tonEditSchedule: function() {\n\t\t\t    var oItem = this.byId(\"lstSchedules\").getSelectedItem();\n\t\t\t    if (oItem) {\n    \t\t\t    this.getModel().resetChanges();\n\t\t\t\t    this.byId(\"dlgEditSchedule\").setModel(this.getModel());\n    \t\t\t    this.byId(\"dlgEditSchedule\").bindElement(oItem.getBindingContext().getPath());\n    \t\t\t    this.byId(\"dlgEditSchedule\").setVisible(true).open();\n\t\t\t    }\n\t\t\t},\n\t\t\t\n\t\t\t/**\n\t\t\t * Called when the cancel button is pressed (on the edit schedule dialog).\n\t\t\t * Closes the dialog.\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tonEditScheduleCancel: function() {\n\t\t\t    this.byId(\"dlgEditSchedule\").setVisible(false).close();\n\t\t\t    this.getModel().resetChanges();\n\t\t\t    this.byId(\"dlgEditSchedule\").setModel(this.getModel(\"detailView\"));\n\t\t\t},\n\t\t\t\n\t\t\t/**\n\t\t\t * Called when the confirm button is pressed (on the create schedule dialog).\n\t\t\t * Instructs the OData model to commit changes.\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tonEditScheduleConfirm: function() {\n\t\t\t    var oDialog = this.byId(\"dlgEditSchedule\");\n\t\t\t    if (this.getModel().hasPendingChanges()) {\n\t\t\t        this.getModel().submitChanges({\n\t\t\t            success: function() {\n\t\t\t                oDialog.setVisible(false).close();\n\t\t\t            }\n\t\t\t        });\n\t\t\t    }\n\t\t\t    else {\n\t\t\t        oDialog.setVisible(false).close();\n\t\t\t    }\n\t\t\t},\n\t\t\t\n\t\t\t/**\n\t\t\t * Called when the \"delete\" button of the schedule list is pressed.\n\t\t\t * Shows a confirmation message box and deletes the seleted schedule if the user confirms.\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tonDeleteSchedule: function() {\n\t\t\t    var oItem = this.byId(\"lstSchedules\").getSelectedItem(),\n\t\t\t        oi18n = this.getResourceBundle(),\n\t\t\t        oModel = this.getModel();\n\t\t\t    if (oItem) {\n\t\t\t        MessageBox.confirm(oi18n.getText(\"confirmDeleteSchedule\", [oItem.getBindingContext().getProperty(\"name\")]), {\n\t\t\t            onClose: function(sAction) {\n\t\t\t                if (sAction === MessageBox.Action.OK) {\n\t\t\t                    oModel.remove(oItem.getBindingContext().getPath());\n\t\t\t                }\n\t\t\t            }\n\t\t\t        });\n\t\t\t    }\n\t\t\t},\n\t\t\t\n\t\t\t/**\n\t\t\t * Called when the delete button from the detail page - footer - is pressed.\n\t\t\t * Shows a confirmation message and deletes the currently displayed route on user confirmation.\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tonRouteDelete: function() {\n\t\t\t    var oView = this.getView(),\n\t\t\t        oi18n = this.getResourceBundle(),\n\t\t\t        oModel = this.getModel(),\n\t\t\t        fnOnSuccess = this.getRouter().getTargets().display.bind(this.getRouter().getTargets(), \"detailObjectNotFound\");\n\t\t\t    MessageBox.confirm(oi18n.getText(\"confirmDeleteRoute\", [oView.getBindingContext().getProperty(\"name\")]), {\n\t\t            onClose: function(sAction) {\n\t\t                if (sAction === MessageBox.Action.OK) {\n\t\t                    oModel.remove(oView.getBindingContext().getPath(), {success: fnOnSuccess});\n\t\t                }\n\t\t            }\n\t\t        });\n\t\t\t},\n\n\t\t\t/* =========================================================== */\n\t\t\t/* begin: internal methods                                     */\n\t\t\t/* =========================================================== */\n\n\t\t\t/**\n\t\t\t * Binds the view to the object path and expands the aggregated line items.\n\t\t\t * @function\n\t\t\t * @param {sap.ui.base.Event} oEvent pattern match event in route 'object'\n\t\t\t * @private\n\t\t\t */\n\t\t\t_onObjectMatched : function (oEvent) {\n\t\t\t\tvar sObjectId =  oEvent.getParameter(\"arguments\").objectId;\n\t\t\t\tthis.getModel().metadataLoaded().then( function() {\n\t\t\t\t\tvar sObjectPath = this.getModel().createKey(\"Routes\", {\n\t\t\t\t\t\tid :  sObjectId\n\t\t\t\t\t});\n\t\t\t\t\tthis._bindView(\"/\" + sObjectPath);\n\t\t\t\t}.bind(this));\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Binds the view to the object path. Makes sure that detail view displays\n\t\t\t * a busy indicator while data for the corresponding element binding is loaded.\n\t\t\t * @function\n\t\t\t * @param {string} sObjectPath path to the object to be bound to the view.\n\t\t\t * @private\n\t\t\t */\n\t\t\t_bindView : function (sObjectPath) {\n\t\t\t\t// Set busy indicator during view binding\n\t\t\t\tvar oViewModel = this.getModel(\"detailView\");\n\n\t\t\t\t// If the view was not bound yet its not busy, only if the binding requests data it is set to busy again\n\t\t\t\toViewModel.setProperty(\"/busy\", false);\n\n\t\t\t\tthis.getView().bindElement({\n\t\t\t\t\tpath : sObjectPath,\n\t\t\t\t\tparameters: {\n\t\t\t\t\t    expand:     \"ToLocation,FromLocation\"\n\t\t\t\t\t},\n\t\t\t\t\tevents: {\n\t\t\t\t\t\tchange : this._onBindingChange.bind(this),\n\t\t\t\t\t\tdataRequested : function () {\n\t\t\t\t\t\t\toViewModel.setProperty(\"/busy\", true);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdataReceived: function () {\n\t\t\t\t\t\t\toViewModel.setProperty(\"/busy\", false);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n            \n            /**\n             * Called when the view element binding has changed.\n             * Updates the master list accordingly and loads the route's path.\n             * @private\n             * @returns {void}\n             */\n\t\t\t_onBindingChange : function () {\n\t\t\t\tvar oView = this.getView(),\n\t\t\t\t\toElementBinding = oView.getElementBinding();\n\n\t\t\t\t// No data for the binding\n\t\t\t\tif (!oElementBinding.getBoundContext()) {\n\t\t\t\t\tthis.getRouter().getTargets().display(\"detailObjectNotFound\");\n\t\t\t\t\t// if object could not be found, the selection in the master list\n\t\t\t\t\t// does not make sense anymore.\n\t\t\t\t\tthis.getOwnerComponent().oListSelector.clearMasterListSelection();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar sPath = oElementBinding.getPath();\n\t\t\t\tthis.getOwnerComponent().oListSelector.selectAListItem(sPath);\n\t\t\t\t\n\t\t\t    this._loadRoute();\n\t\t\t},\n            \n            /**\n             * Called when the metadata of the OData service was loaded.\n             * Updates the view model to show that the view is busy until data is received.\n             * @private\n             * @returns {void}\n             */\n\t\t\t_onMetadataLoaded : function () {\n\t\t\t\t// Store original busy indicator delay for the detail view\n\t\t\t\tvar iOriginalViewBusyDelay = this.getView().getBusyIndicatorDelay(),\n\t\t\t\t\toViewModel = this.getModel(\"detailView\"),\n\t\t\t\t\toLineItemTable = this.byId(\"lstLegs\"),\n\t\t\t\t\tiOriginalLineItemTableBusyDelay = oLineItemTable.getBusyIndicatorDelay();\n\n\t\t\t\t// Make sure busy indicator is displayed immediately when\n\t\t\t\t// detail view is displayed for the first time\n\t\t\t\toViewModel.setProperty(\"/delay\", 0);\n\t\t\t\toViewModel.setProperty(\"/lineItemTableDelay\", 0);\n\n\t\t\t\toLineItemTable.attachEventOnce(\"updateFinished\", function() {\n\t\t\t\t\t// Restore original busy indicator delay for line item table\n\t\t\t\t\toViewModel.setProperty(\"/lineItemTableDelay\", iOriginalLineItemTableBusyDelay);\n\t\t\t\t});\n\n\t\t\t\t// Binding the view will set it to not busy - so the view is always busy if it is not bound\n\t\t\t\toViewModel.setProperty(\"/busy\", true);\n\t\t\t\t// Restore original busy indicator delay for the detail view\n\t\t\t\toViewModel.setProperty(\"/delay\", iOriginalViewBusyDelay);\n\t\t\t},\n\t\t\t\n\t\t\t/**\n\t\t\t * Checks if the map was already initialized; if not, the this method initializes it.\n\t\t\t * Checks the {@link _path} and {@link _waypoints} attributes for not-null values and adds\n\t\t\t * them to the map if any data is available (i.e. if any of these two attributes are not null).\n\t\t\t * @private\n\t\t\t * @returns {void}\n\t\t\t */\n    \t\t_refreshMap: function() {\n    \t\t    if (this.byId(\"map\").getDomRef() && typeof google !== \"undefined\" && !this._map) {\n    \t\t        this.byId(\"map\").getDomRef().parentElement.style.height = \"100%\";\n    \t\t        this._map = new google.maps.Map(this.byId(\"map\").getDomRef(), {\n        \t\t\t\tmapTypeId:\tgoogle.maps.MapTypeId.ROADMAP,\n        \t\t\t\tcenter: \tnew google.maps.LatLng(45.33,28.20),\n        \t\t\t\tzoom:\t\t6\n    \t\t\t\t});\n    \t\t\t\tthis._map.data.setStyle({\n    \t\t\t\t\tstrokeWeight: 4,\n    \t\t\t\t\tstrokeColor: \"blue\"\n    \t\t\t\t});\n    \t\t    }\n    \t\t    \n    \t\t    if (this._path && this._map) {\n        \t\t\tthis._map.data.forEach(function(oFeature) {\n        \t\t        this._map.data.remove(oFeature);\n        \t\t    }.bind(this));\n    \t\t        this._map.data.addGeoJson({\n    \t\t\t\t\ttype: \"Feature\",\n    \t\t\t\t\tgeometry: this._path\n    \t\t\t\t});\n    \t\t\t\tthis._path = null;\n    \t\t    }\n    \t\t    \n    \t\t    this._showMarkers();\n    \t\t},\n    \t\t\n    \t\t/**\n    \t\t * Displays the markers for the waypoints.\n    \t\t * @private\n    \t\t * @returns {void}\n    \t\t */\n    \t\t_showMarkers: function() {\n\t\t        var i,\n\t\t            sIcon,\n\t\t            oBounds;\n    \t\t    if (this._waypoints && this._map) {\n    \t\t        oBounds = new google.maps.LatLngBounds();\n    \t\t        \n    \t\t        //remove the old markers\n    \t\t        for (i = 0; i < this._markers.length; ++i) {\n    \t\t            this._markers[i].setMap(null);\n    \t\t        }\n    \t\t        this._markers = [];\n    \t\t        \n    \t\t        for (i = 0; i < this._waypoints.length; ++i) {\n    \t\t            if (i === 0) {\n    \t\t                sIcon = \"/green-dot.png\";\n    \t\t            }\n    \t\t            else if (i === this._waypoints.length - 1) {\n    \t\t                sIcon = \"/red-dot.png\";\n    \t\t            }\n    \t\t            else {\n    \t\t                sIcon = \"/via.png\";\n    \t\t            }\n    \t\t            this._markers.push(new google.maps.Marker({\n        \t\t\t\t\ticon:   $.sap.getModulePath(\"diploma.admin.route.view.images\", sIcon),\n        \t\t\t\t\tmap:    this._map,\n        \t\t\t\t\ttitle:  this._waypoints[i].name,\n        \t\t\t\t\tposition: {\n        \t\t\t\t        lat: this._waypoints[i].position[1],\n        \t\t\t\t        lng: this._waypoints[i].position[0]\n        \t\t\t\t    }\n        \t\t\t\t}));\n    \t\t\t\t    oBounds.extend(this._markers[i].getPosition());\n    \t\t        }\n    \t\t    \tthis._waypoints = null;\n    \t\t    \tthis._bounds = oBounds;\n    \t\t    }\n    \t\t    \n    \t\t    if (this._bounds !== null) {\n    \t\t    \tthis._map.fitBounds(this._bounds);\n    \t\t    }\n    \t\t},\n\t\t\n    \t\t/**\n    \t\t * Loads the path of the current route and the start / end markers.\n    \t\t * Saves the results in the correspinding private fields.\n    \t\t * @private\n    \t\t * @returns {void}\n    \t\t */\n    \t\t_loadRoute: function() {\n    \t\t\tvar sId = this.getView().getBindingContext().getProperty(\"id\"),\n    \t\t\t\tfnOnError = MessageBox.error.bind(MessageBox, this.getResourceBundle().getText(\"errorText\"));\n    \t\t\t$.ajax({\n    \t\t\t\tmethod: \"GET\",\n    \t\t\t\turl:\t\"/destinations/INET_HTTP_DIPLOMA_J0I/services/primary.xsjs\", \n    \t\t\t\tdata: {\n    \t\t\t\t\tentity:\t\"Route\",\n    \t\t\t\t\tid:\t\tsId\n    \t\t\t\t}, \n    \t\t\t\tdataType: \"json\",\n    \t\t\t\tsuccess: function(oData){\n    \t\t\t\t\tthis._path = oData;\n    \t\t\t\t    this._refreshMap();\n    \t\t\t\t}.bind(this),\n    \t\t\t\terror: fnOnError\n    \t\t\t});\n    \t\t\t$.ajax({\n    \t\t\t\tmethod:\t\"GET\",\n    \t\t\t\turl:\t\"/destinations/INET_HTTP_DIPLOMA_J0I/services/primary.xsjs\",\n    \t\t\t\tdata: {\n    \t\t\t\t\tentity:     \"Waypoint\",\n    \t\t\t\t\treference:  \"Route\",\n    \t\t\t\t\tid:         sId\n    \t\t\t\t},\n    \t\t\t\tdataType: \"json\",\n    \t\t\t\tsuccess: function(oData) {\n    \t\t\t\t    this._waypoints = oData;\n    \t\t\t\t    this._refreshMap();\n    \t\t\t\t}.bind(this),\n    \t\t\t\terror: fnOnError\n    \t\t\t});\n    \t\t}\n\n\t\t});\n\n\t}\n);",
		"diploma/admin/route/view/controller/ListSelector.js": "sap.ui.define([\n\t\t\"sap/ui/base/Object\"\n\t], function (BaseObject) {\n\t\t\"use strict\";\n\n\t\treturn BaseObject.extend(\"diploma.admin.route.view.model.ListSelector\", {\n\n\t\t\t/**\n\t\t\t * Provides a convenience API for selecting list items. All the functions will wait until the initial load of the a List passed to the instance by the setBoundMasterList\n\t\t\t * function.\n\t\t\t * @class\n\t\t\t * @public\n\t\t\t * @alias diploma.admin.route.view.model.ListSelector\n\t\t\t */\n\n\t\t\tconstructor : function () {\n\t\t\t\tthis._oWhenListHasBeenSet = new Promise(function (fnResolveListHasBeenSet) {\n\t\t\t\t\tthis._fnResolveListHasBeenSet = fnResolveListHasBeenSet;\n\t\t\t\t}.bind(this));\n\t\t\t\t// This promise needs to be created in the constructor, since it is allowed to\n\t\t\t\t// invoke selectItem functions before calling setBoundMasterList\n\t\t\t\tthis.oWhenListLoadingIsDone = new Promise(function (fnResolve, fnReject) {\n\t\t\t\t\t// Used to wait until the setBound masterList function is invoked\n\t\t\t\t\tthis._oWhenListHasBeenSet\n\t\t\t\t\t\t.then(function (oList) {\n\t\t\t\t\t\t\toList.getBinding(\"items\").attachEventOnce(\"dataReceived\",\n\t\t\t\t\t\t\t\tfunction (oData) {\n\t\t\t\t\t\t\t\t\tif (!oData.getParameter(\"data\")) {\n\t\t\t\t\t\t\t\t\t\tfnReject({\n\t\t\t\t\t\t\t\t\t\t\tlist : oList,\n\t\t\t\t\t\t\t\t\t\t\terror : true\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tvar oFirstListItem = oList.getItems()[0];\n\t\t\t\t\t\t\t\t\tif (oFirstListItem) {\n\t\t\t\t\t\t\t\t\t\t// Have to make sure that first list Item is selected\n\t\t\t\t\t\t\t\t\t\t// and a select event is triggered. Like that, the corresponding\n\t\t\t\t\t\t\t\t\t\t// detail page is loaded automatically\n\t\t\t\t\t\t\t\t\t\tfnResolve({\n\t\t\t\t\t\t\t\t\t\t\tlist : oList,\n\t\t\t\t\t\t\t\t\t\t\tfirstListitem : oFirstListItem\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t// No items in the list\n\t\t\t\t\t\t\t\t\t\tfnReject({\n\t\t\t\t\t\t\t\t\t\t\tlist : oList,\n\t\t\t\t\t\t\t\t\t\t\terror : false\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t});\n\t\t\t\t}.bind(this));\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * A bound list should be passed in here. Should be done, before the list has received its initial data from the server.\n\t\t\t * May only be invoked once per ListSelector instance.\n\t\t\t * @param {sap.m.List} oList The list all the select functions will be invoked on.\n\t\t\t * @public\n\t\t\t */\n\t\t\tsetBoundMasterList : function (oList) {\n\t\t\t\tthis._oList = oList;\n\t\t\t\tthis._fnResolveListHasBeenSet(oList);\n\t\t\t},\n\n\n\t\t\t/**\n\t\t\t * Tries to select and scroll to a list item with a matching binding context. If there are no items matching the binding context or the ListMode is none,\n\t\t\t * no selection/scrolling will happen\n\t\t\t * @param {string} sBindingPath the binding path matching the binding path of a list item\n\t\t\t * @public\n\t\t\t */\n\t\t\tselectAListItem : function (sBindingPath) {\n\n\t\t\t\tthis.oWhenListLoadingIsDone.then(\n\t\t\t\t\tfunction () {\n\t\t\t\t\t\tvar oList = this._oList,\n\t\t\t\t\t\t\toSelectedItem;\n\n\t\t\t\t\t\tif (oList.getMode() === \"None\") {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\toSelectedItem = oList.getSelectedItem();\n\n\t\t\t\t\t\t// skip update if the current selection is already matching the object path\n\t\t\t\t\t\tif (oSelectedItem && oSelectedItem.getBindingContext().getPath() === sBindingPath) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\toList.getItems().some(function (oItem) {\n\t\t\t\t\t\t\tif (oItem.getBindingContext() && oItem.getBindingContext().getPath() === sBindingPath) {\n\t\t\t\t\t\t\t\toList.setSelectedItem(oItem);\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}.bind(this),\n\t\t\t\t\tfunction () {\n\t\t\t\t\t\tjQuery.sap.log.warning(\"Could not select the list item with the path\" + sBindingPath + \" because the list encountered an error or had no items\");\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t},\n\n\n\t\t\t/* =========================================================== */\n\t\t\t/* Convenience Functions for List Selection Change Event       */\n\t\t\t/* =========================================================== */\n\n\t\t\t/**\n\t\t\t * Attaches a listener and listener function to the ListSelector's bound master list. By using\n\t\t\t * a promise, the listener is added, even if the list is not available when 'attachListSelectionChange'\n\t\t\t * is called.\n\t\t\t * @param {function} fnFunction the function to be executed when the list fires a selection change event\n\t\t\t * @param {function} oListener the listener object\n\t\t\t * @return {diploma.admin.route.view.model.ListSelector} the list selector object for method chaining\n\t\t\t * @public\n\t\t\t */\n\t\t\tattachListSelectionChange : function (fnFunction, oListener) {\n\t\t\t\tthis._oWhenListHasBeenSet.then(function () {\n\t\t\t\t\tthis._oList.attachSelectionChange(fnFunction, oListener);\n\t\t\t\t}.bind(this));\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Detaches a listener and listener function from the ListSelector's bound master list. By using\n\t\t\t * a promise, the listener is removed, even if the list is not available when 'detachListSelectionChange'\n\t\t\t * is called.\n\t\t\t * @param {function} fnFunction the function to be executed when the list fires a selection change event\n\t\t\t * @param {function} oListener the listener object\n\t\t\t * @return {diploma.admin.route.view.model.ListSelector} the list selector object for method chaining\n\t\t\t * @public\n\t\t\t */\n\t\t\tdetachListSelectionChange : function (fnFunction, oListener) {\n\t\t\t\tthis._oWhenListHasBeenSet.then(function () {\n\t\t\t\t\tthis._oList.detachSelectionChange(fnFunction, oListener);\n\t\t\t\t}.bind(this));\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Removes all selections from master list.\n\t\t\t * Does not trigger 'selectionChange' event on master list, though.\n\t\t\t * @public\n\t\t\t */\n\t\t\tclearMasterListSelection : function () {\n\t\t\t\t//use promise to make sure that 'this._oList' is available\n\t\t\t\tthis._oWhenListHasBeenSet.then(function () {\n\t\t\t\t\tthis._oList.removeSelections(true);\n\t\t\t\t}.bind(this));\n\t\t\t}\n\n\t\t});\n\n\t}\n);",
		"diploma/admin/route/view/localService/mockserver.js": "sap.ui.define([\n\t\t\"sap/ui/core/util/MockServer\"\n\t], function (MockServer) {\n\t\t\"use strict\";\n\n\t\tvar oMockServer,\n\t\t\t_sAppModulePath = \"diploma/admin/route/view/\",\n\t\t\t_sJsonFilesModulePath = _sAppModulePath + \"localService/mockdata\";\n\n\t\treturn {\n\t\t\t/**\n\t\t\t * Initializes the mock server.\n\t\t\t * You can configure the delay with the URL parameter \"serverDelay\".\n\t\t\t * The local mock data in this folder is returned instead of the real data for testing.\n\t\t\t * @public\n\t\t\t */\n\n\t\t\tinit : function () {\n\t\t\t\tvar oUriParameters = jQuery.sap.getUriParameters(),\n\t\t\t\t\tsJsonFilesUrl = jQuery.sap.getModulePath(_sJsonFilesModulePath),\n\t\t\t\t\tsManifestUrl = jQuery.sap.getModulePath(_sAppModulePath + \"manifest\", \".json\"),\n\t\t\t\t\tsEntity = \"Routes\",\n\t\t\t\t\tsErrorParam = oUriParameters.get(\"errorType\"),\n\t\t\t\t\tiErrorCode = sErrorParam === \"badRequest\" ? 400 : 500,\n\t\t\t\t\toManifest = jQuery.sap.syncGetJSON(sManifestUrl).data,\n\t\t\t\t\toMainDataSource = oManifest[\"sap.app\"].dataSources.mainService,\n\t\t\t\t\tsMetadataUrl = jQuery.sap.getModulePath(_sAppModulePath + oMainDataSource.settings.localUri.replace(\".xml\", \"\"), \".xml\"),\n\t\t\t\t\t// ensure there is a trailing slash\n\t\t\t\t\tsMockServerUrl = /.*\\/$/.test(oMainDataSource.uri) ? oMainDataSource.uri : oMainDataSource.uri + \"/\";\n\n\t\t\t\toMockServer = new MockServer({\n\t\t\t\t\trootUri : sMockServerUrl\n\t\t\t\t});\n\n\t\t\t\t// configure mock server with a delay of 1s\n\t\t\t\tMockServer.config({\n\t\t\t\t\tautoRespond : true,\n\t\t\t\t\tautoRespondAfter : (oUriParameters.get(\"serverDelay\") || 1000)\n\t\t\t\t});\n\n\t\t\t\toMockServer.simulate(sMetadataUrl, {\n\t\t\t\t\tsMockdataBaseUrl : sJsonFilesUrl,\n\t\t\t\t\tbGenerateMissingMockData : true\n\t\t\t\t});\n\n\t\t\t\tvar aRequests = oMockServer.getRequests(),\n\t\t\t\t\tfnResponse = function (iErrCode, sMessage, aRequest) {\n\t\t\t\t\t\taRequest.response = function(oXhr){\n\t\t\t\t\t\t\toXhr.respond(iErrCode, {\"Content-Type\": \"text/plain;charset=utf-8\"}, sMessage);\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\n\t\t\t\t// handling the metadata error test\n\t\t\t\tif (oUriParameters.get(\"metadataError\")) {\n\t\t\t\t\taRequests.forEach( function ( aEntry ) {\n\t\t\t\t\t\tif (aEntry.path.toString().indexOf(\"$metadata\") > -1) {\n\t\t\t\t\t\t\tfnResponse(500, \"metadata Error\", aEntry);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Handling request errors\n\t\t\t\tif (sErrorParam) {\n\t\t\t\t\taRequests.forEach( function ( aEntry ) {\n\t\t\t\t\t\tif (aEntry.path.toString().indexOf(sEntity) > -1) {\n\t\t\t\t\t\t\tfnResponse(iErrorCode, sErrorParam, aEntry);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\toMockServer.start();\n\n\t\t\t\tjQuery.sap.log.info(\"Running the app with mock data\");\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @public returns the mockserver of the app, should be used in integration tests\n\t\t\t * @returns {sap.ui.core.util.MockServer} the mockserver instance\n\t\t\t */\n\t\t\tgetMockServer : function () {\n\t\t\t\treturn oMockServer;\n\t\t\t}\n\t\t};\n\n\t}\n);",
		"diploma/admin/route/view/view/App.view.xml": "<mvc:View\n\t\tcontrollerName=\"diploma.admin.route.view.controller.App\"\n\t\txmlns:mvc=\"sap.ui.core.mvc\"\n\t\tdisplayBlock=\"true\"\n\t\tbusy=\"{appView>/busy}\"\n\t\tbusyIndicatorDelay=\"{appView>/delay}\"\n\t\txmlns=\"sap.m\">\n\t<SplitApp id=\"idAppControl\" />\n</mvc:View>",
		"diploma/admin/route/view/view/Detail.view.xml": "<mvc:View\n\t\tcontrollerName=\"diploma.admin.route.view.controller.Detail\"\n\t\txmlns=\"sap.m\"\n    \txmlns:l=\"sap.ui.layout\"\n    \txmlns:f=\"sap.ui.layout.form\"\n\t\txmlns:core=\"sap.ui.core\"\n\t\txmlns:mvc=\"sap.ui.core.mvc\"\n\t\txmlns:semantic=\"sap.m.semantic\"\n\t\txmlns:footerbar=\"sap.ushell.ui.footerbar\">\n\n\t<semantic:DetailPage\n\t\t\tid=\"page\"\n\t\t\tnavButtonPress=\"onNavBack\"\n\t\t\tshowNavButton=\"{device>/system/phone}\"\n\t\t\ttitle=\"{\n\t\t\t\tparts: [{path: 'i18n>detailTitle'}, {path: 'i18n>detailTitleNoRoute'}, {path: 'name'}], \n\t\t\t\tformatter: '.formatter.detailTitle'\n\t\t\t}\"\n\t\t\tbusy=\"{detailView>/busy}\"\n\t\t\tbusyIndicatorDelay=\"{detailView>/delay}\">\n\n\t\t<semantic:content>\n\t\t\t<IconTabBar id=\"itbMain\"\n\t\t\t\tstretchContentHeight=\"true\"\n\t\t\t\tclass=\"sapUiResponsiveContentPadding\">\n\t\t\t\t<items>\n\t\t\t\t    \n\t\t\t\t\t<IconTabFilter id=\"itfDetails\"\n\t\t\t\t\t\ticon=\"sap-icon://hint\"\n\t\t\t\t\t\ttooltip=\"{i18n>detailTabTooltip}\">\n\t\t\t\t\t\t<ScrollContainer vertical=\"true\" horizontal=\"false\" height=\"100%\" width=\"100%\">\n    \t\t\t\t\t    <f:SimpleForm id=\"sfmDetails\"\n                    \t\t\tmaxContainerCols=\"2\"\n                    \t\t\teditable=\"true\"\n                    \t\t\tlayout=\"ResponsiveGridLayout\"\n                    \t\t\ttitle=\"{i18n>detailFormTitle}\"\n                    \t\t\tlabelSpanL=\"3\"\n                    \t\t\tlabelSpanM=\"3\"\n                    \t\t\temptySpanL=\"4\"\n                    \t\t\temptySpanM=\"4\"\n                    \t\t\tcolumnsL=\"1\"\n                    \t\t\tcolumnsM=\"1\"\n                    \t\t\tclass=\"editableForm\">\n    \t\t\t\t\t        <Label id=\"lblName\" text=\"{i18n>routeNameLabel}\"/>\n    \t\t\t\t\t        <Input editable=\"false\" value=\"{name}\"/>\n    \t\t\t\t\t        <Label id=\"lblLocationFrom\" text=\"{i18n>routeLocationFromLabel}\"/>\n    \t\t\t\t\t        <Input editable=\"false\" value=\"{FromLocation/name}\"/>\n    \t\t\t\t\t        <Label id=\"lblLocationTo\" text=\"{i18n>routeLocationToLabel}\"/>\n    \t\t\t\t\t        <Input editable=\"false\" value=\"{ToLocation/name}\"/>\n    \t\t\t\t\t   </f:SimpleForm>\n    \t\t\t        </ScrollContainer>\n\t\t\t\t\t</IconTabFilter>\n\t\t\t\t\t\n\t\t\t\t\t<IconTabFilter id=\"itfLegs\"\n\t\t\t\t\t\ticon=\"sap-icon://explorer\"\n\t\t\t\t\t\ttooltip=\"{i18n>legListTabTooltip}\">\n\t\t\t\t\t\t<ScrollContainer vertical=\"true\" horizontal=\"false\" height=\"100%\" width=\"100%\">\n    \t\t\t\t\t    <Table id=\"lstLegs\"\n    \t\t\t\t\t        width=\"auto\"\n    \t\t\t\t            items=\"{\n    \t\t\t\t                path: 'Legs', \n    \t\t\t\t                parameters: {expand: 'ToLocation,FromLocation'}, \n    \t\t\t\t                sorter: {path: 'sequence'}\n    \t\t\t\t            }\"\n    \t\t\t\t            updateFinished=\"onListUpdateFinished\"\n    \t\t\t\t            noDataText=\"{i18n>legListNoData}\"\n    \t\t\t\t            busyIndicatorDelay=\"{detailView>/lineItemTableDelay}\">\n                \t\t\t\t<headerToolbar>\n                \t\t\t\t\t<Toolbar id=\"tlbLegListHeader\">\n                \t\t\t\t\t\t<Title id=\"titLebListTitle\" text=\"{detailView>/lineItemListTitle}\"/>\n                \t\t\t\t\t</Toolbar>\n                \t\t\t\t</headerToolbar>\n                \t\t\t\t<columns>\n                \t\t\t\t\t<Column id=\"colDetailListFrom\"> <Text text=\"{i18n>legListColumnHeaderFrom}\"/> </Column>\n                \t\t\t\t\t<Column id=\"colDetailListTo\"> <Text text=\"{i18n>legListColumnHeaderTo}\"/> </Column>\n                \t\t\t\t</columns>\n                \t\t\t\t<items>\n                \t\t\t\t\t<ColumnListItem>\n                \t\t\t\t\t\t<cells>\n                \t\t\t\t\t\t\t<Text text=\"{FromLocation/name}\"/>\n                \t\t\t\t\t\t\t<Text text=\"{ToLocation/name}\"/>\n                \t\t\t\t\t\t</cells>\n                \t\t\t\t\t</ColumnListItem>\n                \t\t\t\t</items>\n    \t\t\t            </Table>\n    \t\t\t        </ScrollContainer>\n\t\t\t\t\t</IconTabFilter>\n\t\t\t\t\t\n\t\t\t\t\t<IconTabFilter id=\"itfMap\"\n\t\t\t\t\t\ticon=\"sap-icon://map-2\"\n\t\t\t\t\t\ttooltip=\"{i18n>mapTabTooltip}\">\n\t\t\t\t\t\t<core:HTML content=\"&lt;div style=&quot;height:100%&quot; /&gt;\" preferDOM=\"true\" id=\"map\"/>\n\t\t\t\t\t</IconTabFilter>\n\t\t\t\t\t \n\t\t\t\t\t<IconTabFilter id=\"itfSchedules\"\n\t\t\t\t\t    icon=\"sap-icon://time-entry-request\"\n\t\t\t\t\t    tooltip=\"{i18n>schedulesTabTooltip}\">\n\t\t\t\t\t\t<ScrollContainer vertical=\"true\" horizontal=\"false\" height=\"100%\" width=\"100%\">\n                            <List id=\"lstSchedules\"\n                                mode=\"SingleSelectLeft\"\n                                backgroundDesign=\"Transparent\"\n                                items=\"{Schedules}\">\n                                <headerToolbar>\n                                    <Toolbar>\n                                        <Title text=\"{i18n>schedulesListHeaderTitle}\"/>\n                                        <ToolbarSpacer />\n                                        <Button icon=\"sap-icon://add\" tooltip=\"{i18n>addButtonTooltip}\" press=\"onAddSchedule\"/>\n                                        <Button icon=\"sap-icon://edit\" tooltip=\"{i18n>editButtonTooltip}\" press=\"onEditSchedule\"/>\n                                        <Button icon=\"sap-icon://delete\" tooltip=\"{i18n>deleteButtonTooltip}\" press=\"onDeleteSchedule\"/>\n                                    </Toolbar> \n                                </headerToolbar>\n                                <CustomListItem>\n                                    <Panel width=\"100%\" \n                                        headerText=\"{name}\" \n                                        class=\"sapUiNoMargin sapUiNoContentPadding\" \n                                        expanded=\"false\"\n                                        backgroundDesign=\"Transparent\"\n                                        expandAnimation=\"false\"\n                                        expandable=\"true\">\n                                        <Text text=\"{comment}\" class=\"sapUiSmallMarginBegin sapUiTinyMarginBottom\"/>\n                                        <Table \n                                            width=\"auto\"\n                                            backgroundDesign=\"Transparent\"\n                                            items=\"{\n                                                path: 'LegDurations',\n                                                parameters: {expand: 'Leg/ToLocation,Leg/FromLocation'},\n                                                sorter: {path: 'sequence'}\n                                            }\">\n                                            <columns>\n                                                <Column />\n                                                <Column hAlign=\"End\"/>\n                                            </columns>\n                                            <ColumnListItem >\n                                                <cells>\n                                                    <Text text=\"{Leg/FromLocation/name} - {Leg/ToLocation/name}\"/>\n                                                    <Text text=\"{duration} {i18n>legDurationUnitMinutes}\"/>\n                                                </cells>\n                                            </ColumnListItem>\n                                        </Table>\n                                    </Panel>\n                                </CustomListItem>\n                            </List>\n\t\t\t\t\t     </ScrollContainer>\n\t\t\t\t\t </IconTabFilter>\n\t\t\t\t</items>\n\t\t\t</IconTabBar>\n\t\t</semantic:content>\n\t\t<semantic:dependents>\n    \t    <core:Fragment fragmentName=\"diploma.admin.route.view.view.EditScheduleDialog\" type=\"XML\" />\n    \t    <core:Fragment fragmentName=\"diploma.admin.route.view.view.CreateScheduleDialog\" type=\"XML\" />\n\t\t</semantic:dependents>\n        <semantic:deleteAction>\n            <semantic:DeleteAction press=\"onRouteDelete\" />\n        </semantic:deleteAction>\n\t</semantic:DetailPage>\n\n</mvc:View>",
		"diploma/admin/route/view/view/DetailNoObjectsAvailable.view.xml": "<mvc:View\n\t\tcontrollerName=\"diploma.admin.route.view.controller.BaseController\"\n\t\txmlns:mvc=\"sap.ui.core.mvc\"\n\t\txmlns=\"sap.m\">\n\n\t<MessagePage\n\t\t\tid=\"page\"\n\t\t\ttitle=\"{i18n>notAvailableViewTitle}\"\n\t\t\ttext=\"{i18n>noObjectsAvailableText}\"\n\t\t\ticon=\"{sap-icon://product}\"\n\t\t\tdescription=\"\"\n\t\t\tshowNavButton=\"{device>/system/phone}\"\n\t\t\tnavButtonPress=\"onNavBack\">\n\t</MessagePage>\n\n</mvc:View>",
		"diploma/admin/route/view/view/Master.view.xml": "<mvc:View\n\t\tcontrollerName=\"diploma.admin.route.view.controller.Master\"\n\t\txmlns:mvc=\"sap.ui.core.mvc\"\n\t\txmlns:core=\"sap.ui.core\"\n\t\txmlns=\"sap.m\"\n\t\txmlns:semantic=\"sap.m.semantic\">\n\n\t<semantic:MasterPage\n\t\t\tid=\"page\"\n\t\t\ttitle=\"{masterView>/title}\"\n\t\t\tnavButtonPress=\"onNavBack\"\n\t\t\tshowNavButton=\"true\">\n\t\t<semantic:subHeader>\n\t\t\t<Bar id=\"headerBar\">\n\t\t\t\t<contentMiddle>\n\t\t\t\t\t<SearchField\n\t\t\t\t\t\t\tid=\"searchField\"\n\t\t\t\t\t\t\tshowRefreshButton=\"{= !${device>/support/touch} }\"\n\t\t\t\t\t\t\ttooltip=\"{i18n>masterSearchTooltip}\"\n\t\t\t\t\t\t\twidth=\"100%\"\n\t\t\t\t\t\t\tsearch=\"onSearch\">\n\t\t\t\t\t</SearchField>\n\t\t\t\t</contentMiddle>\n\t\t\t</Bar>\n\t\t</semantic:subHeader>\n\n\t\t<semantic:content>\n\t\t\t<PullToRefresh\n\t\t\t\t\tid=\"pullToRefresh\"\n\t\t\t\t\tvisible=\"{device>/support/touch}\"\n\t\t\t\t\trefresh=\"onRefresh\" />\n\t\t\t<!-- For client side filtering add this to the items attribute:  parameters: {operationMode: 'Client'}}\" -->\n\t\t\t<List\n\t\t\t\t\tid=\"list\"\n\t\t\t\t\titems=\"{\n\t\t\t\t\t\tpath: '/Routes',\n\t\t\t\t\t\tsorter: {\n\t\t\t\t\t\t\tpath: 'name',\n\t\t\t\t\t\t\tdescending: false\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\tgroupHeaderFactory: '.createGroupHeader'\n\t\t\t\t\t}\"\n\t\t\t\t\tbusyIndicatorDelay=\"{masterView>/delay}\"\n\t\t\t\t\tnoDataText=\"{masterView>/noDataText}\"\n\t\t\t\t\tmode=\"{= ${device>/system/phone} ? 'None' : 'SingleSelectMaster'}\"\n\t\t\t\t\tgrowing=\"true\"\n\t\t\t\t\tgrowingScrollToLoad=\"true\"\n\t\t\t\t\tupdateFinished=\"onUpdateFinished\"\n\t\t\t\t\tselectionChange=\"onSelectionChange\">\n\t\t\t\t<infoToolbar>\n\t\t\t\t\t<Toolbar id=\"filterBar\"\n\t\t\t\t\t\tactive=\"true\"\n\t\t\t\t\t\tvisible=\"{masterView>/isFilterBarVisible}\"\n\t\t\t\t\t\tpress=\"onOpenViewSettings\">\n\t\t\t\t\t\t<Title id=\"filterBarLabel\" text=\"{masterView>/filterBarLabel}\" />\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</infoToolbar>\n\t\t\t\t<items>\n\t\t\t\t\t<ObjectListItem\n\t\t\t\t\t\ttype=\"{= ${device>/system/phone} ? 'Active' : 'Inactive'}\"\n\t\t\t\t\t\tpress=\"onSelectionChange\"\n\t\t\t\t\t\ttitle=\"{name}\" />\n\t\t\t\t</items>\n\t\t\t</List>\n\t\t</semantic:content>\n\n\t</semantic:MasterPage>\n\n</mvc:View>",
		"diploma/admin/route/view/view/ViewSettingsDialog.fragment.xml": "<core:FragmentDefinition\n\t\txmlns=\"sap.m\"\n\t\txmlns:core=\"sap.ui.core\">\n\n\t<ViewSettingsDialog\n\t\t\tid=\"viewSettingsDialog\"\n\t\t\tconfirm=\"onConfirmViewSettingsDialog\"\n\t\t\tresetFilters=\"onViewSettingsDialogResetFilters\">\n\t\t<filterItems>\n\t\t\t<ViewSettingsFilterItem\n\t\t\t\t\tid=\"filterItems\"\n\t\t\t\t\ttext=\"{i18n>masterFilterName}\"\n\t\t\t\t\tkey=\"Price\"\n\t\t\t\t\tmultiSelect=\"false\">\n\t\t\t\t<items>\n\t\t\t\t\t<ViewSettingsItem\n\t\t\t\t\t\t\ttext=\"{i18n>masterFilter1}\"\n\t\t\t\t\t\t\tkey=\"Filter1\"\n\t\t\t\t\t\t\tid=\"viewFilter1\"/>\n\t\t\t\t\t<ViewSettingsItem\n\t\t\t\t\t\t\ttext=\"{i18n>masterFilter2}\"\n\t\t\t\t\t\t\tkey=\"Filter2\"\n\t\t\t\t\t\t\tid=\"viewFilter2\"/>\n\t\t\t\t</items>\n\t\t\t</ViewSettingsFilterItem>\n\t\t</filterItems>\n\t</ViewSettingsDialog>\n\n</core:FragmentDefinition>",
		"diploma/admin/route/view/view/CreateScheduleDialog.fragment.xml": "<core:FragmentDefinition \n    xmlns:core=\"sap.ui.core\" \n\txmlns:f=\"sap.ui.layout.form\"\n    xmlns:form=\"sap.ui.layout.form\"\n    xmlns=\"sap.m\">\n\n\t<Dialog id=\"dlgCreateSchedule\" \n\t    contentHeight=\"75%\"\n\t    contentWidth=\"20rem\"\n\t    stretch=\"{device>/system/phone}\"\n\t    title=\"{i18n>createScheduleDialogTitle}\">\n\t    <f:Form\n\t\t\tmaxContainerCols=\"2\"\n\t\t\teditable=\"true\">\n\t\t\t<f:layout>\n\t\t\t<f:ResponsiveGridLayout\n\t\t\t\tlabelSpanL=\"5\" labelSpanM=\"5\"\n\t\t\t\temptySpanL=\"1\" emptySpanM=\"1\"\n\t\t\t\tcolumnsL=\"1\" columnsM=\"1\" />\n\t\t\t</f:layout>\n\t\t\t<f:FormContainer>\n\t\t\t\t<f:FormElement label=\"{i18n>scheduleNameLabel}\">\n\t\t\t\t\t<Input id=\"inpCreateScheduleName\"/>\n\t\t\t\t</f:FormElement>\n\t\t\t\t<f:FormElement label=\"{i18n>scheduleCommentLabel}\">\n\t\t\t\t\t<TextArea id=\"inpCreateScheduleComment\" width=\"100%\" rows=\"3\"/>\n\t\t\t\t</f:FormElement>\n\t\t    </f:FormContainer>\n\t\t\t<f:FormContainer id=\"frcCreateScheduleLegDurations\" formElements=\"{\n\t\t\t\t    path: 'Legs', \n\t\t\t\t    sorter: {path: 'sequence'}, \n\t\t\t\t    parameters: {expanded: 'FromLocation,ToLocation'}\n\t\t\t    }\">\n\t\t\t\t<f:FormElement label=\"{FromLocation/name} - {ToLocation/name}\">\n\t\t\t\t\t<HBox>\n\t\t\t\t\t    <Input type=\"Number\">\n\t\t\t\t\t        <layoutData> <FlexItemData growFactor=\"1\" /> </layoutData>\n\t\t\t\t\t    </Input>\n\t\t\t\t\t    <Text text=\"{i18n>legDurationUnitMinutes}\" class=\"sapUiTinyMarginBegin\">\n\t\t\t\t\t\t\t<layoutData> <FlexItemData growFactor=\"0\" /> </layoutData>\n\t\t\t\t\t    </Text>\n\t\t\t\t    </HBox>\n\t\t\t\t</f:FormElement>\n\t\t    </f:FormContainer>\n        </f:Form>\n\t    <beginButton>\n\t        <Button text=\"{i18n>confirmButton}\" press=\"onCreateScheduleConfirm\"/>\n\t    </beginButton>\n\t    <endButton>\n\t        <Button text=\"{i18n>cancelButton}\" press=\"onCreateScheduleCancel\"/>\n\t    </endButton>\n\t</Dialog>\n\t\t\t\n</core:FragmentDefinition>",
		"diploma/admin/route/view/view/EditScheduleDialog.fragment.xml": "<core:FragmentDefinition \n    xmlns:core=\"sap.ui.core\" \n\txmlns:f=\"sap.ui.layout.form\"\n    xmlns:form=\"sap.ui.layout.form\"\n    xmlns=\"sap.m\">\n    \n\t<Dialog id=\"dlgEditSchedule\" \n\t    title=\"{i18n>editScheduleDialogTitle}\"\n\t    contentHeight=\"75%\"\n\t    contentWidth=\"20rem\"\n\t    stretch=\"{device>/system/phone}\">\n\t    <f:Form\n\t\t\tmaxContainerCols=\"2\"\n\t\t\teditable=\"true\">\n\t\t\t<f:layout>\n\t\t\t<f:ResponsiveGridLayout\n\t\t\t\tlabelSpanL=\"5\" labelSpanM=\"5\"\n\t\t\t\temptySpanL=\"1\" emptySpanM=\"1\"\n\t\t\t\tcolumnsL=\"1\" columnsM=\"1\" />\n\t\t\t</f:layout>\n\t\t\t<f:FormContainer>\n\t\t\t\t<f:FormElement label=\"{i18n>scheduleNameLabel}\">\n\t\t\t\t\t<Input value=\"{name}\"/>\n\t\t\t\t</f:FormElement>\n\t\t\t\t<f:FormElement label=\"{i18n>scheduleCommentLabel}\">\n\t\t\t\t\t<TextArea value=\"{comment}\" width=\"100%\" rows=\"3\"/>\n\t\t\t\t</f:FormElement>\n\t\t    </f:FormContainer>\n\t\t\t<f:FormContainer formElements=\"{\n\t\t\t\t    path: 'LegDurations', \n\t\t\t\t    sorter: {path: 'sequence'}, \n\t\t\t\t    parameters: {expanded: 'Leg/FromLocation,Leg/ToLocation'}\n\t\t\t    }\">\n\t\t\t\t<f:FormElement label=\"{Leg/FromLocation/name} - {Leg/ToLocation/name}\">\n\t\t\t\t\t<HBox>\n\t\t\t\t\t    <Input type=\"Number\" value=\"{duration}\">\n\t\t\t\t\t        <layoutData> <FlexItemData growFactor=\"1\" /> </layoutData>\n\t\t\t\t\t    </Input>\n\t\t\t\t\t    <Text text=\"{i18n>legDurationUnitMinutes}\" class=\"sapUiTinyMarginBegin\">\n\t\t\t\t\t\t\t<layoutData> <FlexItemData growFactor=\"0\" /> </layoutData>\n\t\t\t\t\t    </Text>\n\t\t\t\t    </HBox>\n\t\t\t\t</f:FormElement>\n\t\t    </f:FormContainer>\n        </f:Form>\n\t    <beginButton>\n\t        <Button text=\"{i18n>confirmButton}\" press=\"onEditScheduleConfirm\"/>\n\t    </beginButton>\n\t    <endButton>\n\t        <Button text=\"{i18n>cancelButton}\" press=\"onEditScheduleCancel\"/>\n\t    </endButton>\n\t</Dialog>\n</core:FragmentDefinition>",
		"diploma/admin/route/view/view/NotFound.view.xml": "<mvc:View\n\t\tcontrollerName=\"diploma.admin.route.view.controller.BaseController\"\n\t\txmlns:mvc=\"sap.ui.core.mvc\"\n\t\txmlns=\"sap.m\">\n\n\t<MessagePage\n\t\t\tid=\"page\"\n\t\t\ttitle=\"{i18n>notFoundTitle}\"\n\t\t\ttext=\"{i18n>notFoundText}\"\n\t\t\ticon=\"{sap-icon://document}\"\n\t\t\tdescription=\"\"\n\t\t\tshowNavButton=\"{device>/system/phone}\"\n\t\t\tnavButtonPress=\"onNavBack\">\n\t</MessagePage>\n\n</mvc:View>",
		"diploma/admin/route/view/view/DetailObjectNotFound.view.xml": "<mvc:View\n\t\tcontrollerName=\"diploma.admin.route.view.controller.BaseController\"\n\t\txmlns:mvc=\"sap.ui.core.mvc\"\n\t\txmlns=\"sap.m\">\n\n\t<MessagePage\n\t\t\tid=\"page\"\n\t\t\ttitle=\"{i18n>detailTitle}\"\n\t\t\ttext=\"{i18n>noObjectFoundText}\"\n\t\t\ticon=\"{sap-icon://product}\"\n\t\t\tdescription=\"\"\n\t\t\tshowNavButton=\"{device>/system/phone}\"\n\t\t\tnavButtonPress=\"onNavBack\">\n\t</MessagePage>\n\n</mvc:View>"
	}
});