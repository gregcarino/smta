/**
* This file was auto-generated by SAP Web IDE build and includes all
* the source files required by SAPUI5 runtime for performance optimization.
* PLEASE DO NOT EDIT THIS FILE!! Changes will be overwritten the next time the build is run.
*/
jQuery.sap.registerPreloadedModules({
	"version": "2.0",
	"name": "diploma/admin/transport/Component-preload",
	"modules": {
		"diploma/admin/transport/controller/App.controller.js": "sap.ui.define([\r\n\t\t\"diploma/admin/transport/controller/BaseController\",\r\n\t\t\"sap/ui/model/json/JSONModel\"\r\n\t], function (BaseController, JSONModel) {\r\n\t\t\"use strict\";\r\n\r\n\t\treturn BaseController.extend(\"diploma.admin.transport.controller.App\", {\r\n\r\n\t\t\tonInit : function () {\r\n\t\t\t\tvar oViewModel,\r\n\t\t\t\t\tfnSetAppNotBusy,\r\n\t\t\t\t\toListSelector = this.getOwnerComponent().oListSelector,\r\n\t\t\t\t\tiOriginalBusyDelay = this.getView().getBusyIndicatorDelay();\r\n\r\n\t\t\t\toViewModel = new JSONModel({\r\n\t\t\t\t\tbusy : true,\r\n\t\t\t\t\tdelay : 0\r\n\t\t\t\t});\r\n\t\t\t\tthis.setModel(oViewModel, \"appView\");\r\n\r\n\t\t\t\tfnSetAppNotBusy = function() {\r\n\t\t\t\t\toViewModel.setProperty(\"/busy\", false);\r\n\t\t\t\t\toViewModel.setProperty(\"/delay\", iOriginalBusyDelay);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tthis.getOwnerComponent().getModel().metadataLoaded()\r\n\t\t\t\t\t\t.then(fnSetAppNotBusy);\r\n\r\n\t\t\t\t// Makes sure that master view is hidden in split app\r\n\t\t\t\t// after a new list entry has been selected.\r\n\t\t\t\toListSelector.attachListSelectionChange(function () {\r\n\t\t\t\t\tthis.byId(\"idAppControl\").hideMaster();\r\n\t\t\t\t}, this);\r\n\r\n\t\t\t\t// apply content density mode to root view\r\n\t\t\t\tthis.getView().addStyleClass(this.getOwnerComponent().getContentDensityClass());\r\n\t\t\t}\r\n\r\n\t\t});\r\n\r\n\t}\r\n);",
		"diploma/admin/transport/controller/BaseController.js": "/*global history */\r\nsap.ui.define([\r\n\t\t\"sap/ui/core/mvc/Controller\",\r\n\t\t\"sap/ui/core/routing/History\"\r\n\t], function (Controller, History) {\r\n\t\t\"use strict\";\r\n\r\n\t\treturn Controller.extend(\"diploma.admin.transport.controller.BaseController\", {\r\n\t\t\t/**\r\n\t\t\t * Convenience method for accessing the router in every controller of the application.\r\n\t\t\t * @public\r\n\t\t\t * @returns {sap.ui.core.routing.Router} the router for this component\r\n\t\t\t */\r\n\t\t\tgetRouter : function () {\r\n\t\t\t\treturn this.getOwnerComponent().getRouter();\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Convenience method for getting the view model by name in every controller of the application.\r\n\t\t\t * @public\r\n\t\t\t * @param {string} sName the model name\r\n\t\t\t * @returns {sap.ui.model.Model} the model instance\r\n\t\t\t */\r\n\t\t\tgetModel : function (sName) {\r\n\t\t\t\treturn this.getView().getModel(sName);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Convenience method for setting the view model in every controller of the application.\r\n\t\t\t * @public\r\n\t\t\t * @param {sap.ui.model.Model} oModel the model instance\r\n\t\t\t * @param {string} sName the model name\r\n\t\t\t * @returns {sap.ui.mvc.View} the view instance\r\n\t\t\t */\r\n\t\t\tsetModel : function (oModel, sName) {\r\n\t\t\t\treturn this.getView().setModel(oModel, sName);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Convenience method for getting the resource bundle.\r\n\t\t\t * @public\r\n\t\t\t * @returns {sap.ui.model.resource.ResourceModel} the resourceModel of the component\r\n\t\t\t */\r\n\t\t\tgetResourceBundle : function () {\r\n\t\t\t\treturn this.getOwnerComponent().getModel(\"i18n\").getResourceBundle();\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Event handler  for navigating back.\r\n\t\t\t * It checks if there is a history entry. If yes, history.go(-1) will happen.\r\n\t\t\t * If not, it will replace the current entry of the browser history with the master route.\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tonNavBack : function() {\r\n\t\t\t\tvar sPreviousHash = History.getInstance().getPreviousHash();\r\n\r\n\t\t\t\tif (sPreviousHash !== undefined) {\r\n\t\t\t\t\t// The history contains a previous entry\r\n\t\t\t\t\thistory.go(-1);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Otherwise we go backwards with a forward history\r\n\t\t\t\t\tvar bReplace = true;\r\n\t\t\t\t\tthis.getRouter().navTo(\"master\", {}, bReplace);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t});\r\n\r\n\t}\r\n);",
		"diploma/admin/transport/controller/Detail.controller.js": "/*global location */\nsap.ui.define([\n\t\"diploma/admin/transport/controller/BaseController\",\n\t\"sap/ui/model/json/JSONModel\",\n\t\"sap/m/MessageToast\",\n\t\"sap/m/MessageBox\",\n\t\"diploma/admin/transport/model/formatter\"\n], function(BaseController, JSONModel, MessageToast, MessageBox, formatter) {\n\t\"use strict\";\n\n\treturn BaseController.extend(\"diploma.admin.transport.controller.Detail\", {\n\n\t\tformatter: formatter,\n\n\t\t/* =========================================================== */\n\t\t/* lifecycle methods                                           */\n\t\t/* =========================================================== */\n\n\t\tonInit: function() {\n\t\t\t// Model used to manipulate control states. The chosen values make sure,\n\t\t\t// detail page is busy indication immediately so there is no break in\n\t\t\t// between the busy indication for loading the view's meta data\n\t\t\tvar oViewModel = new JSONModel({\n\t\t\t\tbusy: false,\n\t\t\t\tdelay: 0,\n\t\t\t\tlineItemListTitle: this.getResourceBundle().getText(\"detailLineItemTableHeading\"),\n\t\t\t\tlimitTypes: [\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: 0,\n\t\t\t\t\t\tname: this.getResourceBundle().getText(\"lowerThan\", [\"X\", this.getResourceBundle().getText(\"units\")])\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: 1,\n\t\t\t\t\t\tname: this.getResourceBundle().getText(\"greaterThan\", [\"X\", this.getResourceBundle().getText(\"units\")])\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: 2,\n\t\t\t\t\t\tname: this.getResourceBundle().getText(\"between\", [\"X\", \"Y\", this.getResourceBundle().getText(\"units\")])\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tlimit: {\n\t\t\t\t\tmeasure: \"\",\n\t\t\t\t\ttype:\t\"2\",\n\t\t\t\t\tlower:\t0,\n\t\t\t\t\tupper:\t100\n\t\t\t\t},\n\t\t\t\tperson: {\n\t\t\t\t    id:     \"\",\n\t\t\t\t    name:   \"\",\n\t\t\t\t    role:   \"\",\n\t\t\t\t    advanced: false\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.getRouter().getRoute(\"object\").attachPatternMatched(this._onObjectMatched, this);\n\n\t\t\tthis.setModel(oViewModel, \"detailView\");\n\n\t\t\tthis.getOwnerComponent().getModel().metadataLoaded().then(this._onMetadataLoaded.bind(this));\n\t\t\t\n\t\t\tvar sStyleClass = this.getOwnerComponent().getContentDensityClass();\n\t\t\tthis.byId(\"page\").getDependents().forEach(function(oItem){\n\t\t\t    oItem.addStyleClass(sStyleClass);\n\t\t\t});\n\t\t\t\n\t\t},\n\t\t\n\t\t\n\t\t/* =========================================================== */\n\t\t/* event handlers                                              */\n\t\t/* =========================================================== */\n\n\t\t/**\n\t\t * Updates the item count within the line item table's header\n\t\t * @param {object} oEvent an event containing the total number of items in the list\n\t\t * @private\n\t\t */\n\t\tonListUpdateFinished: function(oEvent) {\n\t\t\tvar sTitle,\n\t\t\t\tiTotalItems = oEvent.getParameter(\"total\"),\n\t\t\t\toViewModel = this.getModel(\"detailView\");\n\n\t\t\t// only update the counter if the length is final\n\t\t\tif (this.byId(\"lineItemsList\").getBinding(\"items\").isLengthFinal()) {\n\t\t\t\tif (iTotalItems) {\n\t\t\t\t\tsTitle = this.getResourceBundle().getText(\"detailLineItemTableHeadingCount\", [iTotalItems]);\n\t\t\t\t} else {\n\t\t\t\t\t//Display 'Line Items' instead of 'Line items (0)'\n\t\t\t\t\tsTitle = this.getResourceBundle().getText(\"detailLineItemTableHeading\");\n\t\t\t\t}\n\t\t\t\toViewModel.setProperty(\"/lineItemListTitle\", sTitle);\n\t\t\t}\n\t\t},\n\t\t\n\t\t/** Called when the user presses an email. Opens the default email client. */\n\t\tonSendEmail: function(oEvent) {\n\t\t    sap.m.URLHelper.triggerEmail(oEvent.getSource().getBindingContext().getProperty(\"Person/email\"));\n\t\t},\n\t\t\n\t\t/** Called when the route has changed. */\n\t\tonRouteChange: function(oEvent) {\n\t\t    var oItem = oEvent.getSource().getSelectedItem();\n\t\t    if (oItem) {\n    \t\t\tthis.byId(\"transSchedule\").bindElement(oItem.getBindingContext().getPath());\n\t\t    }\n\t\t},\n\n\t\t/**\n\t\t * Commits the changes to the backend. \n\t\t */\n\t\tonUpdateCommit: function() {\n\t\t    var oDate = this._getDateTime(),\n\t\t        oBinding = this.getView().getElementBinding();\n\t\t    if (oBinding.getBoundContext().getProperty(\"lastLocation\") && oBinding.getBoundContext().getProperty(\"lastWhen\")\n\t\t        && oBinding.getBoundContext().getProperty(\"lastWhen\").getTime() !== oDate.getTime()) {\n\t\t        MessageBox.error(this.getResourceBundle().getText(\"errorMessageTransportStarted\"));\n\t\t        return;\n\t\t    }\n\t\t    this.getModel().update(oBinding.getPath(), {\n\t\t\t\tdescription:\tthis.byId(\"transDesc\").getValue(),\n\t\t\t\ttWhen:\t\t\toDate,\n\t\t\t\troute:\t\t\tthis.byId(\"transRoute\").getSelectedKey(),\n\t\t\t\tschedule:\t\tthis.byId(\"transSchedule\").getSelectedKey(),\n\t\t\t\treturning:      this.byId(\"transReturning\").getSelected() ? 1 : 0,\n\t\t\t\tlastWhen:       oDate,\n\t\t\t\tdone:           0\n\t\t\t}, {\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tMessageToast.show(this.getResourceBundle().getText(\"changesSavedSuccesfully\"));\n\t\t\t\t}.bind(this)\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Commits the changes to the backend. \n\t\t */\n\t\tonCreateCommit: function() {\n\t\t    var oDate = this._getDateTime();\n\t\t\tthis.getModel().create(\"/Transports\", {\n\t\t\t\tid:\t\t\t\t\"\",\n\t\t\t\tdescription:\tthis.byId(\"transDesc\").getValue(),\n\t\t\t\ttWhen:\t\t\toDate,\n\t\t\t\troute:\t\t\tthis.byId(\"transRoute\").getSelectedKey(),\n\t\t\t\tschedule:\t\tthis.byId(\"transSchedule\").getSelectedKey(),\n\t\t\t\treturning:      this.byId(\"transReturning\").getSelected() ? 1 : 0,\n\t\t\t\tlastWhen:       oDate,\n\t\t\t\tlastLocation:   null,\n\t\t\t\tdone:           0\n\t\t\t}, {\n\t\t\t\tsuccess: function(oData) {\n\t\t\t\t\tthis.getRouter().navTo(\"object\", {objectId: oData.id});\n\t\t\t\t}.bind(this)\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Event handler for pressing the edit button.\n\t\t */\n\t\tonEdit: function() {\n\t\t\tthis.getModel(\"global\").setProperty(\"/edit\", true);\n\t\t},\n\t\t\n\t\t/** Revert the changes done to the transport. */\n\t\tonUndo: function() {\n\t\t    var sRoute = this.getView().getElementBinding().getBoundContext().getProperty(\"route\");\n\t\t    if (sRoute) {\n\t\t\t    this.byId(\"transSchedule\").bindElement(\"/Routes('\" + sRoute  + \"')\");\n\t\t    }\n\t\t\tthis.getModel().updateBindings(true);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Event handler for pressing the cancel button.\n\t\t */\n\t\tonCreateCancel: function() {\n\t\t\tthis.getModel(\"global\").setProperty(\"/edit\", false);\n\t\t\tthis.getModel(\"global\").setProperty(\"/isNew\", false);\n\t\t\tthis.getRouter().navTo(\"master\");\n\t\t},\n\t\t\n\t\t/**  \n\t\t* Event handler for pressing the display button.\n\t\t*/\n\t\tonDisplay: function() {\n\t\t    var sRoute = this.getView().getElementBinding().getBoundContext().getProperty(\"route\");\n\t\t    this.getModel(\"global\").setProperty(\"/edit\", false);\n\t\t    if (sRoute) {\n    \t\t\tthis.byId(\"transSchedule\").bindElement(\"/Routes('\" + sRoute + \"')\");\n\t\t    }\n\t\t\tthis.getModel().updateBindings(true);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Deletes a transport.\n\t\t */\n\t\tonDelete: function() {\n\t\t    var oContext = this.getView().getBindingContext(),\n\t\t        fnOnSuccess = this.getRouter().navTo.bind(this.getRouter(), \"master\");\n\t        MessageBox.confirm(this.getResourceBundle().getText(\"confirmDeleteTransport\", [oContext.getProperty(\"description\")]), {\n\t            onClose: function(sAction) {\n\t                if (sAction === MessageBox.Action.OK) {\n\t                    oContext.getModel().remove(oContext.getPath(), {\n\t                        success: fnOnSuccess\n\t                    });\n\t                }\n\t            }\n\t        });\n\t\t},\n\t\t\n\t\t/**\n\t\t * Opens the limit maintainence dialog.\n\t\t */\n\t\topenLimitDialog: function() {\n\t\t\tthis.byId(\"dialogLimit\").open();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Closes the limit maintainence dialog.\n\t\t */\n\t\tcloseLimitDialog: function() {\n\t\t\tthis.byId(\"dialogLimit\").close();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Creates a new limit.\n\t\t */\n\t\tonNewLimit: function() {\n\t\t\tvar oModel = this.getModel(\"detailView\");\n\t\t\tthis.getModel().create(\"/Limits\", {\n\t\t\t\ttransport:\tthis.getView().getBindingContext().getProperty(\"id\"),\n\t\t\t\tmeasure:\toModel.getProperty(\"/limit/measure\"),\n\t\t\t\tlowerBound: oModel.getProperty(\"/limit/type\") === \"0\" ? undefined : oModel.getProperty(\"/limit/lower\") + \"\",\n\t\t\t\tupperBound: oModel.getProperty(\"/limit/type\") === \"1\" ? undefined : oModel.getProperty(\"/limit/upper\") + \"\",\n\t\t\t\tnotified:\t0\n\t\t\t}, {success: this.closeLimitDialog.bind(this)});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Deletes a limit.\n\t\t * @param\t{object}\toEvent\tThe event object.\n\t\t * @returns {void}\n\t\t */\n\t\tdeleteLimit: function(oEvent) {\n\t\t\tthis.getModel().remove(oEvent.getParameter(\"listItem\").getBindingContext().getPath());\n\t\t},\n\t\t\n\t\t/**\n\t\t * Calls the navigation service and attempts to open the organization application.\n\t\t * @param\t{object}\toEvent\tThe event object.\n\t\t * @returns {void}\n\t\t */\n\t\tnavigateToOrganization: function(oEvent) {\n\t\t\tvar sId = oEvent.getSource().getBindingContext().getProperty(\"Person/organization\");\n\t\t\t\n\t\t\tif (!sap.ushell || !sap.ushell.Container || !sap.ushell.Container.getService) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar oService = sap.ushell.Container.getService(\"CrossApplicationNavigation\");\n\t\t\tif (!oService) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\toService.toExternal({\n\t\t\t\ttarget: {\n\t\t\t\t\tshellHash: \"Organization-Manage&/Organization/\" + sId\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Calls the navigation service and attempts to open the device application.\n\t\t * @param\t{object}\toEvent\tThe event object.\n\t\t * @returns {void}\n\t\t */\n\t\tnavigateToDevice: function(oEvent) {\n\t\t\tvar sDeviceId = oEvent.getSource().getBindingContext().getProperty(\"id\");\n\t\t\t\n\t\t\tif (!sap.ushell || !sap.ushell.Container || !sap.ushell.Container.getService) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar oService = sap.ushell.Container.getService(\"CrossApplicationNavigation\");\n\t\t\tif (!oService) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\toService.toExternal({\n\t\t\t\ttarget: {\n\t\t\t\t\tshellHash: \"Device-Manage&/Devices/\" + sDeviceId\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Opens the person value help dialog.\n\t\t */\n\t\topenPersonVhd: function() {\n\t\t    var oViewModel = this.getModel(\"detailView\");\n\t\t    oViewModel.setProperty(\"/person/name\", \"\");\n\t\t    oViewModel.setProperty(\"/person/role\", \"\");\n\t\t    oViewModel.setProperty(\"/person/id\", \"\");\n\t\t    this.byId(\"vhdPerson\").open();\n\t\t},\n\n        /**\n\t\t * Called when the \"Advanced\" / \"Basic\" button is pressed.\n\t\t * Updates the view model to show or hide the advanced search panel.\n\t\t * @returns {void}\n\t\t */\n\t\tonTogglePersonAdvancedSearch: function() {\n\t\t    this.getModel(\"detailView\").setProperty(\"/person/advanced\", \n\t\t        !this.getModel(\"detailView\").getProperty(\"/person/advanced\"));\n\t\t},\n\t\t\n\t\t/**\n\t\t * Common \"search\" event handler for all search fields on the person value help dialog.\n\t\t * Performs a filtering based on the type of search (basic / advanced) and the search queries.\n\t\t * @returns {void}\n\t\t */\n\t\tonSearchPersonMain: function() {\n\t\t    var aFilters = [], sQuery,\n\t\t        bAdvanced = this.getModel(\"detailView\").getProperty(\"/person/advanced\");\n\t\t    \n\t\t    sQuery = this.byId(\"seaPersonNameSearch\").getValue();\n\t\t\tif (sQuery && sQuery.length > 0) {\n\t\t\t\taFilters.push(new sap.ui.model.Filter(\"name\", sap.ui.model.FilterOperator.Contains, sQuery));\n\t\t\t}\n\t\t\t\n\t\t\tsQuery = this.byId(\"seaPersonOrganizationSearch\").getValue();\n\t\t\tif (sQuery && sQuery.length > 0 && bAdvanced) {\n\t\t\t\taFilters.push(new sap.ui.model.Filter(\"Organization/name\", sap.ui.model.FilterOperator.Contains, sQuery));\n\t\t\t}\n\t\t\t\n\t\t\tsQuery = this.byId(\"seaPersonEmailSearch\").getValue();\n\t\t\tif (sQuery && sQuery.length > 0 && bAdvanced) {\n\t\t\t\taFilters.push(new sap.ui.model.Filter(\"email\", sap.ui.model.FilterOperator.Contains, sQuery));\n\t\t\t}\n\t\t\t\n\t\t\tthis.byId(\"tblPersonSearchMain\").getBinding(\"items\").filter(aFilters, \"Application\");\n\t\t},\n\t\t\n\t\t/**\n\t\t * Closes the person value help dialog.\n\t\t */\n\t\tonPersonVhdClose: function() {\n\t\t    this.byId(\"vhdPerson\").close();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Called when the confirm button is pressed.\n\t\t * Creates a new involvement and, on success, closes the dialog.\n\t\t */\n\t\tonPersonVhdConfirm: function() {\n\t\t    this.getModel().create(\"/Involvements\", {\n\t\t        transport:  this.getView().getBindingContext().getProperty(\"id\"),\n\t\t        person:     this.getModel(\"detailView\").getProperty(\"/person/id\"),\n\t\t        role:       this.getModel(\"detailView\").getProperty(\"/person/role\")\n\t\t    }, {success:    this.onPersonVhdClose.bind(this)});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Called when a person from the value help dialg is pressed.\n\t\t * Updates the view model with the newly selected person's info.\n\t\t * @param   {Event} oEvent  The event object.\n\t\t * @returns {void}\n\t\t */\n\t\tonPersonSelected: function(oEvent) {\n\t\t    var oContext = oEvent.getSource().getBindingContext(),\n\t\t        oViewModel = this.getModel(\"detailView\");\n\t\t    oViewModel.setProperty(\"/person/id\", oContext.getProperty(\"id\"));\n\t\t    oViewModel.setProperty(\"/person/name\", oContext.getProperty(\"name\"));\n\t\t    oViewModel.setProperty(\"/person/role\", oContext.getProperty(\"defaultRole\"));\n\t\t},\n\t\t\n\t\t/**\n\t\t * Called when a delete button from the person list is presed.\n\t\t * Deletes the corresponding person.\n\t\t * @param   {Event} oEvent  The event object.\n\t\t * @returns {void}\n\t\t */\n\t\t onPersonDelete: function(oEvent) {\n\t\t\tthis.getModel().remove(oEvent.getParameter(\"listItem\").getBindingContext().getPath());\n\t\t },\n\t\t\n\t\t/* =========================================================== */\n\t\t/* begin: internal methods                                     */\n\t\t/* =========================================================== */\n\n\t\t/**\n\t\t * Binds the view to the object path and expands the aggregated line items.\n\t\t * @function\n\t\t * @param {sap.ui.base.Event} oEvent pattern match event in route 'object'\n\t\t * @private\n\t\t */\n\t\t_onObjectMatched: function(oEvent) {\n\t\t\tvar oViewModel = this.getModel(\"detailView\");\n\t\t\tvar oGlobalModel = this.getModel(\"global\");\n\t\t\tvar sObjectId = oEvent.getParameter(\"arguments\").objectId;\n\t\t\tif (sObjectId === \"new\") {\n\t\t\t\toGlobalModel.setProperty(\"/isNew\", true);\n\t\t\t\toGlobalModel.setProperty(\"/edit\", true);\n\t\t\t\toViewModel.setProperty(\"/busy\", false);\n\t\t\t\tthis.getView().unbindElement();\n\t\t\t\tvar aItems = this.byId(\"transRoute\").getItems();\n\t\t\t\tif (aItems && aItems.length) {\n\t\t\t\t    this.byId(\"transRoute\").setSelectedItem(aItems[0]);\n\t\t\t\t    this.byId(\"transSchedule\").bindElement(aItems[0].getBindingContext().getPath());\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (oGlobalModel.getProperty(\"/isNew\")) {\n\t\t\t\t\toGlobalModel.setProperty(\"/edit\", false);\n\t\t\t\t}\n\t\t\t\toGlobalModel.setProperty(\"/isNew\", false);\n\t\t\t\tvar sObjectPath = \"/Transports('\" + sObjectId + \"')\";\n\t\t\t\tthis._bindView(sObjectPath);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Binds the view to the object path. Makes sure that detail view displays\n\t\t * a busy indicator while data for the corresponding element binding is loaded.\n\t\t * @function\n\t\t * @param {string} sObjectPath path to the object to be bound to the view.\n\t\t * @private\n\t\t */\n\t\t_bindView: function(sObjectPath) {\n\t\t\t// Set busy indicator during view binding\n\t\t\tvar oViewModel = this.getModel(\"detailView\");\n\n\t\t\t// If the view was not bound yet its not busy, only if the binding requests data it is set to busy again\n\t\t\toViewModel.setProperty(\"/busy\", false);\n\n\t\t\tthis.getView().bindElement({\n\t\t\t\tpath: sObjectPath,\n\t\t\t\tevents: {\n\t\t\t\t\tchange: this._onBindingChange.bind(this),\n\t\t\t\t\tdataRequested: function() {\n\t\t\t\t\t\toViewModel.setProperty(\"/busy\", true);\n\t\t\t\t\t},\n\t\t\t\t\tdataReceived: function() {\n\t\t\t\t\t\toViewModel.setProperty(\"/busy\", false);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tparameters: {expand: \"Route,Schedule\"}\n\t\t\t});\n\t\t\t\n\t\t},\n\n\t\t/**\n\t\t * Called when the page's event binding was changed.\n\t\t */\n\t\t_onBindingChange: function() {\n\t\t\tvar oView = this.getView(),\n\t\t\t\toElementBinding = oView.getElementBinding(),\n\t\t\t\toContext = oElementBinding.getBoundContext();\n\n\t\t\t// No data for the binding\n\t\t\tif (!oContext) {\n\t\t\t\tthis.getRouter().getTargets().display(\"detailObjectNotFound\");\n\t\t\t\t// if object could not be found, the selection in the master list\n\t\t\t\t// does not make sense anymore.\n\t\t\t\tthis.getOwnerComponent().oListSelector.clearMasterListSelection();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar sPath = oElementBinding.getPath();\n\t\t\tthis.getOwnerComponent().oListSelector.selectAListItem(sPath);\n\t\t\tif (oContext.getProperty(\"route\")) {\n\t\t\t    this.byId(\"transSchedule\").bindElement(\"/Routes('\" + oContext.getProperty(\"route\")  + \"')\");\n\t\t\t}\n\t\t},\n        \n        /**\n         * Combines the date and time from the inputs to obtain the UTC datetime instance.\n         * @returns {Date}  The UTC date time from the inputs.\n         */\n        _getDateTime: function() {\n\t\t    var oTime = this.byId(\"transWhenTime\").getDateValue(),\n\t\t        oDate = this.byId(\"transWhenDate\").getDateValue();\n\t\t    return new Date(oDate.getFullYear(), oDate.getMonth(), oDate.getDate(), \n\t\t            oTime.getHours(), oTime.getMinutes(), oTime.getSeconds());\n        },\n        \n\t\t/**\n\t\t * Called when the odata service's model is loaded. Hides the busy indicator and resets busy delay.\n\t\t */\n\t\t_onMetadataLoaded: function() {\n\t\t\t// Store original busy indicator delay for the detail view\n\t\t\tvar iOriginalViewBusyDelay = this.getView().getBusyIndicatorDelay(),\n\t\t\t\toViewModel = this.getModel(\"detailView\"),\n\t\t\t\toLineItemTable = this.byId(\"lineItemsList\"),\n\t\t\t\tiOriginalLineItemTableBusyDelay = oLineItemTable.getBusyIndicatorDelay();\n\n\t\t\t// Make sure busy indicator is displayed immediately when\n\t\t\t// detail view is displayed for the first time\n\t\t\toViewModel.setProperty(\"/delay\", 0);\n\t\t\toViewModel.setProperty(\"/lineItemTableDelay\", 0);\n\n\t\t\toLineItemTable.attachEventOnce(\"updateFinished\", function() {\n\t\t\t\t// Restore original busy indicator delay for line item table\n\t\t\t\toViewModel.setProperty(\"/lineItemTableDelay\", iOriginalLineItemTableBusyDelay);\n\t\t\t});\n\n\t\t\tif (!this.getModel(\"global\").getProperty(\"/isNew\")) {\n\t\t\t\t// Binding the view will set it to not busy - so the view is always busy if it is not bound\n\t\t\t\toViewModel.setProperty(\"/busy\", true);\n\t\t\t\t// Restore original busy indicator delay for the detail view\n\t\t\t\toViewModel.setProperty(\"/delay\", iOriginalViewBusyDelay);\n\t\t\t}\n\t\t}\n\t});\n\n});",
		"diploma/admin/transport/controller/ErrorHandler.js": "sap.ui.define([\r\n\t\t\"sap/ui/base/Object\",\r\n\t\t\"sap/m/MessageBox\"\r\n\t], function (UI5Object, MessageBox) {\r\n\t\t\"use strict\";\r\n\r\n\t\treturn UI5Object.extend(\"diploma.admin.transport.controller.ErrorHandler\", {\r\n\r\n\t\t\t/**\r\n\t\t\t * Handles application errors by automatically attaching to the model events and displaying errors when needed.\r\n\t\t\t * @class\r\n\t\t\t * @param {sap.ui.core.UIComponent} oComponent reference to the app's component\r\n\t\t\t * @public\r\n\t\t\t * @alias diploma.admin.transport.controller.ErrorHandler\r\n\t\t\t */\r\n\t\t\tconstructor : function (oComponent) {\r\n\t\t\t\tthis._oResourceBundle = oComponent.getModel(\"i18n\").getResourceBundle();\r\n\t\t\t\tthis._oComponent = oComponent;\r\n\t\t\t\tthis._oModel = oComponent.getModel();\r\n\t\t\t\tthis._bMessageOpen = false;\r\n\t\t\t\tthis._sErrorText = this._oResourceBundle.getText(\"errorText\");\r\n\r\n\t\t\t\tthis._oModel.attachMetadataFailed(function (oEvent) {\r\n\t\t\t\t\tvar oParams = oEvent.getParameters();\r\n\r\n\t\t\t\t\tthis._showMetadataError(oParams.response);\r\n\t\t\t\t}, this);\r\n\r\n\t\t\t\tthis._oModel.attachRequestFailed(function (oEvent) {\r\n\t\t\t\t\tvar oParams = oEvent.getParameters();\r\n\r\n\t\t\t\t\t// An entity that was not found in the service is also throwing a 404 error in oData.\r\n\t\t\t\t\t// We already cover this case with a notFound target so we skip it here.\r\n\t\t\t\t\t// A request that cannot be sent to the server is a technical error that we have to handle though\r\n\t\t\t\t\tif (oParams.response.statusCode !== \"404\" || (oParams.response.statusCode === 404 && oParams.response.responseText.indexOf(\"Cannot POST\") === 0)) {\r\n\t\t\t\t\t\tthis._showServiceError(oParams.response);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, this);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Shows a {@link sap.m.MessageBox} when the metadata call has failed.\r\n\t\t\t * The user can try to refresh the metadata.\r\n\t\t\t * @param {string} sDetails a technical error to be displayed on request\r\n\t\t\t * @private\r\n\t\t\t */\r\n\t\t\t_showMetadataError : function (sDetails) {\r\n\t\t\t\tMessageBox.error(\r\n\t\t\t\t\tthis._sErrorText,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tid : \"metadataErrorMessageBox\",\r\n\t\t\t\t\t\tdetails : sDetails,\r\n\t\t\t\t\t\tstyleClass : this._oComponent.getContentDensityClass(),\r\n\t\t\t\t\t\tactions : [MessageBox.Action.RETRY, MessageBox.Action.CLOSE],\r\n\t\t\t\t\t\tonClose : function (sAction) {\r\n\t\t\t\t\t\t\tif (sAction === MessageBox.Action.RETRY) {\r\n\t\t\t\t\t\t\t\tthis._oModel.refreshMetadata();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}.bind(this)\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Shows a {@link sap.m.MessageBox} when a service call has failed.\r\n\t\t\t * Only the first error message will be display.\r\n\t\t\t * @param {string} sDetails a technical error to be displayed on request\r\n\t\t\t * @private\r\n\t\t\t */\r\n\t\t\t_showServiceError : function (sDetails) {\r\n\t\t\t\tif (this._bMessageOpen) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tthis._bMessageOpen = true;\r\n\t\t\t\tMessageBox.error(\r\n\t\t\t\t\tthis._sErrorText,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tid : \"serviceErrorMessageBox\",\r\n\t\t\t\t\t\tdetails : sDetails,\r\n\t\t\t\t\t\tstyleClass : this._oComponent.getContentDensityClass(),\r\n\t\t\t\t\t\tactions : [MessageBox.Action.CLOSE],\r\n\t\t\t\t\t\tonClose : function () {\r\n\t\t\t\t\t\t\tthis._bMessageOpen = false;\r\n\t\t\t\t\t\t}.bind(this)\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t});\r\n\r\n\t}\r\n);",
		"diploma/admin/transport/controller/ListSelector.js": "sap.ui.define([\r\n\t\t\"sap/ui/base/Object\"\r\n\t], function (BaseObject) {\r\n\t\t\"use strict\";\r\n\r\n\t\treturn BaseObject.extend(\"diploma.admin.transport.model.ListSelector\", {\r\n\r\n\t\t\t/**\r\n\t\t\t * Provides a convenience API for selecting list items. All the functions will wait until the initial load of the a List passed to the instance by the setBoundMasterList\r\n\t\t\t * function.\r\n\t\t\t * @class\r\n\t\t\t * @public\r\n\t\t\t * @alias diploma.admin.transport.model.ListSelector\r\n\t\t\t */\r\n\r\n\t\t\tconstructor : function () {\r\n\t\t\t\tthis._oWhenListHasBeenSet = new Promise(function (fnResolveListHasBeenSet) {\r\n\t\t\t\t\tthis._fnResolveListHasBeenSet = fnResolveListHasBeenSet;\r\n\t\t\t\t}.bind(this));\r\n\t\t\t\t// This promise needs to be created in the constructor, since it is allowed to\r\n\t\t\t\t// invoke selectItem functions before calling setBoundMasterList\r\n\t\t\t\tthis.oWhenListLoadingIsDone = new Promise(function (fnResolve, fnReject) {\r\n\t\t\t\t\t// Used to wait until the setBound masterList function is invoked\r\n\t\t\t\t\tthis._oWhenListHasBeenSet\r\n\t\t\t\t\t\t.then(function (oList) {\r\n\t\t\t\t\t\t\toList.getBinding(\"items\").attachEventOnce(\"dataReceived\",\r\n\t\t\t\t\t\t\t\tfunction (oData) {\r\n\t\t\t\t\t\t\t\t\tif (!oData.getParameter(\"data\")) {\r\n\t\t\t\t\t\t\t\t\t\tfnReject({\r\n\t\t\t\t\t\t\t\t\t\t\tlist : oList,\r\n\t\t\t\t\t\t\t\t\t\t\terror : true\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tvar oFirstListItem = oList.getItems()[0];\r\n\t\t\t\t\t\t\t\t\tif (oFirstListItem) {\r\n\t\t\t\t\t\t\t\t\t\t// Have to make sure that first list Item is selected\r\n\t\t\t\t\t\t\t\t\t\t// and a select event is triggered. Like that, the corresponding\r\n\t\t\t\t\t\t\t\t\t\t// detail page is loaded automatically\r\n\t\t\t\t\t\t\t\t\t\tfnResolve({\r\n\t\t\t\t\t\t\t\t\t\t\tlist : oList,\r\n\t\t\t\t\t\t\t\t\t\t\tfirstListitem : oFirstListItem\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\t// No items in the list\r\n\t\t\t\t\t\t\t\t\t\tfnReject({\r\n\t\t\t\t\t\t\t\t\t\t\tlist : oList,\r\n\t\t\t\t\t\t\t\t\t\t\terror : false\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}.bind(this));\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * A bound list should be passed in here. Should be done, before the list has received its initial data from the server.\r\n\t\t\t * May only be invoked once per ListSelector instance.\r\n\t\t\t * @param {sap.m.List} oList The list all the select functions will be invoked on.\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tsetBoundMasterList : function (oList) {\r\n\t\t\t\tthis._oList = oList;\r\n\t\t\t\tthis._fnResolveListHasBeenSet(oList);\r\n\t\t\t},\r\n\r\n\r\n\t\t\t/**\r\n\t\t\t * Tries to select and scroll to a list item with a matching binding context. If there are no items matching the binding context or the ListMode is none,\r\n\t\t\t * no selection/scrolling will happen\r\n\t\t\t * @param {string} sBindingPath the binding path matching the binding path of a list item\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tselectAListItem : function (sBindingPath) {\r\n\r\n\t\t\t\tthis.oWhenListLoadingIsDone.then(\r\n\t\t\t\t\tfunction () {\r\n\t\t\t\t\t\tvar oList = this._oList,\r\n\t\t\t\t\t\t\toSelectedItem;\r\n\r\n\t\t\t\t\t\tif (oList.getMode() === \"None\") {\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\toSelectedItem = oList.getSelectedItem();\r\n\r\n\t\t\t\t\t\t// skip update if the current selection is already matching the object path\r\n\t\t\t\t\t\tif (oSelectedItem && oSelectedItem.getBindingContext().getPath() === sBindingPath) {\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\toList.getItems().some(function (oItem) {\r\n\t\t\t\t\t\t\tif (oItem.getBindingContext() && oItem.getBindingContext().getPath() === sBindingPath) {\r\n\t\t\t\t\t\t\t\toList.setSelectedItem(oItem);\r\n\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}.bind(this),\r\n\t\t\t\t\tfunction () {\r\n\t\t\t\t\t\tjQuery.sap.log.warning(\"Could not select the list item with the path\" + sBindingPath + \" because the list encountered an error or had no items\");\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\r\n\t\t\t/* =========================================================== */\r\n\t\t\t/* Convenience Functions for List Selection Change Event       */\r\n\t\t\t/* =========================================================== */\r\n\r\n\t\t\t/**\r\n\t\t\t * Attaches a listener and listener function to the ListSelector's bound master list. By using\r\n\t\t\t * a promise, the listener is added, even if the list is not available when 'attachListSelectionChange'\r\n\t\t\t * is called.\r\n\t\t\t * @param {function} fnFunction the function to be executed when the list fires a selection change event\r\n\t\t\t * @param {function} oListener the listener object\r\n\t\t\t * @return {diploma.admin.transport.model.ListSelector} the list selector object for method chaining\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tattachListSelectionChange : function (fnFunction, oListener) {\r\n\t\t\t\tthis._oWhenListHasBeenSet.then(function () {\r\n\t\t\t\t\tthis._oList.attachSelectionChange(fnFunction, oListener);\r\n\t\t\t\t}.bind(this));\r\n\t\t\t\treturn this;\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Detaches a listener and listener function from the ListSelector's bound master list. By using\r\n\t\t\t * a promise, the listener is removed, even if the list is not available when 'detachListSelectionChange'\r\n\t\t\t * is called.\r\n\t\t\t * @param {function} fnFunction the function to be executed when the list fires a selection change event\r\n\t\t\t * @param {function} oListener the listener object\r\n\t\t\t * @return {diploma.admin.transport.model.ListSelector} the list selector object for method chaining\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tdetachListSelectionChange : function (fnFunction, oListener) {\r\n\t\t\t\tthis._oWhenListHasBeenSet.then(function () {\r\n\t\t\t\t\tthis._oList.detachSelectionChange(fnFunction, oListener);\r\n\t\t\t\t}.bind(this));\r\n\t\t\t\treturn this;\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Removes all selections from master list.\r\n\t\t\t * Does not trigger 'selectionChange' event on master list, though.\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tclearMasterListSelection : function () {\r\n\t\t\t\t//use promise to make sure that 'this._oList' is available\r\n\t\t\t\tthis._oWhenListHasBeenSet.then(function () {\r\n\t\t\t\t\tthis._oList.removeSelections(true);\r\n\t\t\t\t}.bind(this));\r\n\t\t\t}\r\n\r\n\t\t});\r\n\r\n\t}\r\n);",
		"diploma/admin/transport/controller/Master.controller.js": "/*global history */\r\nsap.ui.define([\r\n\t\t\"diploma/admin/transport/controller/BaseController\",\r\n\t\t\"sap/ui/model/json/JSONModel\",\r\n\t\t\"sap/ui/model/Filter\",\r\n\t\t\"sap/ui/model/FilterOperator\",\r\n\t\t\"sap/m/GroupHeaderListItem\",\r\n\t\t\"sap/ui/Device\",\r\n\t\t\"diploma/admin/transport/model/formatter\", \r\n\t\t\"sap/m/MessageToast\"\r\n\t], function (BaseController, JSONModel, Filter, FilterOperator, GroupHeaderListItem, Device, formatter, MessageToast) {\r\n\t\t\"use strict\";\r\n\r\n\t\treturn BaseController.extend(\"diploma.admin.transport.controller.Master\", {\r\n\r\n\t\t\tformatter: formatter,\r\n\r\n\t\t\t/* =========================================================== */\r\n\t\t\t/* lifecycle methods                                           */\r\n\t\t\t/* =========================================================== */\r\n\r\n\t\t\t/**\r\n\t\t\t * Called when the master list controller is instantiated. It sets up the event handling for the \r\n\t\t\t * master/detail communication and other lifecycle tasks.\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tonInit : function () {\r\n\t\t\t\t// Control state model\r\n\t\t\t\tvar oList = this.byId(\"list\"),\r\n\t\t\t\t\toViewModel = this._createViewModel(),\r\n\t\t\t\t\t// Put down master list's original value for busy indicator delay,\r\n\t\t\t\t\t// so it can be restored later on. Busy handling on the master list is\r\n\t\t\t\t\t// taken care of by the master list itself.\r\n\t\t\t\t\tiOriginalBusyDelay = oList.getBusyIndicatorDelay();\r\n\r\n\r\n\t\t\t\tthis._oList = oList;\r\n\t\t\t\t// keeps the filter and search state\r\n\t\t\t\tthis._oListFilterState = {\r\n\t\t\t\t\taFilter : [],\r\n\t\t\t\t\taSearch : []\r\n\t\t\t\t};\r\n\r\n\t\t\t\tthis.setModel(oViewModel, \"masterView\");\r\n\t\t\t\t// Make sure, busy indication is showing immediately so there is no\r\n\t\t\t\t// break after the busy indication for loading the view's meta data is\r\n\t\t\t\t// ended (see promise 'oWhenMetadataIsLoaded' in AppController)\r\n\t\t\t\toList.attachEventOnce(\"updateFinished\", function(){\r\n\t\t\t\t\t// Restore original busy indicator delay for the list\r\n\t\t\t\t\toViewModel.setProperty(\"/delay\", iOriginalBusyDelay);\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis.getView().addEventDelegate({\r\n\t\t\t\t\tonBeforeFirstShow: function () {\r\n\t\t\t\t\t\tthis.getOwnerComponent().oListSelector.setBoundMasterList(oList);\r\n\t\t\t\t\t}.bind(this)\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis.getRouter().getRoute(\"master\").attachPatternMatched(this._onMasterMatched, this);\r\n\t\t\t\tthis.getRouter().attachBypassed(this.onBypassed, this);\r\n\t\t\t},\r\n\r\n\t\t\t/* =========================================================== */\r\n\t\t\t/* event handlers                                              */\r\n\t\t\t/* =========================================================== */\r\n\r\n\t\t\t/**\r\n\t\t\t * Event handler for the create button press.\r\n\t\t\t * Simply navigates to the editable detail page.\r\n\t\t\t */\r\n\t\t\tonCreate: function() {\r\n\t\t\t\tthis.getRouter().navTo(\"object\", {\r\n\t\t\t\t\tobjectId: \"new\"\r\n\t\t\t\t}, true);\r\n\t\t\t},\r\n\t\t\t/**\r\n\t\t\t * After list data is available, this handler method updates the\r\n\t\t\t * master list counter and hides the pull to refresh control, if\r\n\t\t\t * necessary.\r\n\t\t\t * @param {sap.ui.base.Event} oEvent the update finished event\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tonUpdateFinished : function (oEvent) {\r\n\t\t\t\t// update the master list object counter after new data is loaded\r\n\t\t\t\tthis._updateListItemCount(oEvent.getParameter(\"total\"));\r\n\t\t\t\t// hide pull to refresh if necessary\r\n\t\t\t\tthis.byId(\"pullToRefresh\").hide();\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Event handler for the master search field. Applies current\r\n\t\t\t * filter value and triggers a new search. If the search field's\r\n\t\t\t * 'refresh' button has been pressed, no new search is triggered\r\n\t\t\t * and the list binding is refresh instead.\r\n\t\t\t * @param {sap.ui.base.Event} oEvent the search event\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tonSearch : function (oEvent) {\r\n\t\t\t\tif (oEvent.getParameters().refreshButtonPressed) {\r\n\t\t\t\t\t// Search field's 'refresh' button has been pressed.\r\n\t\t\t\t\t// This is visible if you select any master list item.\r\n\t\t\t\t\t// In this case no new search is triggered, we only\r\n\t\t\t\t\t// refresh the list binding.\r\n\t\t\t\t\tthis.onRefresh();\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar sQuery = oEvent.getParameter(\"query\");\r\n\r\n\t\t\t\tif (sQuery) {\r\n\t\t\t\t\tthis._oListFilterState.aSearch = [new Filter(\"description\", FilterOperator.Contains, sQuery)];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._oListFilterState.aSearch = [];\r\n\t\t\t\t}\r\n\t\t\t\tthis._applyFilterSearch();\r\n\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Event handler for refresh event. Keeps filter, sort\r\n\t\t\t * and group settings and refreshes the list binding.\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tonRefresh : function () {\r\n\t\t\t\tthis._oList.getBinding(\"items\").refresh();\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Event handler for the sorter selection.\r\n\t\t\t * @param {sap.ui.base.Event} oEvent the select event\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tonSort : function (oEvent) {\r\n\t\t\t\tvar sKey = oEvent.getSource().getSelectedItem().getKey(),\r\n\t\t\t\t\taSorters = this._oGroupSortState.sort(sKey);\r\n\r\n\t\t\t\tthis._applyGroupSort(aSorters);\r\n\t\t\t},\r\n\r\n\r\n\r\n\t\t\t/**\r\n\t\t\t * Event handler for the list selection event\r\n\t\t\t * @param {sap.ui.base.Event} oEvent the list selectionChange event\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tonSelectionChange : function (oEvent) {\r\n\t\t\t\t// get the list item, either from the listItem parameter or from the event's source itself \r\n\t\t\t\t//(will depend on the device-dependent mode).\r\n\t\t\t\tthis._showDetail(oEvent.getParameter(\"listItem\") || oEvent.getSource());\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Event handler for the bypassed event, which is fired when no routing pattern matched.\r\n\t\t\t * If there was an object selected in the master list, that selection is removed.\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tonBypassed : function () {\r\n\t\t\t\tthis._oList.removeSelections(true);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Used to create GroupHeaders with non-capitalized caption.\r\n\t\t\t * These headers are inserted into the master list to\r\n\t\t\t * group the master list's items.\r\n\t\t\t * @param {Object} oGroup group whose text is to be displayed\r\n\t\t\t * @public\r\n\t\t\t * @returns {sap.m.GroupHeaderListItem} group header with non-capitalized caption.\r\n\t\t\t */\r\n\t\t\tcreateGroupHeader : function (oGroup) {\r\n\t\t\t\treturn new GroupHeaderListItem({\r\n\t\t\t\t\ttitle : oGroup.text,\r\n\t\t\t\t\tupperCase : false\r\n\t\t\t\t});\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Navigates back in the browser history, if the entry was created by this app.\r\n\t\t\t * If not, it navigates to the Fiori Launchpad home page\r\n\t\t\t * @override\r\n\t\t\t * @public\r\n\t\t\t */\r\n\t\t\tonNavBack : function () {\r\n\t\t\t\tvar oHistory = sap.ui.core.routing.History.getInstance(),\r\n\t\t\t\t\tsPreviousHash = oHistory.getPreviousHash(),\r\n\t\t\t\t\toCrossAppNavigator = sap.ushell.Container.getService(\"CrossApplicationNavigation\");\r\n\r\n\t\t\t\tif (sPreviousHash !== undefined) {\r\n\t\t\t\t\t// The history contains a previous entry\r\n\t\t\t\t\thistory.go(-1);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Navigate back to FLP home\r\n\t\t\t\t\toCrossAppNavigator.toExternal({\r\n\t\t\t\t\t\ttarget : {shellHash: \"#\"}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\r\n\t\t\t/* =========================================================== */\r\n\t\t\t/* begin: internal methods                                     */\r\n\t\t\t/* =========================================================== */\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Builds the view model.\r\n\t\t\t * @returns {object} The new view model.\r\n\t\t\t */\r\n\t\t\t_createViewModel : function() {\r\n\t\t\t\treturn new JSONModel({\r\n\t\t\t\t\tisFilterBarVisible: false,\r\n\t\t\t\t\tfilterBarLabel: \"\",\r\n\t\t\t\t\tdelay: 0,\r\n\t\t\t\t\ttitle: this.getResourceBundle().getText(\"masterTitleCount\", [0]),\r\n\t\t\t\t\tnoDataText: this.getResourceBundle().getText(\"masterListNoDataText\"),\r\n\t\t\t\t\tsortBy: \"description\",\r\n\t\t\t\t\tgroupBy: \"None\"\r\n\t\t\t\t});\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * If the master route was hit (empty hash) we have to set\r\n\t\t\t * the hash to to the first item in the list as soon as the\r\n\t\t\t * listLoading is done and the first item in the list is known\r\n\t\t\t * @private\r\n\t\t\t */\r\n\t\t\t_onMasterMatched :  function() {\r\n\t\t\t\tthis.getOwnerComponent().oListSelector.oWhenListLoadingIsDone.then(\r\n\t\t\t\t\tfunction (mParams) {\r\n\t\t\t\t\t\tif (mParams.list.getMode() === \"None\") {\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar sObjectId = mParams.firstListitem.getBindingContext().getProperty(\"id\");\r\n\t\t\t\t\t\tthis.getRouter().navTo(\"object\", {objectId : sObjectId}, true);\r\n\t\t\t\t\t}.bind(this),\r\n\t\t\t\t\tfunction (mParams) {\r\n\t\t\t\t\t\tif (mParams.error) {\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.getRouter().getTargets().display(\"detailNoObjectsAvailable\");\r\n\t\t\t\t\t}.bind(this)\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Shows the selected item on the detail page\r\n\t\t\t * On phones a additional history entry is created\r\n\t\t\t * @param {sap.m.ObjectListItem} oItem selected Item\r\n\t\t\t * @private\r\n\t\t\t */\r\n\t\t\t_showDetail : function (oItem) {\r\n\t\t\t\tvar bReplace = !Device.system.phone;\r\n\t\t\t\tthis.getRouter().navTo(\"object\", {\r\n\t\t\t\t\tobjectId : oItem.getBindingContext().getProperty(\"id\")\r\n\t\t\t\t}, bReplace);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Sets the item count on the master list header\r\n\t\t\t * @param {integer} iTotalItems the total number of items in the list\r\n\t\t\t * @private\r\n\t\t\t */\r\n\t\t\t_updateListItemCount : function (iTotalItems) {\r\n\t\t\t\tvar sTitle;\r\n\t\t\t\t// only update the counter if the length is final\r\n\t\t\t\tif (this._oList.getBinding(\"items\").isLengthFinal()) {\r\n\t\t\t\t\tsTitle = this.getResourceBundle().getText(\"masterTitleCount\", [iTotalItems]);\r\n\t\t\t\t\tthis.getModel(\"masterView\").setProperty(\"/title\", sTitle);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Internal helper method to apply both filter and search state together on the list binding\r\n\t\t\t * @private\r\n\t\t\t */\r\n\t\t\t_applyFilterSearch : function () {\r\n\t\t\t\tvar aFilters = this._oListFilterState.aSearch.concat(this._oListFilterState.aFilter),\r\n\t\t\t\t\toViewModel = this.getModel(\"masterView\");\r\n\t\t\t\tthis._oList.getBinding(\"items\").filter(aFilters, \"Application\");\r\n\t\t\t\t// changes the noDataText of the list in case there are no filter results\r\n\t\t\t\tif (aFilters.length !== 0) {\r\n\t\t\t\t\toViewModel.setProperty(\"/noDataText\", this.getResourceBundle().getText(\"masterListNoDataWithFilterOrSearchText\"));\r\n\t\t\t\t} else if (this._oListFilterState.aSearch.length > 0) {\r\n\t\t\t\t\t// only reset the no data text to default when no new search was triggered\r\n\t\t\t\t\toViewModel.setProperty(\"/noDataText\", this.getResourceBundle().getText(\"masterListNoDataText\"));\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Internal helper method to apply both group and sort state together on the list binding\r\n\t\t\t * @private\r\n\t\t\t */\r\n\t\t\t_applyGroupSort : function (aSorters) {\r\n\t\t\t\tthis._oList.getBinding(\"items\").sort(aSorters);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Internal helper method that sets the filter bar visibility property and the label's caption to be shown\r\n\t\t\t * @param {string} sFilterBarText the selected filter value\r\n\t\t\t * @private\r\n\t\t\t */\r\n\t\t\t_updateFilterBar : function (sFilterBarText) {\r\n\t\t\t\tvar oViewModel = this.getModel(\"masterView\");\r\n\t\t\t\toViewModel.setProperty(\"/isFilterBarVisible\", (this._oListFilterState.aFilter.length > 0));\r\n\t\t\t\toViewModel.setProperty(\"/filterBarLabel\", this.getResourceBundle().getText(\"masterFilterBarText\", [sFilterBarText]));\r\n\t\t\t}\r\n\r\n\t\t});\r\n\r\n\t}\r\n);",
		"diploma/admin/transport/localService/mockserver.js": "sap.ui.define([\r\n\t\t\"sap/ui/core/util/MockServer\"\r\n\t], function (MockServer) {\r\n\t\t\"use strict\";\r\n\r\n\t\tvar oMockServer,\r\n\t\t\t_sAppModulePath = \"diploma/admin/transport/\",\r\n\t\t\t_sJsonFilesModulePath = _sAppModulePath + \"localService/mockdata\";\r\n\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * Initializes the mock server.\r\n\t\t\t * You can configure the delay with the URL parameter \"serverDelay\".\r\n\t\t\t * The local mock data in this folder is returned instead of the real data for testing.\r\n\t\t\t * @public\r\n\t\t\t */\r\n\r\n\t\t\tinit : function () {\r\n\t\t\t\tvar oUriParameters = jQuery.sap.getUriParameters(),\r\n\t\t\t\t\tsJsonFilesUrl = jQuery.sap.getModulePath(_sJsonFilesModulePath),\r\n\t\t\t\t\tsManifestUrl = jQuery.sap.getModulePath(_sAppModulePath + \"manifest\", \".json\"),\r\n\t\t\t\t\tsEntity = \"Transports\",\r\n\t\t\t\t\tsErrorParam = oUriParameters.get(\"errorType\"),\r\n\t\t\t\t\tiErrorCode = sErrorParam === \"badRequest\" ? 400 : 500,\r\n\t\t\t\t\toManifest = jQuery.sap.syncGetJSON(sManifestUrl).data,\r\n\t\t\t\t\toMainDataSource = oManifest[\"sap.app\"].dataSources.mainService,\r\n\t\t\t\t\tsMetadataUrl = jQuery.sap.getModulePath(_sAppModulePath + oMainDataSource.settings.localUri.replace(\".xml\", \"\"), \".xml\"),\r\n\t\t\t\t\t// ensure there is a trailing slash\r\n\t\t\t\t\tsMockServerUrl = /.*\\/$/.test(oMainDataSource.uri) ? oMainDataSource.uri : oMainDataSource.uri + \"/\";\r\n\r\n\t\t\t\toMockServer = new MockServer({\r\n\t\t\t\t\trootUri : sMockServerUrl\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// configure mock server with a delay of 1s\r\n\t\t\t\tMockServer.config({\r\n\t\t\t\t\tautoRespond : true,\r\n\t\t\t\t\tautoRespondAfter : (oUriParameters.get(\"serverDelay\") || 1000)\r\n\t\t\t\t});\r\n\r\n\t\t\t\toMockServer.simulate(sMetadataUrl, {\r\n\t\t\t\t\tsMockdataBaseUrl : sJsonFilesUrl,\r\n\t\t\t\t\tbGenerateMissingMockData : true\r\n\t\t\t\t});\r\n\r\n\t\t\t\tvar aRequests = oMockServer.getRequests(),\r\n\t\t\t\t\tfnResponse = function (iErrCode, sMessage, aRequest) {\r\n\t\t\t\t\t\taRequest.response = function(oXhr){\r\n\t\t\t\t\t\t\toXhr.respond(iErrCode, {\"Content-Type\": \"text/plain;charset=utf-8\"}, sMessage);\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t// handling the metadata error test\r\n\t\t\t\tif (oUriParameters.get(\"metadataError\")) {\r\n\t\t\t\t\taRequests.forEach( function ( aEntry ) {\r\n\t\t\t\t\t\tif (aEntry.path.toString().indexOf(\"$metadata\") > -1) {\r\n\t\t\t\t\t\t\tfnResponse(500, \"metadata Error\", aEntry);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Handling request errors\r\n\t\t\t\tif (sErrorParam) {\r\n\t\t\t\t\taRequests.forEach( function ( aEntry ) {\r\n\t\t\t\t\t\tif (aEntry.path.toString().indexOf(sEntity) > -1) {\r\n\t\t\t\t\t\t\tfnResponse(iErrorCode, sErrorParam, aEntry);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\toMockServer.start();\r\n\r\n\t\t\t\tjQuery.sap.log.info(\"Running the app with mock data\");\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * @public returns the mockserver of the app, should be used in integration tests\r\n\t\t\t * @returns {sap.ui.core.util.MockServer} the mockserver instance\r\n\t\t\t */\r\n\t\t\tgetMockServer : function () {\r\n\t\t\t\treturn oMockServer;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t}\r\n);",
		"diploma/admin/transport/model/formatter.js": "sap.ui.define([\r\n\t], function () {\r\n\t\t\"use strict\";\r\n\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * Rounds the currency value to 2 digits\r\n\t\t\t *\r\n\t\t\t * @public\r\n\t\t\t * @param {string} sValue value to be formatted\r\n\t\t\t * @returns {string} formatted currency value with 2 digits\r\n\t\t\t */\r\n\t\t\tcurrencyValue : function (sValue) {\r\n\t\t\t\tif (!sValue) {\r\n\t\t\t\t\treturn \"\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn parseFloat(sValue).toFixed(2);\r\n\t\t\t},\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Formats the limit label.\r\n\t\t\t * @param\t{string|double}\tdLower\tThe lower bound.\r\n\t\t\t * @param\t{string|upper}\tdUpper\tThe upper bound.\r\n\t\t\t * @param\t{string}\t\tsUnit\tThe measure unit.\r\n\t\t\t * @returns {string}\tThe limit label text.\r\n\t\t\t */\r\n\t\t\tlimitLabel: function(dLower, dUpper, sUnit) {\r\n\t\t\t\tif (dLower === null || dLower === undefined) {\r\n\t\t\t\t\treturn this.getResourceBundle().getText(\"lowerThan\", [dUpper, sUnit]);\r\n\t\t\t\t}\r\n\t\t\t\telse if (dUpper === null || dUpper === undefined) {\r\n\t\t\t\t\treturn this.getResourceBundle().getText(\"greaterThan\", [dLower, sUnit]);\r\n\t\t\t\t} \r\n\t\t\t\telse {\r\n\t\t\t\t\treturn this.getResourceBundle().getText(\"between\", [dLower, dUpper, sUnit]);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Formats the person label.\r\n\t\t\t * @param\t{string}\tsName\tThe person's name.\r\n\t\t\t * @param\t{string}\tsEmail\tThe person's email.\r\n\t\t\t * @returns {string}\tThe person label text.\r\n\t\t\t */\r\n\t\t\tpersonLabel: function(sName, sEmail) {\r\n\t\t\t    if (sName && sEmail) {\r\n\t\t\t        return this.getResourceBundle().getText(\"personLabel\", [sName, sEmail]);\r\n\t\t\t    }\r\n\t\t\t    else {\r\n\t\t\t        return sName || sEmail || \"\";\r\n\t\t\t    }\r\n\t\t\t},\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Formats the detail view's title.\r\n\t\t\t * @param\t{string}\tsDescription\tThe transport's description.\r\n\t\t\t * @returns {string}\tThe detail view's title.\r\n\t\t\t */\r\n\t\t\tdetailTitle: function(sDescription) {\r\n\t\t\t\tif (sDescription) {\r\n\t\t\t\t\treturn this.getResourceBundle().getText(\"detailTitle\", [sDescription]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn this.getResourceBundle().getText(\"detailTitleNoTransport\");\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Formats the display text for measures.\r\n\t\t\t * @param\t{string}\tsText\tThe translatable text with placeholders.\r\n\t\t\t * @param\t{string}\tsName\tThe name of the measure.\r\n\t\t\t * @param\t{string}\tsUnit\tThe measure's unit.\r\n\t\t\t * @returns\tThe measure display text.\r\n\t\t\t */\r\n\t\t\tmeasureText: function(sText, sName, sUnit) {\r\n\t\t\t\tif (!sName && !sUnit) {\r\n\t\t\t\t\treturn \"\";\r\n\t\t\t\t}\r\n\t\t\t\tif (!sUnit) {\r\n\t\t\t\t\treturn sName;\r\n\t\t\t\t}\r\n\t\t\t\treturn jQuery.sap.formatMessage(sText, [sName, sUnit || \"\"]);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t}\r\n);",
		"diploma/admin/transport/model/GroupSortState.js": "sap.ui.define([\r\n\t\t\"sap/ui/base/Object\",\r\n\t\t\"sap/ui/model/Sorter\"\r\n\t], function (BaseObject, Sorter) {\r\n\t\"use strict\";\r\n\r\n\treturn BaseObject.extend(\"diploma.admin.transport.model.GroupSortState\", {\r\n\r\n\t\t/**\r\n\t\t * Creates sorters and groupers for the master list.\r\n\t\t * Since grouping also means sorting, this class modifies the viewmodel.\r\n\t\t * If a user groups by a field, and there is a corresponding sort option, the option will be chosen.\r\n\t\t * If a user ungroups, the sorting will be reset to the default sorting.\r\n\t\t * @class\r\n\t\t * @public\r\n\t\t * @alias diploma.admin.transport.model.GroupSortState\r\n\t\t */\r\n\t\tconstructor: function (oViewModel, fnGroupFunction) {\r\n\t\t\tthis._oViewModel = oViewModel;\r\n\t\t\tthis._fnGroupFunction = fnGroupFunction;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Sorts by description, or by \r\n\t\t *\r\n\t\t * @param sKey - the key of the field used for grouping\r\n\t\t * @returns {sap.ui.model.Sorter[]} an array of sorters\r\n\t\t */\r\n\t\tsort: function (sKey) {\r\n\t\t\tvar sGroupedBy = this._oViewModel.getProperty(\"/groupBy\");\r\n\r\n\t\t\tif (sGroupedBy !== \"None\") {\r\n\t\t\t\t// If the list is grouped, remove the grouping since the user wants to sort by something different\r\n\t\t\t\t// Grouping only works if the list is primary sorted by the grouping - the first sorten contains a grouper function\r\n\t\t\t\tthis._oViewModel.setProperty(\"/groupBy\", \"None\");\r\n\t\t\t}\r\n\r\n\t\t\treturn [new Sorter(sKey, false)];\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Groups by , or resets the grouping for the key \"None\"\r\n\t\t *\r\n\t\t * @param sKey - the key of the field used for grouping\r\n\t\t * @returns {sap.ui.model.Sorter[]} an array of sorters\r\n\t\t */\r\n\t\tgroup: function (sKey) {\r\n\t\t\tvar aSorters = [];\r\n\r\n\t\t\tif (sKey === \"\") {\r\n\t\t\t\t// Grouping means sorting so we set the select to the same Entity used for grouping\r\n\t\t\t\tthis._oViewModel.setProperty(\"/sortBy\", \"\");\r\n\r\n\t\t\t\taSorters.push(\r\n\t\t\t\t\tnew Sorter(\"\", false,\r\n\t\t\t\t\t\tthis._fnGroupFunction.bind(this))\r\n\t\t\t\t);\r\n\t\t\t} else if (sKey === \"None\") {\r\n\t\t\t\t// select the default sorting again\r\n\t\t\t\tthis._oViewModel.setProperty(\"/sortBy\", \"description\");\r\n\t\t\t}\r\n\r\n\t\t\treturn aSorters;\r\n\t\t}\r\n\r\n\t});\r\n});",
		"diploma/admin/transport/model/models.js": "sap.ui.define([\r\n\t\t\"sap/ui/model/json/JSONModel\",\r\n\t\t\"sap/ui/Device\"\r\n\t], function (JSONModel, Device) {\r\n\t\t\"use strict\";\r\n\r\n\t\treturn {\r\n\t\t\tcreateDeviceModel : function () {\r\n\t\t\t\tvar oModel = new JSONModel(Device);\r\n\t\t\t\toModel.setDefaultBindingMode(\"OneWay\");\r\n\t\t\t\treturn oModel;\r\n\t\t\t},\r\n\r\n\t\t\tcreateFLPModel : function () {\r\n\t\t\t\tvar fnGetuser = jQuery.sap.getObject(\"sap.ushell.Container.getUser\"),\r\n\t\t\t\t\tbIsShareInJamActive = fnGetuser ? fnGetuser().isJamActive() : false,\r\n\t\t\t\t\toModel = new JSONModel({\r\n\t\t\t\t\t\tisShareInJamActive: bIsShareInJamActive\r\n\t\t\t\t\t});\r\n\t\t\t\toModel.setDefaultBindingMode(\"OneWay\");\r\n\t\t\t\treturn oModel;\r\n\t\t\t},\r\n\t\t\t\r\n\t\t\tcreateGlobalModel : function() {\r\n\t\t\t\treturn new JSONModel({\r\n\t\t\t\t\tedit: false,\r\n\t\t\t\t\tisNew: false\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t}\r\n);",
		"diploma/admin/transport/view/App.view.xml": "<mvc:View\r\n\t\tcontrollerName=\"diploma.admin.transport.controller.App\"\r\n\t\txmlns:mvc=\"sap.ui.core.mvc\"\r\n\t\tdisplayBlock=\"true\"\r\n\t\tbusy=\"{appView>/busy}\"\r\n\t\tbusyIndicatorDelay=\"{appView>/delay}\"\r\n\t\txmlns=\"sap.m\">\r\n\t<SplitApp id=\"idAppControl\" />\r\n</mvc:View>",
		"diploma/admin/transport/view/Detail.view.xml": "<mvc:View controllerName=\"diploma.admin.transport.controller.Detail\" \n\txmlns:footerbar=\"sap.ushell.ui.footerbar\" \n\txmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns:semantic=\"sap.m.semantic\" \n\txmlns=\"sap.m\" \n\txmlns:core=\"sap.ui.core\">\n\t<semantic:DetailPage busy=\"{detailView>/busy}\" busyIndicatorDelay=\"{detailView>/delay}\" id=\"page\" navButtonPress=\"onNavBack\"\n\t\tshowNavButton=\"{device>/system/phone}\" title=\"{path: 'description', formatter: '.formatter.detailTitle'}\">\n\t\t<semantic:content>\n\t\t\t<IconTabBar class=\"sapUiResponsiveContentPadding\" id=\"itbDetails\" stretchContentHeight=\"true\">\n\t\t\t\t<items>\n\t\t\t\t\t<IconTabFilter icon=\"sap-icon://hint\" tooltip=\"{i18n>detailIconTabBarInfo}\" >\n\t\t\t\t\t\t<ScrollContainer vertical=\"true\" horizontal=\"false\" height=\"100%\" width=\"100%\">\n\t\t\t\t\t\t\t<core:Fragment fragmentName=\"diploma.admin.transport.view.DetailFormDisplay\" type=\"XML\" />\n\t\t\t\t\t\t\t<core:Fragment fragmentName=\"diploma.admin.transport.view.DetailFormChange\" type=\"XML\" />\n\t\t\t\t\t\t</ScrollContainer>\n\t\t\t\t\t</IconTabFilter>\n\t\t\t\t\t<IconTabFilter icon=\"sap-icon://ipad-2\" tooltip=\"{i18n>detailIconTabDevices}\" visible=\"{= !${global>/edit} }\">\n\t\t\t\t\t\t<ScrollContainer vertical=\"true\" horizontal=\"false\" height=\"100%\" width=\"100%\">\n\t\t\t\t\t\t\t<Table busyIndicatorDelay=\"{detailView>/lineItemTableDelay}\" class=\"sapUiResponsiveMargin\" id=\"lineItemsList\" \n\t\t\t\t\t\t\t\titems=\"{Devices}\" noDataText=\"{i18n>detailLineItemTableNoDataText}\" updateFinished=\"onListUpdateFinished\"\n\t\t\t\t\t\t\t\twidth=\"auto\" >\n\t\t\t\t\t\t\t\t<headerToolbar>\n\t\t\t\t\t\t\t\t\t<Toolbar id=\"lineItemsToolbar\">\n\t\t\t\t\t\t\t\t\t\t<Title id=\"lineItemsHeader\" text=\"{detailView>/lineItemListTitle}\"/>\n\t\t\t\t\t\t\t\t\t</Toolbar>\n\t\t\t\t\t\t\t\t</headerToolbar>\n\t\t\t\t\t\t\t\t<columns>\n\t\t\t\t\t\t\t\t\t<Column>\n\t\t\t\t\t\t\t\t\t\t<Text text=\"{i18n>detailLineItemTableIDColumn}\"/>\n\t\t\t\t\t\t\t\t\t</Column>\n\t\t\t\t\t\t\t\t\t<Column demandPopin=\"true\" hAlign=\"Right\" minScreenWidth=\"Tablet\"></Column>\n\t\t\t\t\t\t\t\t</columns>\n\t\t\t\t\t\t\t\t<items>\n\t\t\t\t\t\t\t\t\t<ColumnListItem type=\"Navigation\" press=\"navigateToDevice\">\n\t\t\t\t\t\t\t\t\t\t<cells>\n\t\t\t\t\t\t\t\t\t\t\t<ObjectIdentifier text=\"{description}\" title=\"{name}\"/>\n\t\t\t\t\t\t\t\t\t\t\t<Text />\n\t\t\t\t\t\t\t\t\t\t</cells>\n\t\t\t\t\t\t\t\t\t</ColumnListItem>\n\t\t\t\t\t\t\t\t</items>\n\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t</ScrollContainer>\n\t\t\t\t\t</IconTabFilter>\n\t\t\t\t\t<IconTabFilter icon=\"sap-icon://measure\" tooltip=\"{i18n>detailIconTabBarLimits}\" visible=\"{= !${global>/isNew} }\">\n\t\t\t\t\t\t<ScrollContainer vertical=\"true\" horizontal=\"false\" height=\"100%\" width=\"100%\">\n\t\t\t\t\t\t\t<List mode=\"{= ${global>/edit} ? 'Delete' : 'None' }\" delete=\"deleteLimit\"\n\t\t\t\t\t\t\t\titems=\"{path: 'Limits', parameters: {expand: 'Measure'}}\">\n\t\t\t\t\t\t\t\t<headerToolbar>\n\t\t\t\t\t\t\t\t\t<Toolbar>\n\t\t\t\t\t\t\t\t\t\t<Title text=\"{i18n>limitListTitle}\" />\n\t\t\t\t\t\t\t\t\t\t<ToolbarSpacer />\n\t\t\t\t\t\t\t\t\t\t<Button icon=\"sap-icon://add\" press=\"openLimitDialog\" visible=\"{global>/edit}\"/>\n\t\t\t\t\t\t\t\t\t</Toolbar>\n\t\t\t\t\t\t\t\t</headerToolbar>\n\t\t\t\t\t\t\t\t<items>\n\t\t\t\t\t\t\t\t\t<DisplayListItem value=\"{\n\t\t\t\t\t\t\t\t\t\tparts: ['lowerBound', 'upperBound', 'Measure/unit'],\n\t\t\t\t\t\t\t\t\t\tformatter: '.formatter.limitLabel'\n\t\t\t\t\t\t\t\t\t}\" label=\"{Measure/name}\" />\n\t\t\t\t\t\t\t\t</items>\n\t\t\t\t\t\t\t</List>\n\t\t\t\t\t\t</ScrollContainer>\n\t\t\t\t\t</IconTabFilter>\n\t\t\t\t\t<IconTabFilter icon=\"sap-icon://group\" tooltip=\"{i18n>detailIconTabBarPeople}\" visible=\"{= !${global>/isNew} }\">\n\t\t\t\t\t    <ScrollContainer vertical=\"true\" horizontal=\"false\" height=\"100%\" width=\"100%\">\n\t\t\t\t\t\t\t<List mode=\"{= ${global>/edit} ? 'Delete' : 'None' }\" delete=\"onPersonDelete\"\n\t\t\t\t\t\t\t\titems=\"{path: 'Involvements', parameters: {expand: 'Person,Role,Person/Organization'}}\">\n\t\t\t\t\t\t\t\t<headerToolbar>\n\t\t\t\t\t\t\t\t\t<Toolbar>\n\t\t\t\t\t\t\t\t\t\t<Title text=\"{i18n>personListTitle}\" />\n\t\t\t\t\t\t\t\t\t\t<ToolbarSpacer />\n\t\t\t\t\t\t\t\t\t\t<Button icon=\"sap-icon://add\" press=\"openPersonVhd\" visible=\"{global>/edit}\"/>\n\t\t\t\t\t\t\t\t\t</Toolbar>\n\t\t\t\t\t\t\t\t</headerToolbar>\n\t\t\t\t\t\t\t\t<items>\n\t\t\t\t\t\t\t\t    <ObjectListItem title=\"{Person/name}\" number=\"{Role/name}\" >\n\t\t\t\t\t\t\t\t        <attributes>\n\t\t\t\t\t\t\t\t            <ObjectAttribute active=\"true\" \n\t\t\t\t\t\t\t\t                press=\"onSendEmail\"\n\t\t\t\t\t\t\t\t                title=\"{i18n>personEmail}\" \n\t\t\t\t\t\t\t\t                text=\"{Person/email}\" />\n\t\t\t\t\t\t\t\t            <ObjectAttribute active=\"true\"\n\t\t\t\t\t\t\t\t                press=\"navigateToOrganization\"\n\t\t\t\t\t\t\t\t                title=\"{i18n>personOrganization}\" \n\t\t\t\t\t\t\t\t                text=\"{Person/Organization/name}\" />\n\t\t\t\t\t\t\t\t        </attributes>\n\t\t\t\t\t\t\t\t        <firstStatus>\n\t\t\t\t\t\t\t\t            <ObjectStatus state=\"{= ${Role/contact} === 0 ? 'Error' : 'Success' }\"\n\t\t\t\t\t\t\t\t                text=\"{= ${Role/contact} === 0 ? ${i18n>notifOff} : ${i18n>notifOn} }\"/>\n\t\t\t\t\t\t\t\t        </firstStatus>\n\t\t\t\t\t\t\t\t    </ObjectListItem>\n\t\t\t\t\t\t\t\t</items>\n\t\t\t\t\t\t\t</List>\n\t\t\t\t\t\t</ScrollContainer>\n\t\t\t\t\t</IconTabFilter>\n\t\t\t\t</items>\n\t\t\t</IconTabBar>\n\t\t</semantic:content>\n\t\t\n\t\t<semantic:dependents>\n\t\t    <core:Fragment fragmentName=\"diploma.admin.transport.view.AddLimitDialog\" type=\"XML\" />\n\t\t    <core:Fragment fragmentName=\"diploma.admin.transport.view.PersonValueHelp\" type=\"XML\" />\n\t\t</semantic:dependents>\n\t\t\n\t\t<semantic:customFooterContent>\n\t\t\t<OverflowToolbarButton \n\t\t\t    visible=\"{= !${global>/edit} }\" \n\t\t\t    icon=\"sap-icon://delete\" \n\t\t\t    text=\"{i18n>btnRemove}\" \n\t\t\t    tooltip=\"{i18n>btnRemove}\" \n\t\t\t    press=\"onDelete\"/>\n\t\t\t<OverflowToolbarButton \n\t\t\t    visible=\"{= !${global>/edit} }\" \n\t\t\t    icon=\"sap-icon://edit\" \n\t\t\t    text=\"{i18n>btnEdit}\" \n\t\t\t    tooltip=\"{i18n>btnEdit}\" \n\t\t\t    press=\"onEdit\"/>\n\t\t\t<OverflowToolbarButton \n\t\t\t    visible=\"{= ${global>/edit} &amp;&amp; !${global>/isNew} }\"  \n\t\t\t    icon=\"sap-icon://display\" \n\t\t\t    text=\"{i18n>btnDisplay}\" \n\t\t\t    tooltip=\"{i18n>btnDisplay}\" \n\t\t\t    press=\"onDisplay\"/>\n\t\t\t<OverflowToolbarButton \n\t\t\t    visible=\"{global>/isNew}\" \n\t\t\t    icon=\"sap-icon://decline\" \n\t\t\t    text=\"{i18n>btnCancel}\" \n\t\t\t    tooltip=\"{i18n>btnCancel}\" \n\t\t\t    press=\"onCreateCancel\" />\n\t\t\t<OverflowToolbarButton \n\t\t\t    visible=\"{global>/isNew}\" \n\t\t\t    icon=\"sap-icon://save\" \n\t\t\t    text=\"{i18n>btnSave}\" \n\t\t\t    press=\"onCreateCommit\" />\n\t\t</semantic:customFooterContent>\n\t</semantic:DetailPage>\n</mvc:View>",
		"diploma/admin/transport/view/DetailNoObjectsAvailable.view.xml": "<mvc:View\r\n\t\tcontrollerName=\"diploma.admin.transport.controller.BaseController\"\r\n\t\txmlns:mvc=\"sap.ui.core.mvc\"\r\n\t\txmlns=\"sap.m\">\r\n\r\n\t<MessagePage\r\n\t\t\tid=\"page\"\r\n\t\t\ttitle=\"{i18n>notAvailableViewTitle}\"\r\n\t\t\ttext=\"{i18n>noObjectsAvailableText}\"\r\n\t\t\ticon=\"{sap-icon://product}\"\r\n\t\t\tdescription=\"\"\r\n\t\t\tshowNavButton=\"{device>/system/phone}\"\r\n\t\t\tnavButtonPress=\"onNavBack\">\r\n\t</MessagePage>\r\n\r\n</mvc:View>",
		"diploma/admin/transport/view/DetailObjectNotFound.view.xml": "<mvc:View\r\n\t\tcontrollerName=\"diploma.admin.transport.controller.BaseController\"\r\n\t\txmlns:mvc=\"sap.ui.core.mvc\"\r\n\t\txmlns=\"sap.m\">\r\n\r\n\t<MessagePage\r\n\t\t\tid=\"page\"\r\n\t\t\ttitle=\"{i18n>detailTitle}\"\r\n\t\t\ttext=\"{i18n>noObjectFoundText}\"\r\n\t\t\ticon=\"{sap-icon://product}\"\r\n\t\t\tdescription=\"\"\r\n\t\t\tshowNavButton=\"{device>/system/phone}\"\r\n\t\t\tnavButtonPress=\"onNavBack\">\r\n\t</MessagePage>\r\n\r\n</mvc:View>",
		"diploma/admin/transport/view/Master.view.xml": "<mvc:View\r\n\t\tcontrollerName=\"diploma.admin.transport.controller.Master\"\r\n\t\txmlns:mvc=\"sap.ui.core.mvc\"\r\n\t\txmlns:core=\"sap.ui.core\"\r\n\t\txmlns=\"sap.m\"\r\n\t\txmlns:semantic=\"sap.m.semantic\"\r\n\t\txmlns:u=\"sap.ui.unified\">\r\n\r\n\t<semantic:MasterPage\r\n\t\t\tid=\"page\"\r\n\t\t\ttitle=\"{masterView>/title}\"\r\n\t\t\tnavButtonPress=\"onNavBack\"\r\n\t\t\tshowNavButton=\"true\">\r\n\t\t<semantic:subHeader>\r\n\t\t\t<Bar id=\"headerBar\">\r\n\t\t\t\t<contentMiddle>\r\n\t\t\t\t\t<SearchField\r\n\t\t\t\t\t\t\tid=\"searchField\"\r\n\t\t\t\t\t\t\tshowRefreshButton=\"{= !${device>/support/touch} }\"\r\n\t\t\t\t\t\t\ttooltip=\"{i18n>masterSearchTooltip}\"\r\n\t\t\t\t\t\t\twidth=\"100%\"\r\n\t\t\t\t\t\t\tsearch=\"onSearch\">\r\n\t\t\t\t\t</SearchField>\r\n\t\t\t\t</contentMiddle>\r\n\t\t\t</Bar>\r\n\t\t</semantic:subHeader>\r\n\r\n\t\t<semantic:content>\r\n\t\t\t<PullToRefresh\r\n\t\t\t\t\tid=\"pullToRefresh\"\r\n\t\t\t\t\tvisible=\"{device>/support/touch}\"\r\n\t\t\t\t\trefresh=\"onRefresh\" />\r\n\t\t\t<!-- For client side filtering add this to the items attribute:  parameters: {operationMode: 'Client'}}\" -->\r\n\t\t\t<List\t\r\n\t\t\t\t\tid=\"list\"\r\n\t\t\t\t\titems=\"{\r\n\t\t\t\t\t\tpath: '/Transports',\r\n\t\t\t\t\t\tsorter: {\r\n\t\t\t\t\t\t\tpath: 'description',\r\n\t\t\t\t\t\t\tdescending: false\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\tgroupHeaderFactory: '.createGroupHeader'\r\n\t\t\t\t\t}\"\r\n\t\t\t\t\tbusyIndicatorDelay=\"{masterView>/delay}\"\r\n\t\t\t\t\tnoDataText=\"{masterView>/noDataText}\"\r\n\t\t\t\t\tmode=\"{= ${device>/system/phone} ? 'None' : 'SingleSelectMaster'}\"\r\n\t\t\t\t\tgrowing=\"true\"\r\n\t\t\t\t\tgrowingScrollToLoad=\"true\"\r\n\t\t\t\t\tupdateFinished=\"onUpdateFinished\"\r\n\t\t\t\t\tselectionChange=\"onSelectionChange\">\r\n\t\t\t\t<infoToolbar>\r\n\t\t\t\t\t<Toolbar\r\n\t\t\t\t\t\t\tactive=\"true\"\r\n\t\t\t\t\t\t\tid=\"filterBar\"\r\n\t\t\t\t\t\t\tvisible=\"{masterView>/isFilterBarVisible}\"\r\n\t\t\t\t\t\t\tpress=\"onOpenViewSettings\">\r\n\t\t\t\t\t\t<Title\r\n\t\t\t\t\t\t\t\tid=\"filterBarLabel\"\r\n\t\t\t\t\t\t\t\ttext=\"{masterView>/filterBarLabel}\" />\r\n\t\t\t\t\t</Toolbar>\r\n\t\t\t\t</infoToolbar>\r\n\t\t\t\t<items>\r\n\t\t\t\t\t<ObjectListItem\r\n\t\t\t\t\t\ttype=\"{= ${device>/system/phone} ? 'Active' : 'Inactive'}\"\r\n\t\t\t\t\t\tpress=\"onSelectionChange\"\r\n\t\t\t\t\t\ttitle=\"{description}\" >\r\n\t\t\t\t\t    <firstStatus>\r\n\t\t\t\t\t        <ObjectStatus text=\"{= \r\n\t\t\t\t                ${lastLocation} === null ? ${i18n>statusNotStarted} :\r\n\t\t\t\t\t            ( ${done} === 0 ? ${i18n>statusInProgress} : ${i18n>statusDone} ) }\" \r\n\t\t\t\t\t            state=\"{= ${lastLocation} === null ? 'None' :\r\n\t\t\t\t\t            ( ${done} === 0 ? 'Warning' : 'Success' ) }\"/>\r\n\t\t\t\t\t    </firstStatus>\r\n\t\t\t\t\t</ObjectListItem>\r\n\t\t\t\t</items>\r\n\t\t\t</List>\r\n\t\t\t\r\n\t\t</semantic:content>\r\n\t\t<semantic:customFooterContent>\r\n\t\t\t<Button icon=\"sap-icon://create\" text=\"{i18n>btnCreate}\" visible=\"{= !${global>/edit} }\" press=\"onCreate\"/>\r\n\t\t</semantic:customFooterContent>\r\n\r\n\t</semantic:MasterPage>\r\n\r\n</mvc:View>",
		"diploma/admin/transport/view/NotFound.view.xml": "<mvc:View\r\n\t\tcontrollerName=\"diploma.admin.transport.controller.BaseController\"\r\n\t\txmlns:mvc=\"sap.ui.core.mvc\"\r\n\t\txmlns=\"sap.m\">\r\n\r\n\t<MessagePage\r\n\t\t\tid=\"page\"\r\n\t\t\ttitle=\"{i18n>notFoundTitle}\"\r\n\t\t\ttext=\"{i18n>notFoundText}\"\r\n\t\t\ticon=\"{sap-icon://document}\"\r\n\t\t\tdescription=\"\"\r\n\t\t\tshowNavButton=\"{device>/system/phone}\"\r\n\t\t\tnavButtonPress=\"onNavBack\">\r\n\t</MessagePage>\r\n\r\n</mvc:View>",
		"diploma/admin/transport/view/ViewSettingsDialog.fragment.xml": "<core:FragmentDefinition\r\n\t\txmlns=\"sap.m\"\r\n\t\txmlns:core=\"sap.ui.core\">\r\n\r\n\t<ViewSettingsDialog\r\n\t\t\tid=\"viewSettingsDialog\"\r\n\t\t\tconfirm=\"onConfirmViewSettingsDialog\"\r\n\t\t\tresetFilters=\"onViewSettingsDialogResetFilters\">\r\n\t\t<filterItems>\r\n\t\t\t<ViewSettingsFilterItem\r\n\t\t\t\t\tid=\"filterItems\"\r\n\t\t\t\t\ttext=\"{i18n>masterFilterName}\"\r\n\t\t\t\t\tkey=\"Price\"\r\n\t\t\t\t\tmultiSelect=\"false\">\r\n\t\t\t\t<items>\r\n\t\t\t\t\t<ViewSettingsItem\r\n\t\t\t\t\t\t\ttext=\"{i18n>masterFilter1}\"\r\n\t\t\t\t\t\t\tkey=\"Filter1\"\r\n\t\t\t\t\t\t\tid=\"viewFilter1\"/>\r\n\t\t\t\t\t<ViewSettingsItem\r\n\t\t\t\t\t\t\ttext=\"{i18n>masterFilter2}\"\r\n\t\t\t\t\t\t\tkey=\"Filter2\"\r\n\t\t\t\t\t\t\tid=\"viewFilter2\"/>\r\n\t\t\t\t</items>\r\n\t\t\t</ViewSettingsFilterItem>\r\n\t\t</filterItems>\r\n\t</ViewSettingsDialog>\r\n\r\n</core:FragmentDefinition>",
		"diploma/admin/transport/view/AddLimitDialog.fragment.xml": "<core:FragmentDefinition\n\txmlns=\"sap.m\"\n\txmlns:core=\"sap.ui.core\">\n\t<Dialog title=\"{i18n>limitTitle}\" id=\"dialogLimit\" contentWidth=\"20rem\" contentHeight=\"20em\" stretch=\"{device>/system/phone}\" >\n\t\t<content><Panel>\n\t\t\t<Label text=\"{i18n>measure}\"/>\n\t\t\t<Select width=\"100%\" selectedKey=\"{detailView>/limit/measure}\" items=\"{/Measures}\">\n\t\t\t\t<core:Item key=\"{id}\" text=\"{\n\t\t\t\t\tparts: [{path: 'i18n>measureName'}, {path: 'name'}, {path: 'unit'}], \n\t\t\t\t\tformatter: '.formatter.measureText'\n\t\t\t\t}\"/>\n\t\t\t</Select>\n\t\t\t<Label text=\"{i18n>limitType}\"/>\n\t\t\t<Select width=\"100%\" selectedKey=\"{detailView>/limit/type}\" items=\"{detailView>/limitTypes}\">\n\t\t\t\t<core:Item key=\"{detailView>key}\" text=\"{detailView>name}\"/>\n\t\t\t</Select>\n\t\t\t<Label text=\"{i18n>lowerBound}\" visible=\"{= ${detailView>/limit/type} !== '0' }\"/>\n\t\t\t<Input type=\"Number\" value=\"{detailView>/limit/lower}\" visible=\"{= ${detailView>/limit/type} !== '0' }\"/>\n\t\t\t<Label text=\"{i18n>upperBound}\" visible=\"{= ${detailView>/limit/type} !== '1' }\"/>\n\t\t\t<Input type=\"Number\" value=\"{detailView>/limit/upper}\" visible=\"{= ${detailView>/limit/type} !== '1' }\"/>\n\t\t</Panel></content>\n\t\t<beginButton><Button text=\"{i18n>create}\" press=\"onNewLimit\"/></beginButton>\n\t\t<endButton><Button text=\"{i18n>cancel}\" press=\"closeLimitDialog\"/></endButton>\n\t</Dialog>\n</core:FragmentDefinition>",
		"diploma/admin/transport/view/DetailFormDisplay.fragment.xml": "<core:FragmentDefinition\r\n\txmlns=\"sap.m\"\r\n\txmlns:form=\"sap.ui.layout.form\"\r\n\txmlns:core=\"sap.ui.core\">\r\n    <form:SimpleForm layout=\"ResponsiveGridLayout\" maxContainerCols=\"2\"\r\n\t\tlabelSpanL=\"3\" labelSpanM=\"3\" emptySpanL=\"2\" emptySpanM=\"2\" \r\n\t\tcolumnsL=\"1\" columnsM=\"1\" visible=\"{= !${global>/edit} }\">\r\n\t    <form:toolbar>\r\n\t        <Toolbar>\r\n\t            <Title text=\"{i18n>transHeader}\" />\r\n\t            <ToolbarSpacer />\r\n    \t\t\t<Button visible=\"{= ${global>/edit} &amp;&amp; !${global>/isNew} }\" \r\n    \t\t\t    icon=\"sap-icon://undo\" \r\n    \t\t\t    tooltip=\"{i18n>undoButtonTooltip}\" \r\n    \t\t\t    press=\"onUndo\" />\r\n    \t\t\t<Button visible=\"{= ${global>/edit} &amp;&amp; !${global>/isNew} }\" \r\n    \t\t\t    icon=\"sap-icon://save\" \r\n    \t\t\t    tooltip=\"{i18n>saveButtonTooltip}\" \r\n    \t\t\t    press=\"onUpdateCommit\" />\r\n\t        </Toolbar>\r\n\t    </form:toolbar>\r\n\t    \r\n\t\t<Label text=\"{i18n>transDesc}\"/>\r\n\t\t<Text text=\"{description}\"/>\r\n\t\t    \r\n\t\t<Label text=\"{i18n>transWhen}\" />\r\n\t\t<Text text=\"{\r\n\t\t        path: 'tWhen', \r\n\t\t        type: 'sap.ui.model.type.DateTime',\r\n\t\t        format: {style: 'short'}\r\n\t\t    }\"/>\r\n\t\t    \r\n\t\t<Label text=\"{i18n>transRoute}\" />\r\n\t\t<Text text=\"{Route/name}\"/>\r\n\t\t    \r\n\t\t<Label text=\"{i18n>returning}\" />\r\n\t\t<Text text=\"{= ${returning} === 0 ? ${i18n>booleanNo} : ${i18n>booleanYes} }\" />\r\n\t\t    \r\n\t\t<Label text=\"{i18n>transSchedule}\"/>\r\n\t\t<Text text=\"{Schedule/name}\"/>\r\n\t\t    \r\n\t\t<Label text=\"{i18n>statusLabel}\" />\r\n        <ObjectStatus text=\"{= \r\n            ${lastLocation} === null ? ${i18n>statusNotStarted} :\r\n            ( ${done} === 0 ? ${i18n>statusInProgress} : ${i18n>statusDone} ) }\" \r\n            state=\"{= ${lastLocation} === null ? 'None' :\r\n            ( ${done} === 0 ? 'Warning' : 'Success' ) }\"/>\r\n\t</form:SimpleForm>\r\n</core:FragmentDefinition>",
		"diploma/admin/transport/view/DetailFormChange.fragment.xml": "<core:FragmentDefinition\r\n\txmlns=\"sap.m\"\r\n\txmlns:form=\"sap.ui.layout.form\"\r\n\txmlns:core=\"sap.ui.core\">\r\n    <form:SimpleForm editable=\"true\" layout=\"ResponsiveGridLayout\" \r\n\t\tclass=\"editableForm\" maxContainerCols=\"2\" visible=\"{global>/edit}\"\r\n\t\tlabelSpanL=\"3\" labelSpanM=\"3\" emptySpanL=\"2\" emptySpanM=\"2\" \r\n\t\tcolumnsL=\"1\" columnsM=\"1\">\r\n\t    <form:toolbar>\r\n\t        <Toolbar>\r\n\t            <Title text=\"{i18n>transHeader}\" />\r\n\t            <ToolbarSpacer />\r\n    \t\t\t<Button visible=\"{= !${global>/isNew} }\" \r\n    \t\t\t    icon=\"sap-icon://undo\" \r\n    \t\t\t    tooltip=\"{i18n>undoButtonTooltip}\" \r\n    \t\t\t    press=\"onUndo\" />\r\n    \t\t\t<Button visible=\"{= !${global>/isNew} }\" \r\n    \t\t\t    icon=\"sap-icon://save\" \r\n    \t\t\t    tooltip=\"{i18n>saveButtonTooltip}\" \r\n    \t\t\t    press=\"onUpdateCommit\" />\r\n\t        </Toolbar>\r\n\t    </form:toolbar>\r\n\t    \r\n\t\t<Label text=\"{i18n>transDesc}\"/>\r\n\t\t<Input value=\"{description}\" width=\"100%\" id=\"transDesc\"/>\r\n\t\t    \r\n\t\t<Label text=\"{i18n>transWhen}\" />\r\n\t\t<HBox width=\"100%\">\r\n\t\t\t<DatePicker id=\"transWhenDate\"  dateValue=\"{tWhen}\">\r\n\t\t\t\t<layoutData>\r\n\t\t\t\t\t<FlexItemData growFactor=\"1\" />\r\n\t\t\t\t</layoutData>\r\n\t\t\t</DatePicker>\r\n\t\t\t<TimePicker id=\"transWhenTime\" dateValue=\"{tWhen}\" width=\"100%\" >\r\n\t\t\t\t<layoutData>\r\n\t\t\t\t\t<FlexItemData growFactor=\"1\" />\r\n\t\t\t\t</layoutData>\r\n\t\t\t</TimePicker>\r\n\t\t</HBox>\r\n\t\t\r\n\t\t<Label text=\"{i18n>transRoute}\" />\r\n\t\t<Select items=\"{path: '/Routes', sorter: { path: 'name', descending: false } }\" \r\n\t\t\tselectedKey=\"{route}\" width=\"100%\" id=\"transRoute\" change=\"onRouteChange\">\r\n\t\t\t<core:Item key=\"{id}\" text=\"{name}\"/>\r\n\t\t</Select>\r\n\t\t\r\n\t\t<Label text=\"{i18n>returning}\" />\r\n\t\t<CheckBox id=\"transReturning\" selected=\"{= ${returning} !== 0 }\" />\r\n\t\t    \r\n\t\t<Label text=\"{i18n>transSchedule}\"/>\r\n\t\t<Select visible=\"{global>/edit}\" items=\"{path: 'Schedules', sorter: { path: 'name', descending: false } }\" \r\n\t\t\tselectedKey=\"{schedule}\" width=\"100%\" id=\"transSchedule\">\r\n\t\t\t<core:Item key=\"{id}\" text=\"{name}\"/>\r\n\t\t</Select>\r\n\t</form:SimpleForm>\r\n</core:FragmentDefinition>",
		"diploma/admin/transport/view/PersonValueHelp.fragment.xml": "<core:FragmentDefinition \n    xmlns:core=\"sap.ui.core\" \n    xmlns:form=\"sap.ui.layout.form\"\n    xmlns=\"sap.m\">\n\t<Dialog id=\"vhdPerson\"\n\t    contentHeight=\"75%\"\n\t\tcontentWidth=\"30rem\" \n\t\tstretch=\"{device>/system/phone}\"\n\t    title=\"{i18n>vhdPersonTitle}\" >\n\t    <VBox>\n\t        <HBox class=\"sapUiTinyMargin\" fitContainer=\"true\">\n\t            <Input id=\"inpSelectedPerson\" \n\t                enabled=\"false\" \n\t                width=\"100%\" \n\t                value=\"{detailView>/person/name}\">\n\t\t\t\t\t<layoutData>\n\t\t\t\t\t\t<FlexItemData growFactor=\"1\" />\n\t\t\t\t\t</layoutData>\n\t            </Input>\n\t            <Select id=\"selSelectedRole\" \n\t                width=\"100%\" \n\t                selectedKey=\"{detailView>/person/role}\"\n\t                items=\"{path: '/Roles', sorter: {path: 'name'}}\">\n\t                <core:Item text=\"{name}\" key=\"{id}\" />\n\t\t\t\t\t<layoutData>\n\t\t\t\t\t\t<FlexItemData growFactor=\"1\" />\n\t\t\t\t\t</layoutData>\n\t            </Select>\n\t        </HBox>\n\t        <Toolbar id=\"tlbPersonMainSearch\">\n\t            <SearchField id=\"seaPersonNameSearch\" \n\t                placeholder=\"{i18n>searchByName}\"\n\t                search=\"onSearchPersonMain\"/>\n\t            <ToolbarSpacer/>\n\t            <Button type=\"Transparent\"\n\t                text=\"{= ${detailView>/person/advanced} ? ${i18n>hideAdvanced} : ${i18n>showAdvanced} }\"\n\t                press=\"onTogglePersonAdvancedSearch\"/>\n\t        </Toolbar>\n\t        <Panel visible=\"{detailView>/person/advanced}\" class=\"sapUiNoContentPadding\">\n\t            <form:SimpleForm id=\"sfmAdvancedPerson\"\n        \t\t\tmaxContainerCols=\"2\"\n        \t\t\teditable=\"true\"\n        \t\t\tlayout=\"ResponsiveGridLayout\"\n        \t\t\tlabelSpanL=\"4\"\n        \t\t\tlabelSpanM=\"4\"\n        \t\t\temptySpanL=\"0\"\n        \t\t\temptySpanM=\"0\"\n        \t\t\tcolumnsL=\"2\"\n        \t\t\tcolumnsM=\"2\"\n        \t\t\tclass=\"editableForm\">\n        \t\t\t<form:content>\n        \t\t\t    <Label text=\"{i18n>personOrganization}\"/>\n\t                    <SearchField id=\"seaPersonOrganizationSearch\" search=\"onSearchPersonMain\"/>\n        \t\t\t    <Label text=\"{i18n>personEmail}\"/>\n\t                    <SearchField id=\"seaPersonEmailSearch\" search=\"onSearchPersonMain\"/>\n    \t\t\t    </form:content>\n    \t\t    </form:SimpleForm>\n\t        </Panel>\n\t        <Table id=\"tblPersonSearchMain\"\n\t            growing=\"true\"\n\t            items=\"{path: '/Persons', sorter: {path: 'name'}, parameters: {expand: 'Organization,DefaultRole'}}\">\n\t            <columns>\n\t                <Column><Label text=\"{i18n>personName}\"/></Column>\n\t                <Column><Label text=\"{i18n>personOrganization}\"/></Column>\n\t                <Column><Label text=\"{i18n>personDefaultRole}\"/></Column>\n\t            </columns>\n\t            <items>\n\t                <ColumnListItem type=\"Active\" press=\"onPersonSelected\">\n\t                    <cells>\n\t                        <Text text=\"{name}\"/>\n\t                        <Text text=\"{Organization/name}\"/>\n\t                        <Text text=\"{DefaultRole/name}\"/>\n\t                    </cells>\n\t                </ColumnListItem>\n\t            </items>\n\t        </Table>\n\t    </VBox>\n\t    <beginButton>\n\t        <Button id=\"btnConfirmPerson\" \n\t            enabled=\"{= ${detailView>/person/role} !== '' &amp;&amp; ${detailView>/person/id} !== '' }\" \n\t            text=\"{i18n>confirm}\" \n\t            press=\"onPersonVhdConfirm\"/>\n\t    </beginButton>\n\t    <endButton>\n\t        <Button text=\"{i18n>cancel}\" press=\"onPersonVhdClose\"/>\n\t    </endButton>\n\t</Dialog>\n</core:FragmentDefinition>",
		"diploma/admin/transport/Component.js": "sap.ui.define([\r\n\t\t\"sap/ui/core/UIComponent\",\r\n\t\t\"sap/ui/Device\",\r\n\t\t\"diploma/admin/transport/model/models\",\r\n\t\t\"diploma/admin/transport/controller/ListSelector\",\r\n\t\t\"diploma/admin/transport/controller/ErrorHandler\"\r\n\t], function (UIComponent, Device, models, ListSelector, ErrorHandler) {\r\n\t\t\"use strict\";\r\n\r\n\t\treturn UIComponent.extend(\"diploma.admin.transport.Component\", {\r\n\r\n\t\t\tmetadata : {\r\n\t\t\t\tmanifest : \"json\"\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * The component is initialized by UI5 automatically during the startup of the app and calls the init method once.\r\n\t\t\t * In this method, the FLP and device models are set and the router is initialized.\r\n\t\t\t * @public\r\n\t\t\t * @override\r\n\t\t\t */\r\n\t\t\tinit : function () {\r\n\t\t\t\tthis.oListSelector = new ListSelector();\r\n\t\t\t\tthis._oErrorHandler = new ErrorHandler(this);\r\n\t\t\t\r\n\t\t\t\t// set the device model\r\n\t\t\t\tthis.setModel(models.createDeviceModel(), \"device\");\r\n\t\t\t\t// set the FLP model\r\n\t\t\t\tthis.setModel(models.createFLPModel(), \"FLP\");\r\n\t\t\t\t// set the global model\r\n\t\t\t\tthis.setModel(models.createGlobalModel(), \"global\");\r\n\r\n\t\t\t\t// call the base component's init function and create the App view\r\n\t\t\t\tUIComponent.prototype.init.apply(this, arguments);\r\n\t\t\t\tthis.getModel().setSizeLimit(500);\r\n\t\t\t\t// create the views based on the url/hash\r\n\t\t\t\tthis.getRouter().initialize();\r\n\t\t\t},\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * The component is destroyed by UI5 automatically.\r\n\t\t\t * In this method, the ListSelector and ErrorHandler are destroyed.\r\n\t\t\t * @public\r\n\t\t\t * @override\r\n\t\t\t */\r\n\t\t\tdestroy : function () {\r\n\t\t\t\tthis.oListSelector.destroy();\r\n\t\t\t\tthis._oErrorHandler.destroy();\r\n\t\t\t\t// call the base component's destroy function\r\n\t\t\t\tUIComponent.prototype.destroy.apply(this, arguments);\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * This method can be called to determine whether the sapUiSizeCompact or sapUiSizeCozy\r\n\t\t\t * design mode class should be set, which influences the size appearance of some controls.\r\n\t\t\t * @public\r\n\t\t\t * @return {string} css class, either 'sapUiSizeCompact' or 'sapUiSizeCozy' - or an empty string if no css class should be set\r\n\t\t\t */\r\n\t\t\tgetContentDensityClass : function() {\r\n\t\t\t\tif (this._sContentDensityClass === undefined) {\r\n\t\t\t\t\t// check whether FLP has already set the content density class; do nothing in this case\r\n\t\t\t\t\tif (jQuery(document.body).hasClass(\"sapUiSizeCozy\") || jQuery(document.body).hasClass(\"sapUiSizeCompact\")) {\r\n\t\t\t\t\t\tthis._sContentDensityClass = \"\";\r\n\t\t\t\t\t} else if (!Device.support.touch) { // apply \"compact\" mode if touch is not supported\r\n\t\t\t\t\t\tthis._sContentDensityClass = \"sapUiSizeCompact\";\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// \"cozy\" in case of touch support; default for most sap.m controls, but needed for desktop-first controls like sap.ui.table.Table\r\n\t\t\t\t\t\tthis._sContentDensityClass = \"sapUiSizeCozy\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn this._sContentDensityClass;\r\n\t\t\t}\r\n\r\n\t\t});\r\n\r\n\t}\r\n);"
	}
});