/**
* This file was auto-generated by SAP Web IDE build and includes all
* the source files required by SAPUI5 runtime for performance optimization.
* PLEASE DO NOT EDIT THIS FILE!! Changes will be overwritten the next time the build is run.
*/
jQuery.sap.registerPreloadedModules({
	"version": "2.0",
	"name": "diploma/admin/sensor/Component-preload",
	"modules": {
		"diploma/admin/sensor/Component.js": "sap.ui.define([\n\t\"sap/ui/core/UIComponent\",\n\t\"sap/ui/Device\",\n\t\"diploma/admin/sensor/model/models\",\n\t\"diploma/admin/sensor/controller/ListSelector\",\n\t\"diploma/admin/sensor/controller/ErrorHandler\"\n], function(UIComponent, Device, models, ListSelector, ErrorHandler) {\n\t\"use strict\";\n\n\treturn UIComponent.extend(\"diploma.admin.sensor.Component\", {\n\n\t\tmetadata: {\n\t\t\tmanifest: \"json\"\n\t\t},\n\n\t\t/**\n\t\t * The component is initialized by UI5 automatically during the startup of the app and calls the init method once.\n\t\t * In this method, the FLP and device models are set and the router is initialized.\n\t\t * @public\n\t\t * @override\n\t\t */\n\t\tinit: function() {\n\t\t\tthis.oListSelector = new ListSelector();\n\t\t\tthis._oErrorHandler = new ErrorHandler(this);\n\n\t\t\t// set the device model\n\t\t\tthis.setModel(models.createDeviceModel(), \"device\");\n\t\t\t// set the FLP model\n\t\t\tthis.setModel(models.createFLPModel(), \"FLP\");\n\t\t\t\n\t\t\tthis.setModel(models.createGlobalModel(), \"global\");\n\n\t\t\t// call the base component's init function and create the App view\n\t\t\tUIComponent.prototype.init.apply(this, arguments);\n\n\t\t\t// create the views based on the url/hash\n\t\t\tthis.getRouter().initialize();\n\t\t},\n\n\t\t/**\n\t\t * The component is destroyed by UI5 automatically.\n\t\t * In this method, the ListSelector and ErrorHandler are destroyed.\n\t\t * @public\n\t\t * @override\n\t\t */\n\t\tdestroy: function() {\n\t\t\tthis.oListSelector.destroy();\n\t\t\tthis._oErrorHandler.destroy();\n\t\t\t// call the base component's destroy function\n\t\t\tUIComponent.prototype.destroy.apply(this, arguments);\n\t\t},\n\n\t\t/**\n\t\t * This method can be called to determine whether the sapUiSizeCompact or sapUiSizeCozy\n\t\t * design mode class should be set, which influences the size appearance of some controls.\n\t\t * @public\n\t\t * @return {string} css class, either 'sapUiSizeCompact' or 'sapUiSizeCozy' - or an empty string if no css class should be set\n\t\t */\n\t\tgetContentDensityClass: function() {\n\t\t\tif (this._sContentDensityClass === undefined) {\n\t\t\t\t// check whether FLP has already set the content density class; do nothing in this case\n\t\t\t\tif (jQuery(document.body).hasClass(\"sapUiSizeCozy\") || jQuery(document.body).hasClass(\"sapUiSizeCompact\")) {\n\t\t\t\t\tthis._sContentDensityClass = \"\";\n\t\t\t\t} else if (!Device.support.touch) { // apply \"compact\" mode if touch is not supported\n\t\t\t\t\tthis._sContentDensityClass = \"sapUiSizeCompact\";\n\t\t\t\t} else {\n\t\t\t\t\t// \"cozy\" in case of touch support; default for most sap.m controls, but needed for desktop-first controls like sap.ui.table.Table\n\t\t\t\t\tthis._sContentDensityClass = \"sapUiSizeCozy\";\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this._sContentDensityClass;\n\t\t}\n\n\t});\n\n});",
		"diploma/admin/sensor/controller/ListSelector.js": "sap.ui.define([\n\t\"sap/ui/base/Object\"\n], function(BaseObject) {\n\t\"use strict\";\n\n\treturn BaseObject.extend(\"diploma.admin.sensor.model.ListSelector\", {\n\n\t\t/**\n\t\t * Provides a convenience API for selecting list items. All the functions will wait until the initial load of the a List passed to the instance by the setBoundMasterList\n\t\t * function.\n\t\t * @class\n\t\t * @public\n\t\t * @alias diploma.admin.sensor.model.ListSelector\n\t\t */\n\n\t\tconstructor: function() {\n\t\t\tthis._oWhenListHasBeenSet = new Promise(function(fnResolveListHasBeenSet) {\n\t\t\t\tthis._fnResolveListHasBeenSet = fnResolveListHasBeenSet;\n\t\t\t}.bind(this));\n\t\t\t// This promise needs to be created in the constructor, since it is allowed to\n\t\t\t// invoke selectItem functions before calling setBoundMasterList\n\t\t\tthis.oWhenListLoadingIsDone = new Promise(function(fnResolve, fnReject) {\n\t\t\t\t// Used to wait until the setBound masterList function is invoked\n\t\t\t\tthis._oWhenListHasBeenSet\n\t\t\t\t\t.then(function(oList) {\n\t\t\t\t\t\toList.getBinding(\"items\").attachEventOnce(\"dataReceived\",\n\t\t\t\t\t\t\tfunction(oData) {\n\t\t\t\t\t\t\t\tif (!oData.getParameter(\"data\")) {\n\t\t\t\t\t\t\t\t\tfnReject({\n\t\t\t\t\t\t\t\t\t\tlist: oList,\n\t\t\t\t\t\t\t\t\t\terror: true\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvar oFirstListItem = oList.getItems()[0];\n\t\t\t\t\t\t\t\tif (oFirstListItem) {\n\t\t\t\t\t\t\t\t\t// Have to make sure that first list Item is selected\n\t\t\t\t\t\t\t\t\t// and a select event is triggered. Like that, the corresponding\n\t\t\t\t\t\t\t\t\t// detail page is loaded automatically\n\t\t\t\t\t\t\t\t\tfnResolve({\n\t\t\t\t\t\t\t\t\t\tlist: oList,\n\t\t\t\t\t\t\t\t\t\tfirstListitem: oFirstListItem\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// No items in the list\n\t\t\t\t\t\t\t\t\tfnReject({\n\t\t\t\t\t\t\t\t\t\tlist: oList,\n\t\t\t\t\t\t\t\t\t\terror: false\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t}.bind(this));\n\t\t},\n\n\t\t/**\n\t\t * A bound list should be passed in here. Should be done, before the list has received its initial data from the server.\n\t\t * May only be invoked once per ListSelector instance.\n\t\t * @param {sap.m.List} oList The list all the select functions will be invoked on.\n\t\t * @public\n\t\t */\n\t\tsetBoundMasterList: function(oList) {\n\t\t\tthis._oList = oList;\n\t\t\tthis._fnResolveListHasBeenSet(oList);\n\t\t},\n\n\t\t/**\n\t\t * Tries to select and scroll to a list item with a matching binding context. If there are no items matching the binding context or the ListMode is none,\n\t\t * no selection/scrolling will happen\n\t\t * @param {string} sBindingPath the binding path matching the binding path of a list item\n\t\t * @public\n\t\t */\n\t\tselectAListItem: function(sBindingPath) {\n\n\t\t\tthis.oWhenListLoadingIsDone.then(\n\t\t\t\tfunction() {\n\t\t\t\t\tvar oList = this._oList,\n\t\t\t\t\t\toSelectedItem;\n\n\t\t\t\t\tif (oList.getMode() === \"None\") {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\toSelectedItem = oList.getSelectedItem();\n\n\t\t\t\t\t// skip update if the current selection is already matching the object path\n\t\t\t\t\tif (oSelectedItem && oSelectedItem.getBindingContext().getPath() === sBindingPath) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\toList.getItems().some(function(oItem) {\n\t\t\t\t\t\tif (oItem.getBindingContext() && oItem.getBindingContext().getPath() === sBindingPath) {\n\t\t\t\t\t\t\toList.setSelectedItem(oItem);\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}.bind(this),\n\t\t\t\tfunction() {\n\t\t\t\t\tjQuery.sap.log.warning(\"Could not select the list item with the path\" + sBindingPath +\n\t\t\t\t\t\t\" because the list encountered an error or had no items\");\n\t\t\t\t}\n\t\t\t);\n\t\t},\n\n\t\t/* =========================================================== */\n\t\t/* Convenience Functions for List Selection Change Event       */\n\t\t/* =========================================================== */\n\n\t\t/**\n\t\t * Attaches a listener and listener function to the ListSelector's bound master list. By using\n\t\t * a promise, the listener is added, even if the list is not available when 'attachListSelectionChange'\n\t\t * is called.\n\t\t * @param {function} fnFunction the function to be executed when the list fires a selection change event\n\t\t * @param {function} oListener the listener object\n\t\t * @return {diploma.admin.sensor.model.ListSelector} the list selector object for method chaining\n\t\t * @public\n\t\t */\n\t\tattachListSelectionChange: function(fnFunction, oListener) {\n\t\t\tthis._oWhenListHasBeenSet.then(function() {\n\t\t\t\tthis._oList.attachSelectionChange(fnFunction, oListener);\n\t\t\t}.bind(this));\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * Detaches a listener and listener function from the ListSelector's bound master list. By using\n\t\t * a promise, the listener is removed, even if the list is not available when 'detachListSelectionChange'\n\t\t * is called.\n\t\t * @param {function} fnFunction the function to be executed when the list fires a selection change event\n\t\t * @param {function} oListener the listener object\n\t\t * @return {diploma.admin.sensor.model.ListSelector} the list selector object for method chaining\n\t\t * @public\n\t\t */\n\t\tdetachListSelectionChange: function(fnFunction, oListener) {\n\t\t\tthis._oWhenListHasBeenSet.then(function() {\n\t\t\t\tthis._oList.detachSelectionChange(fnFunction, oListener);\n\t\t\t}.bind(this));\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * Removes all selections from master list.\n\t\t * Does not trigger 'selectionChange' event on master list, though.\n\t\t * @public\n\t\t */\n\t\tclearMasterListSelection: function() {\n\t\t\t//use promise to make sure that 'this._oList' is available\n\t\t\tthis._oWhenListHasBeenSet.then(function() {\n\t\t\t\tthis._oList.removeSelections(true);\n\t\t\t}.bind(this));\n\t\t}\n\n\t});\n\n});",
		"diploma/admin/sensor/controller/Master.controller.js": "/*global history */\nsap.ui.define([\n\t\"diploma/admin/sensor/controller/BaseController\",\n\t\"sap/ui/model/json/JSONModel\",\n\t\"sap/ui/model/Filter\",\n\t\"sap/ui/model/FilterOperator\",\n\t\"sap/ui/model/Sorter\",\n\t\"sap/m/GroupHeaderListItem\",\n\t\"sap/ui/Device\",\n\t\"diploma/admin/sensor/model/formatter\",\n\t\"sap/m/MessageToast\"\n], function(BaseController, JSONModel, Filter, FilterOperator, Sorter, GroupHeaderListItem, Device, formatter, MessageToast) {\n\t\"use strict\";\n\n\treturn BaseController.extend(\"diploma.admin.sensor.controller.Master\", {\n\n\t\tformatter: formatter,\n\n\t\t/* =========================================================== */\n\t\t/* lifecycle methods                                           */\n\t\t/* =========================================================== */\n\n\t\t/**\n\t\t * Called when the master list controller is instantiated. It sets up the event handling for the master/detail communication and other lifecycle tasks.\n\t\t * @public\n\t\t */\n\t\tonInit: function() {\n\t\t\t// Control state model\n\t\t\tvar oList = this.byId(\"list\"),\n\t\t\t\toViewModel = new JSONModel({\n\t\t\t\t\tisFilterBarVisible: false,\n\t\t\t\t\tfilterBarLabel: \"\",\n\t\t\t\t\tdelay: 0,\n\t\t\t\t\ttitle: this.getResourceBundle().getText(\"masterTitleCount\", [0]),\n\t\t\t\t\tnoDataText: this.getResourceBundle().getText(\"masterListNoDataText\"),\n\t\t\t\t\tsortBy: \"name\",\n\t\t\t\t\tgroupBy: \"None\"\n\t\t\t\t}),\n\t\t\t\t// Put down master list's original value for busy indicator delay,\n\t\t\t\t// so it can be restored later on. Busy handling on the master list is\n\t\t\t\t// taken care of by the master list itself.\n\t\t\t\tiOriginalBusyDelay = oList.getBusyIndicatorDelay();\n\n\t\t\tthis._oList = oList;\n\t\t\t// keeps the filter and search state\n\t\t\tthis._oListFilterState = {\n\t\t\t\taFilter: [],\n\t\t\t\taSearch: []\n\t\t\t};\n\n\t\t\tthis.setModel(oViewModel, \"masterView\");\n\t\t\t// Make sure, busy indication is showing immediately so there is no\n\t\t\t// break after the busy indication for loading the view's meta data is\n\t\t\t// ended (see promise 'oWhenMetadataIsLoaded' in AppController)\n\t\t\toList.attachEventOnce(\"updateFinished\", function() {\n\t\t\t\t// Restore original busy indicator delay for the list\n\t\t\t\toViewModel.setProperty(\"/delay\", iOriginalBusyDelay);\n\t\t\t});\n\n\t\t\tthis.getView().addEventDelegate({\n\t\t\t\tonBeforeFirstShow: function() {\n\t\t\t\t\tthis.getOwnerComponent().oListSelector.setBoundMasterList(oList);\n\t\t\t\t}.bind(this)\n\t\t\t});\n\n\t\t\tthis.getRouter().getRoute(\"master\").attachPatternMatched(this._onMasterMatched, this);\n\t\t\tthis.getRouter().attachBypassed(this.onBypassed, this);\n\t\t\t\n\t\t\tvar sStyleClass = this.getOwnerComponent().getContentDensityClass();\n\t\t\tthis.byId(\"page\").getDependents().forEach(function(oItem){\n\t\t\t    oItem.addStyleClass(sStyleClass);\n\t\t\t});\n\t\t},\n\n\t\t/* =========================================================== */\n\t\t/* event handlers                                              */\n\t\t/* =========================================================== */\n\n\t\t/**\n\t\t * After list data is available, this handler method updates the\n\t\t * master list counter and hides the pull to refresh control, if\n\t\t * necessary.\n\t\t * @param {sap.ui.base.Event} oEvent the update finished event\n\t\t * @public\n\t\t */\n\t\tonUpdateFinished: function(oEvent) {\n\t\t\t// update the master list object counter after new data is loaded\n\t\t\tthis._updateListItemCount(oEvent.getParameter(\"total\"));\n\t\t\t// hide pull to refresh if necessary\n\t\t\tthis.byId(\"pullToRefresh\").hide();\n\t\t},\n\n\t\t/**\n\t\t * Event handler for the master search field. Applies current\n\t\t * filter value and triggers a new search. If the search field's\n\t\t * 'refresh' button has been pressed, no new search is triggered\n\t\t * and the list binding is refresh instead.\n\t\t * @param {sap.ui.base.Event} oEvent the search event\n\t\t * @public\n\t\t */\n\t\tonSearch: function(oEvent) {\n\t\t\tif (oEvent.getParameters().refreshButtonPressed) {\n\t\t\t\t// Search field's 'refresh' button has been pressed.\n\t\t\t\t// This is visible if you select any master list item.\n\t\t\t\t// In this case no new search is triggered, we only\n\t\t\t\t// refresh the list binding.\n\t\t\t\tthis.onRefresh();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar sQuery = oEvent.getParameter(\"query\");\n\n\t\t\tif (sQuery) {\n\t\t\t\tthis._oListFilterState.aSearch = [new Filter(\"name\", FilterOperator.Contains, sQuery)];\n\t\t\t} else {\n\t\t\t\tthis._oListFilterState.aSearch = [];\n\t\t\t}\n\t\t\tthis._applyFilterSearch();\n\n\t\t},\n\n\t\t/**\n\t\t * Event handler for refresh event. Keeps filter, sort\n\t\t * and group settings and refreshes the list binding.\n\t\t * @public\n\t\t */\n\t\tonRefresh: function() {\n\t\t\tthis._oList.getBinding(\"items\").refresh();\n\t\t},\n\n\t\t/**\n\t\t * Event handler for the sorter selection.\n\t\t * @param {sap.ui.base.Event} oEvent the select event\n\t\t * @public\n\t\t */\n\t\tonSort: function(oEvent) {\n\t\t\tvar sKey = oEvent.getSource().getSelectedItem().getKey(),\n\t\t\t\toViewModel = this.getModel(\"masterView\"),\n\t\t\t\tsGroupKey = oViewModel.getProperty(\"/groupBy\");\n\n\t\t\tif (sGroupKey !== \"None\" && sKey !== sGroupKey) {\n\t\t\t\t// If the list is grouped by something different than the new sorting, remove the grouping\n\t\t\t\t// Grouping only works if the list is primary sorted by the grouping\n\t\t\t\toViewModel.setProperty(\"/groupBy\", \"None\");\n\t\t\t}\n\n\t\t\tthis._applyGroupSort([new Sorter(sKey, false)]);\n\t\t},\n\n\t\t/**\n\t\t * Event handler for the filter button to open the ViewSettingsDialog.\n\t\t * which is used to add or remove filters to the master list. This\n\t\t * handler method is also called when the filter bar is pressed,\n\t\t * which is added to the beginning of the master list when a filter is applied.\n\t\t * @public\n\t\t */\n\t\tonOpenViewSettings: function() {\n\t\t\tif (!this._oViewSettingsDialog) {\n\t\t\t\tthis._oViewSettingsDialog = sap.ui.xmlfragment(\"diploma.admin.sensor.view.ViewSettingsDialog\", this);\n\t\t\t\tthis.getView().addDependent(this._oViewSettingsDialog);\n\t\t\t\t// forward compact/cozy style into Dialog\n\t\t\t\tthis._oViewSettingsDialog.addStyleClass(this.getOwnerComponent().getContentDensityClass());\n\t\t\t}\n\t\t\tthis._oViewSettingsDialog.open();\n\t\t},\n\n\t\t/**\n\t\t * Event handler for the list selection event\n\t\t * @param {sap.ui.base.Event} oEvent the list selectionChange event\n\t\t * @public\n\t\t */\n\t\tonSelectionChange: function(oEvent) {\n\t\t\t// get the list item, either from the listItem parameter or from the event's source itself (will depend on the device-dependent mode).\n\t\t\tthis._showDetail(oEvent.getParameter(\"listItem\") || oEvent.getSource());\n\t\t},\n\n\t\t/**\n\t\t * Event handler for the bypassed event, which is fired when no routing pattern matched.\n\t\t * If there was an object selected in the master list, that selection is removed.\n\t\t * @public\n\t\t */\n\t\tonBypassed: function() {\n\t\t\tthis._oList.removeSelections(true);\n\t\t},\n\n\t\t/**\n\t\t * Used to create GroupHeaders with non-capitalized caption.\n\t\t * These headers are inserted into the master list to\n\t\t * group the master list's items.\n\t\t * @param {Object} oGroup group whose text is to be displayed\n\t\t * @public\n\t\t * @returns {sap.m.GroupHeaderListItem} group header with non-capitalized caption.\n\t\t */\n\t\tcreateGroupHeader: function(oGroup) {\n\t\t\treturn new GroupHeaderListItem({\n\t\t\t\ttitle: oGroup.text,\n\t\t\t\tupperCase: false\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Navigates back in the browser history, if the entry was created by this app.\n\t\t * If not, it navigates to the Fiori Launchpad home page\n\t\t * @override\n\t\t * @public\n\t\t */\n\t\tonNavBack: function() {\n\t\t\tvar oHistory = sap.ui.core.routing.History.getInstance(),\n\t\t\t\tsPreviousHash = oHistory.getPreviousHash(),\n\t\t\t\toCrossAppNavigator = sap.ushell.Container.getService(\"CrossApplicationNavigation\");\n\n\t\t\tif (sPreviousHash !== undefined) {\n\t\t\t\t// The history contains a previous entry\n\t\t\t\thistory.go(-1);\n\t\t\t} else {\n\t\t\t\t// Navigate back to FLP home\n\t\t\t\toCrossAppNavigator.toExternal({\n\t\t\t\t\ttarget: {\n\t\t\t\t\t\tshellHash: \"#\"\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Event handler for the create button press.\n\t\t * Simply navigates to the editable detail page.\n\t\t */\n\t\tonCreate: function() {\n\t\t\tthis.getRouter().navTo(\"object\", {\n\t\t\t\tobjectId: \"new\"\n\t\t\t}, true);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Opens the measure maintainence dialog.\n\t\t */\n\t\topenMeasureDialog: function() {\n\t\t\tthis.byId(\"measureName\").setValue(\"\");\n\t\t\tthis.byId(\"measureDesc\").setValue(\"\");\n\t\t\tthis.byId(\"measureUnit\").setValue(\"\");\n\t\t\tthis.byId(\"measureDialog\").open();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Closes the measure maintainence dialog.\n\t\t */\n\t\tcloseMeasureDialog: function() {\n\t\t\tthis.byId(\"measureDialog\").close();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Creates a new measure.\n\t\t */\n\t\tcreateMeasure: function() {\n\t\t\tthis.getModel().create(\"/Measures\", {\n\t\t\t\tid:\t\t\t\t\"\",\n\t\t\t\tname:\t\t\tthis.byId(\"measureName\").getValue(),\n\t\t\t\tdescription:\tthis.byId(\"measureDesc\").getValue(),\n\t\t\t\tunit:\t\t\tthis.byId(\"measureUnit\").getValue()\n\t\t\t}, {\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tMessageToast.show(this.getResourceBundle().getText(\"successCreateMeasure\"));\n\t\t\t\t\tthis.byId(\"measureName\").setValue(\"\");\n\t\t\t\t\tthis.byId(\"measureDesc\").setValue(\"\");\n\t\t\t\t\tthis.byId(\"measureUnit\").setValue(\"\");\n\t\t\t\t}.bind(this)\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Deletes a measure.\n\t\t */\n\t\tdeleteMeasure: function(oEvent) {\n\t\t\tthis.getModel().remove(oEvent.getParameter(\"listItem\").getBindingContext().getPath());\n\t\t},\n\t\t\t\n\t\t/* =========================================================== */\n\t\t/* begin: internal methods                                     */\n\t\t/* =========================================================== */\n\n\t\t/**\n\t\t * If the master route was hit (empty hash) we have to set\n\t\t * the hash to to the first item in the list as soon as the\n\t\t * listLoading is done and the first item in the list is known\n\t\t * @private\n\t\t */\n\t\t_onMasterMatched: function() {\n\t\t\tthis.getOwnerComponent().oListSelector.oWhenListLoadingIsDone.then(\n\t\t\t\tfunction(mParams) {\n\t\t\t\t\tif (mParams.list.getMode() === \"None\") {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tvar sObjectId = mParams.firstListitem.getBindingContext().getProperty(\"id\");\n\t\t\t\t\tthis.getRouter().navTo(\"object\", {\n\t\t\t\t\t\tobjectId: sObjectId\n\t\t\t\t\t}, true);\n\t\t\t\t}.bind(this),\n\t\t\t\tfunction(mParams) {\n\t\t\t\t\tif (mParams.error) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis.getRouter().getTargets().display(\"detailNoObjectsAvailable\");\n\t\t\t\t}.bind(this)\n\t\t\t);\n\t\t},\n\n\t\t/**\n\t\t * Shows the selected item on the detail page\n\t\t * On phones a additional history entry is created\n\t\t * @param {sap.m.ObjectListItem} oItem selected Item\n\t\t * @private\n\t\t */\n\t\t_showDetail: function(oItem) {\n\t\t\tvar bReplace = !Device.system.phone;\n\t\t\tthis.getRouter().navTo(\"object\", {\n\t\t\t\tobjectId: oItem.getBindingContext().getProperty(\"id\")\n\t\t\t}, bReplace);\n\t\t},\n\n\t\t/**\n\t\t * Sets the item count on the master list header\n\t\t * @param {integer} iTotalItems the total number of items in the list\n\t\t * @private\n\t\t */\n\t\t_updateListItemCount: function(iTotalItems) {\n\t\t\tvar sTitle;\n\t\t\t// only update the counter if the length is final\n\t\t\tif (this._oList.getBinding(\"items\").isLengthFinal()) {\n\t\t\t\tsTitle = this.getResourceBundle().getText(\"masterTitleCount\", [iTotalItems]);\n\t\t\t\tthis.getModel(\"masterView\").setProperty(\"/title\", sTitle);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Internal helper method to apply both filter and search state together on the list binding\n\t\t * @private\n\t\t */\n\t\t_applyFilterSearch: function() {\n\t\t\tvar aFilters = this._oListFilterState.aSearch.concat(this._oListFilterState.aFilter),\n\t\t\t\toViewModel = this.getModel(\"masterView\");\n\t\t\tthis._oList.getBinding(\"items\").filter(aFilters, \"Application\");\n\t\t\t// changes the noDataText of the list in case there are no filter results\n\t\t\tif (aFilters.length !== 0) {\n\t\t\t\toViewModel.setProperty(\"/noDataText\", this.getResourceBundle().getText(\"masterListNoDataWithFilterOrSearchText\"));\n\t\t\t} else if (this._oListFilterState.aSearch.length > 0) {\n\t\t\t\t// only reset the no data text to default when no new search was triggered\n\t\t\t\toViewModel.setProperty(\"/noDataText\", this.getResourceBundle().getText(\"masterListNoDataText\"));\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Internal helper method to apply both group and sort state together on the list binding\n\t\t * @private\n\t\t */\n\t\t_applyGroupSort: function(aSorters) {\n\t\t\tthis._oList.getBinding(\"items\").sort(aSorters);\n\t\t},\n\n\t\t/**\n\t\t * Internal helper method that sets the filter bar visibility property and the label's caption to be shown\n\t\t * @param {string} sFilterBarText the selected filter value\n\t\t * @private\n\t\t */\n\t\t_updateFilterBar: function(sFilterBarText) {\n\t\t\tvar oViewModel = this.getModel(\"masterView\");\n\t\t\toViewModel.setProperty(\"/isFilterBarVisible\", (this._oListFilterState.aFilter.length > 0));\n\t\t\toViewModel.setProperty(\"/filterBarLabel\", this.getResourceBundle().getText(\"masterFilterBarText\", [sFilterBarText]));\n\t\t}\n\n\t});\n\n});",
		"diploma/admin/sensor/controller/BaseController.js": "/*global history */\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/ui/core/routing/History\"\n], function(Controller, History) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"diploma.admin.sensor.controller.BaseController\", {\n\t\t/**\n\t\t * Convenience method for accessing the router in every controller of the application.\n\t\t * @public\n\t\t * @returns {sap.ui.core.routing.Router} the router for this component\n\t\t */\n\t\tgetRouter: function() {\n\t\t\treturn this.getOwnerComponent().getRouter();\n\t\t},\n\n\t\t/**\n\t\t * Convenience method for getting the view model by name in every controller of the application.\n\t\t * @public\n\t\t * @param {string} sName the model name\n\t\t * @returns {sap.ui.model.Model} the model instance\n\t\t */\n\t\tgetModel: function(sName) {\n\t\t\treturn this.getView().getModel(sName);\n\t\t},\n\n\t\t/**\n\t\t * Convenience method for setting the view model in every controller of the application.\n\t\t * @public\n\t\t * @param {sap.ui.model.Model} oModel the model instance\n\t\t * @param {string} sName the model name\n\t\t * @returns {sap.ui.mvc.View} the view instance\n\t\t */\n\t\tsetModel: function(oModel, sName) {\n\t\t\treturn this.getView().setModel(oModel, sName);\n\t\t},\n\n\t\t/**\n\t\t * Convenience method for getting the resource bundle.\n\t\t * @public\n\t\t * @returns {sap.ui.model.resource.ResourceModel} the resourceModel of the component\n\t\t */\n\t\tgetResourceBundle: function() {\n\t\t\treturn this.getOwnerComponent().getModel(\"i18n\").getResourceBundle();\n\t\t},\n\n\t\t/**\n\t\t * Event handler  for navigating back.\n\t\t * It checks if there is a history entry. If yes, history.go(-1) will happen.\n\t\t * If not, it will replace the current entry of the browser history with the master route.\n\t\t * @public\n\t\t */\n\t\tonNavBack: function() {\n\t\t\tvar sPreviousHash = History.getInstance().getPreviousHash();\n\n\t\t\tif (sPreviousHash !== undefined) {\n\t\t\t\t// The history contains a previous entry\n\t\t\t\thistory.go(-1);\n\t\t\t} else {\n\t\t\t\t// Otherwise we go backwards with a forward history\n\t\t\t\tvar bReplace = true;\n\t\t\t\tthis.getRouter().navTo(\"master\", {}, bReplace);\n\t\t\t}\n\t\t}\n\n\t});\n\n});",
		"diploma/admin/sensor/controller/ErrorHandler.js": "sap.ui.define([\n\t\"sap/ui/base/Object\",\n\t\"sap/m/MessageBox\"\n], function(Object, MessageBox) {\n\t\"use strict\";\n\n\treturn Object.extend(\"diploma.admin.sensor.controller.ErrorHandler\", {\n\n\t\t/**\n\t\t * Handles application errors by automatically attaching to the model events and displaying errors when needed.\n\t\t * @class\n\t\t * @param {sap.ui.core.UIComponent} oComponent reference to the app's component\n\t\t * @public\n\t\t * @alias diploma.admin.sensor.controller.ErrorHandler\n\t\t */\n\t\tconstructor: function(oComponent) {\n\t\t\tthis._oResourceBundle = oComponent.getModel(\"i18n\").getResourceBundle();\n\t\t\tthis._oComponent = oComponent;\n\t\t\tthis._oModel = oComponent.getModel();\n\t\t\tthis._bMessageOpen = false;\n\t\t\tthis._sErrorText = this._oResourceBundle.getText(\"errorText\");\n\n\t\t\tthis._oModel.attachMetadataFailed(function(oEvent) {\n\t\t\t\tvar oParams = oEvent.getParameters();\n\n\t\t\t\tthis._showMetadataError(oParams.response);\n\t\t\t}, this);\n\n\t\t\tthis._oModel.attachRequestFailed(function(oEvent) {\n\t\t\t\tvar oParams = oEvent.getParameters();\n\n\t\t\t\t// An entity that was not found in the service is also throwing a 404 error in oData.\n\t\t\t\t// We already cover this case with a notFound target so we skip it here.\n\t\t\t\t// A request that cannot be sent to the server is a technical error that we have to handle though\n\t\t\t\tif (oParams.response.statusCode !== \"404\" || (oParams.response.statusCode === 404 && oParams.response.responseText.indexOf(\n\t\t\t\t\t\"Cannot POST\") === 0)) {\n\t\t\t\t\tthis._showServiceError(oParams.response);\n\t\t\t\t}\n\t\t\t}, this);\n\t\t},\n\n\t\t/**\n\t\t * Shows a {@link sap.m.MessageBox} when the metadata call has failed.\n\t\t * The user can try to refresh the metadata.\n\t\t * @param {string} sDetails a technical error to be displayed on request\n\t\t * @private\n\t\t */\n\t\t_showMetadataError: function(sDetails) {\n\t\t\tMessageBox.error(\n\t\t\t\tthis._sErrorText, {\n\t\t\t\t\tid: \"metadataErrorMessageBox\",\n\t\t\t\t\tdetails: sDetails,\n\t\t\t\t\tstyleClass: this._oComponent.getContentDensityClass(),\n\t\t\t\t\tactions: [MessageBox.Action.RETRY, MessageBox.Action.CLOSE],\n\t\t\t\t\tonClose: function(sAction) {\n\t\t\t\t\t\tif (sAction === MessageBox.Action.RETRY) {\n\t\t\t\t\t\t\tthis._oModel.refreshMetadata();\n\t\t\t\t\t\t}\n\t\t\t\t\t}.bind(this)\n\t\t\t\t}\n\t\t\t);\n\t\t},\n\n\t\t/**\n\t\t * Shows a {@link sap.m.MessageBox} when a service call has failed.\n\t\t * Only the first error message will be display.\n\t\t * @param {string} sDetails a technical error to be displayed on request\n\t\t * @private\n\t\t */\n\t\t_showServiceError: function(sDetails) {\n\t\t\tif (this._bMessageOpen) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._bMessageOpen = true;\n\t\t\tMessageBox.error(\n\t\t\t\tthis._sErrorText, {\n\t\t\t\t\tid: \"serviceErrorMessageBox\",\n\t\t\t\t\tdetails: sDetails,\n\t\t\t\t\tstyleClass: this._oComponent.getContentDensityClass(),\n\t\t\t\t\tactions: [MessageBox.Action.CLOSE],\n\t\t\t\t\tonClose: function() {\n\t\t\t\t\t\tthis._bMessageOpen = false;\n\t\t\t\t\t}.bind(this)\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t});\n\n});",
		"diploma/admin/sensor/localService/mockserver.js": "sap.ui.define([\n\t\"sap/ui/core/util/MockServer\"\n], function(MockServer) {\n\t\"use strict\";\n\n\tvar oMockServer,\n\t\t_sAppModulePath = \"diploma/admin/sensor/\",\n\t\t_sJsonFilesModulePath = _sAppModulePath + \"localService/mockdata\";\n\n\treturn {\n\t\t/**\n\t\t * Initializes the mock server.\n\t\t * You can configure the delay with the URL parameter \"serverDelay\".\n\t\t * The local mock data in this folder is returned instead of the real data for testing.\n\t\t * @public\n\t\t */\n\n\t\tinit: function() {\n\t\t\tvar oUriParameters = jQuery.sap.getUriParameters(),\n\t\t\t\tsJsonFilesUrl = jQuery.sap.getModulePath(_sJsonFilesModulePath),\n\t\t\t\tsManifestUrl = jQuery.sap.getModulePath(_sAppModulePath + \"manifest\", \".json\"),\n\t\t\t\tsEntity = \"SensorTypes\",\n\t\t\t\tsErrorParam = oUriParameters.get(\"errorType\"),\n\t\t\t\tiErrorCode = sErrorParam === \"badRequest\" ? 400 : 500,\n\t\t\t\toManifest = jQuery.sap.syncGetJSON(sManifestUrl).data,\n\t\t\t\toMainDataSource = oManifest[\"sap.app\"].dataSources.mainService,\n\t\t\t\tsMetadataUrl = jQuery.sap.getModulePath(_sAppModulePath + oMainDataSource.settings.localUri.replace(\".xml\", \"\"), \".xml\"),\n\t\t\t\t// ensure there is a trailing slash\n\t\t\t\tsMockServerUrl = /.*\\/$/.test(oMainDataSource.uri) ? oMainDataSource.uri : oMainDataSource.uri + \"/\";\n\n\t\t\toMockServer = new MockServer({\n\t\t\t\trootUri: sMockServerUrl\n\t\t\t});\n\n\t\t\t// configure mock server with a delay of 1s\n\t\t\tMockServer.config({\n\t\t\t\tautoRespond: true,\n\t\t\t\tautoRespondAfter: (oUriParameters.get(\"serverDelay\") || 1000)\n\t\t\t});\n\n\t\t\toMockServer.simulate(sMetadataUrl, {\n\t\t\t\tsMockdataBaseUrl: sJsonFilesUrl,\n\t\t\t\tbGenerateMissingMockData: true\n\t\t\t});\n\n\t\t\tvar aRequests = oMockServer.getRequests(),\n\t\t\t\tfnResponse = function(iErrCode, sMessage, aRequest) {\n\t\t\t\t\taRequest.response = function(oXhr) {\n\t\t\t\t\t\toXhr.respond(iErrCode, {\n\t\t\t\t\t\t\t\"Content-Type\": \"text/plain;charset=utf-8\"\n\t\t\t\t\t\t}, sMessage);\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t// handling the metadata error test\n\t\t\tif (oUriParameters.get(\"metadataError\")) {\n\t\t\t\taRequests.forEach(function(aEntry) {\n\t\t\t\t\tif (aEntry.path.toString().indexOf(\"$metadata\") > -1) {\n\t\t\t\t\t\tfnResponse(500, \"metadata Error\", aEntry);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Handling request errors\n\t\t\tif (sErrorParam) {\n\t\t\t\taRequests.forEach(function(aEntry) {\n\t\t\t\t\tif (aEntry.path.toString().indexOf(sEntity) > -1) {\n\t\t\t\t\t\tfnResponse(iErrorCode, sErrorParam, aEntry);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\toMockServer.start();\n\n\t\t\tjQuery.sap.log.info(\"Running the app with mock data\");\n\t\t},\n\n\t\t/**\n\t\t * @public returns the mockserver of the app, should be used in integration tests\n\t\t * @returns {sap.ui.core.util.MockServer} the mockserver instance\n\t\t */\n\t\tgetMockServer: function() {\n\t\t\treturn oMockServer;\n\t\t}\n\t};\n\n});",
		"diploma/admin/sensor/controller/App.controller.js": "sap.ui.define([\n\t\"diploma/admin/sensor/controller/BaseController\",\n\t\"sap/ui/model/json/JSONModel\"\n], function(BaseController, JSONModel) {\n\t\"use strict\";\n\n\treturn BaseController.extend(\"diploma.admin.sensor.controller.App\", {\n\n\t\tonInit: function() {\n\t\t\tvar oViewModel,\n\t\t\t\tfnSetAppNotBusy,\n\t\t\t\toListSelector = this.getOwnerComponent().oListSelector,\n\t\t\t\tiOriginalBusyDelay = this.getView().getBusyIndicatorDelay();\n\n\t\t\toViewModel = new JSONModel({\n\t\t\t\tbusy: true,\n\t\t\t\tdelay: 0\n\t\t\t});\n\t\t\tthis.setModel(oViewModel, \"appView\");\n\n\t\t\tfnSetAppNotBusy = function() {\n\t\t\t\toViewModel.setProperty(\"/busy\", false);\n\t\t\t\toViewModel.setProperty(\"/delay\", iOriginalBusyDelay);\n\t\t\t};\n\n\t\t\tthis.getOwnerComponent().getModel().metadataLoaded()\n\t\t\t\t.then(fnSetAppNotBusy);\n\n\t\t\t// Makes sure that master view is hidden in split app\n\t\t\t// after a new list entry has been selected.\n\t\t\toListSelector.attachListSelectionChange(function() {\n\t\t\t\tthis.byId(\"idAppControl\").hideMaster();\n\t\t\t}, this);\n\n\t\t\t// apply content density mode to root view\n\t\t\tthis.getView().addStyleClass(this.getOwnerComponent().getContentDensityClass());\n\t\t}\n\n\t});\n\n});",
		"diploma/admin/sensor/model/formatter.js": "sap.ui.define([], function() {\n\t\"use strict\";\n\n\treturn {\n\t\t/**\n\t\t * Rounds the currency value to 2 digits\n\t\t *\n\t\t * @public\n\t\t * @param {string} sValue value to be formatted\n\t\t * @returns {string} formatted currency value with 2 digits\n\t\t */\n\t\tcurrencyValue: function(sValue) {\n\t\t\tif (!sValue) {\n\t\t\t\treturn \"\";\n\t\t\t}\n\n\t\t\treturn parseFloat(sValue).toFixed(2);\n\t\t},\n\t\t\n\t\t\n\t\t/**\n\t\t * Formats the display text for measures.\n\t\t * @param\t{string}\tsText\tThe translatable text with placeholders.\n\t\t * @param\t{string}\tsName\tThe name of the measure.\n\t\t * @param\t{string}\tsUnit\tThe measure's unit.\n\t\t * @returns\tThe measure display text.\n\t\t */\n\t\tmeasureText: function(sText, sName, sUnit) {\n\t\t\tif (!sName && !sUnit) {\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t\tif (!sUnit) {\n\t\t\t\treturn sName;\n\t\t\t}\n\t\t\treturn jQuery.sap.formatMessage(sText, [sName, sUnit || \"\"]);\n\t\t}\n\t\t\n\t};\n\n});",
		"diploma/admin/sensor/controller/Detail.controller.js": "/*global location */\nsap.ui.define([\n\t\"diploma/admin/sensor/controller/BaseController\",\n\t\"sap/ui/model/json/JSONModel\",\n\t\"sap/m/MessageBox\",\n\t\"diploma/admin/sensor/model/formatter\"\n], function(BaseController, JSONModel, MessageBox, formatter) {\n\t\"use strict\";\n\t\n\tvar aMathFunctions = [\"abs\", \"acos\", \"asin\", \"atan\", \"atan2\", \"ceil\", \n\t\t\"cos\", \"exp\", \"floor\", \"log\", \"max\", \"min\", \"pow\", \"round\", \"sin\", \"sqrt\", \"tan\"];\n\tvar oConversionRegex = /^[ #0-9()/*+\\-,.]*$/;\n\tvar oExprFieldRegex = /\\$(M|S)\\([0-9a-zA-Z ]+\\)/g;\n\t\n\treturn BaseController.extend(\"diploma.admin.sensor.controller.Detail\", {\n\n\t\tformatter: formatter,\n\n\t\t/* =========================================================== */\n\t\t/* lifecycle methods                                           */\n\t\t/* =========================================================== */\n\n\t\tonInit: function() {\n\t\t\t// Model used to manipulate control states. The chosen values make sure,\n\t\t\t// detail page is busy indication immediately so there is no break in\n\t\t\t// between the busy indication for loading the view's meta data\n\t\t\tvar oViewModel = new JSONModel({\n\t\t\t\tbusy: false,\n\t\t\t\tdelay: 0,\n\t\t\t\tconvertCorrect: true,\n\t\t\t\tlineItemListTitle: this.getResourceBundle().getText(\"detailLineItemTableHeading\")\n\t\t\t});\n\n\t\t\tthis.getRouter().getRoute(\"object\").attachPatternMatched(this._onObjectMatched, this);\n\n\t\t\tthis.setModel(oViewModel, \"detailView\");\n\n\t\t\tthis.getOwnerComponent().getModel().metadataLoaded().then(this._onMetadataLoaded.bind(this));\n\t\t\t\n\t\t\tsap.ui.getCore().attachValidationError(function (evt) {\n\t\t\t\tvar control = evt.getParameter(\"element\");\n\t\t\t\tif (control && control.setValueState) {\n\t\t\t\t\tcontrol.setValueState(\"Error\");\n\t\t\t\t}\n\t\t\t});\n\t\t\tsap.ui.getCore().attachValidationSuccess(function (evt) {\n\t\t\t\tvar control = evt.getParameter(\"element\");\n\t\t\t\tif (control && control.setValueState) {\n\t\t\t\t\tcontrol.setValueState(\"None\");\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tvar sDensityClass = this.getOwnerComponent().getContentDensityClass();\n\t\t\tthis.byId(\"page\").getDependents().forEach(function(oItem) {\n\t\t\t    oItem.addStyleClass(sDensityClass);\n\t\t\t});\n\t\t},\n\n\t\t/* =========================================================== */\n\t\t/* event handlers                                              */\n\t\t/* =========================================================== */\n\n\t\t/**\n\t\t * Updates the item count within the line item table's header\n\t\t * @param {object} oEvent an event containing the total number of items in the list\n\t\t * @private\n\t\t */\n\t\tonListUpdateFinished: function(oEvent) {\n\t\t\tvar sTitle,\n\t\t\t\tiTotalItems = oEvent.getParameter(\"total\"),\n\t\t\t\toViewModel = this.getModel(\"detailView\");\n\n\t\t\t// only update the counter if the length is final\n\t\t\tif (this.byId(\"lineItemsList\").getBinding(\"items\").isLengthFinal()) {\n\t\t\t\tif (iTotalItems) {\n\t\t\t\t\tsTitle = this.getResourceBundle().getText(\"detailLineItemTableHeadingCount\", [iTotalItems]);\n\t\t\t\t} else {\n\t\t\t\t\t//Display 'Line Items' instead of 'Line items (0)'\n\t\t\t\t\tsTitle = this.getResourceBundle().getText(\"detailLineItemTableHeading\");\n\t\t\t\t}\n\t\t\t\toViewModel.setProperty(\"/lineItemListTitle\", sTitle);\n\t\t\t}\n\t\t},\n\n\t\t/* =========================================================== */\n\t\t/* begin: internal methods                                     */\n\t\t/* =========================================================== */\n\n\t\t/**\n\t\t * Binds the view to the object path and expands the aggregated line items.\n\t\t * @function\n\t\t * @param {sap.ui.base.Event} oEvent pattern match event in route 'object'\n\t\t * @private\n\t\t */\n\t\t_onObjectMatched: function(oEvent) {\n\t\t\tvar oViewModel = this.getModel(\"detailView\");\n\t\t\tvar oGlobalModel = this.getModel(\"global\");\n\t\t\tvar sObjectId = oEvent.getParameter(\"arguments\").objectId;\n\t\t\tif (sObjectId === \"new\") {\n\t\t\t\toGlobalModel.setProperty(\"/isNew\", true);\n\t\t\t\toGlobalModel.setProperty(\"/edit\", true);\n\t\t\t\toViewModel.setProperty(\"/busy\", false);\n\t\t\t\tthis.getView().unbindElement();\n\t\t\t} else {\n\t\t\t\tif (oGlobalModel.getProperty(\"/isNew\")) {\n\t\t\t\t\toGlobalModel.setProperty(\"/edit\", false);\n\t\t\t\t}\n\t\t\t\toGlobalModel.setProperty(\"/isNew\", false);\n\t\t\t\tvar sObjectPath = \"/SensorTypes('\" + sObjectId + \"')\";\n\t\t\t\tthis._bindView(sObjectPath);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Binds the view to the object path. Makes sure that detail view displays\n\t\t * a busy indicator while data for the corresponding element binding is loaded.\n\t\t * @function\n\t\t * @param {string} sObjectPath path to the object to be bound to the view.\n\t\t * @private\n\t\t */\n\t\t_bindView: function(sObjectPath) {\n\t\t\t// Set busy indicator during view binding\n\t\t\tvar oViewModel = this.getModel(\"detailView\");\n\n\t\t\t// If the view was not bound yet its not busy, only if the binding requests data it is set to busy again\n\t\t\toViewModel.setProperty(\"/busy\", false);\n\n\t\t\tthis.getView().bindElement({\n\t\t\t\tpath: sObjectPath,\n\t\t\t\tevents: {\n\t\t\t\t\tchange: this._onBindingChange.bind(this),\n\t\t\t\t\tdataRequested: function() {\n\t\t\t\t\t\toViewModel.setProperty(\"/busy\", true);\n\t\t\t\t\t},\n\t\t\t\t\tdataReceived: function() {\n\t\t\t\t\t\toViewModel.setProperty(\"/busy\", false);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tparameters: {\n\t\t\t\t\texpand: \"Measure\"\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Called when the page's event binding was changed.\n\t\t */\n\t\t_onBindingChange: function() {\n\t\t\tvar oView = this.getView(),\n\t\t\t\toElementBinding = oView.getElementBinding();\n\n\t\t\t// No data for the binding\n\t\t\tif (!oElementBinding.getBoundContext()) {\n\t\t\t\tthis.getRouter().getTargets().display(\"detailObjectNotFound\");\n\t\t\t\t// if object could not be found, the selection in the master list\n\t\t\t\t// does not make sense anymore.\n\t\t\t\tthis.getOwnerComponent().oListSelector.clearMasterListSelection();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar sPath = oElementBinding.getPath();\n\n\t\t\tthis.getOwnerComponent().oListSelector.selectAListItem(sPath);\n\n\t\t},\n\n\t\t/**\n\t\t * Called when the odata service's model is loaded. Hides the busy indicator and resets busy delay.\n\t\t */\n\t\t_onMetadataLoaded: function() {\n\t\t\t// Store original busy indicator delay for the detail view\n\t\t\tvar iOriginalViewBusyDelay = this.getView().getBusyIndicatorDelay(),\n\t\t\t\toViewModel = this.getModel(\"detailView\");\n\n\t\t\t// Make sure busy indicator is displayed immediately when\n\t\t\t// detail view is displayed for the first time\n\t\t\toViewModel.setProperty(\"/delay\", 0);\n\t\t\toViewModel.setProperty(\"/lineItemTableDelay\", 0);\n\t\t\t\n\t\t\tif (!this.getModel(\"global\").getProperty(\"/isNew\")) {\n\t\t\t\t// Binding the view will set it to not busy - so the view is always busy if it is not bound\n\t\t\t\toViewModel.setProperty(\"/busy\", true);\n\t\t\t\t// Restore original busy indicator delay for the detail view\n\t\t\t\toViewModel.setProperty(\"/delay\", iOriginalViewBusyDelay);\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Called when the virtual checkbox is pressed.\n\t\t * Hides / shows the right input fields (either conversion or expresion field).\n\t\t * @param\t{object}\toEvent\tThe event object.\n\t\t * @returns {void}\n\t\t */\n\t\tonVirtualChanged: function(oEvent) {\n\t\t\tvar bSelected = oEvent.getSource().getSelected();\n\t\t\tthis.byId(\"lblConv\").setVisible(!bSelected);\n\t\t\tthis.byId(\"sensorConv\").setVisible(!bSelected);\n\t\t\tthis.byId(\"lblExpr\").setVisible(bSelected);\n\t\t\tthis.byId(\"sensorExpr\").setVisible(bSelected);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Commits the changes to the backend. This can either call a create or an update operation.\n\t\t */\n\t\tonSave: function() {\n\t\t\tvar sConversion = !this.byId(\"sensorVirtual\").getSelected() \n\t\t\t\t? (this.byId(\"sensorConv\").getValue() === \"\" ? null : this.byId(\"sensorConv\").getValue())\n\t\t\t\t: (this.byId(\"sensorExpr\").getValue() === \"\" ? null : this.byId(\"sensorExpr\").getValue());\n\t\t\tif (this.getModel(\"global\").getProperty(\"/isNew\")) {\n\t\t\t\tthis.getModel().create(\"/SensorTypes\", {\n\t\t\t\t\tid:\t\t\t\t\"\",\n\t\t\t\t\tname:\t\t\tthis.byId(\"sensorName\").getValue(),\n\t\t\t\t\tdescription:\tthis.byId(\"sensorDesc\").getValue(),\n\t\t\t\t\tmeasure:\t\tthis.byId(\"sensorMeasure\").getSelectedKey(),\n\t\t\t\t\tconversion:\t\tsConversion,\n\t\t\t\t\tvirtual:\t\tthis.byId(\"sensorVirtual\").getSelected() ? 1 : 0\n\t\t\t\t}, {\n\t\t\t\t\tsuccess: function(oData) {\n\t\t\t\t\t\tthis.getRouter().navTo(\"object\", {objectId: oData.id});\n\t\t\t\t\t}.bind(this)\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.getModel().update(this.getView().getElementBinding().getPath(), {\n\t\t\t\t\tname:\t\t\tthis.byId(\"sensorName\").getValue(),\n\t\t\t\t\tdescription:\tthis.byId(\"sensorDesc\").getValue(),\n\t\t\t\t\tmeasure:\t\tthis.byId(\"sensorMeasure\").getSelectedKey(),\n\t\t\t\t\tconversion:\t    sConversion,\n\t\t\t\t\tvirtual:\t\tthis.byId(\"sensorVirtual\").getSelected() ? 1 : 0\n\t\t\t\t}, {\n\t\t\t\t\tsuccess: function() {\n\t\t\t\t\t\tthis.getModel().refresh();\n\t\t\t\t\t\tthis.getModel(\"global\").setProperty(\"/edit\", false);\n\t\t\t\t\t}.bind(this)\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Event handler for pressing the edit button.\n\t\t */\n\t\tonEdit: function() {\n\t\t\tthis.getModel(\"global\").setProperty(\"/edit\", true);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Event handler for pressing the cancel button.\n\t\t */\n\t\tonCancel: function() {\n\t\t\tthis.getModel(\"global\").setProperty(\"/edit\", false);\n\t\t\tif (this.getModel(\"global\").getProperty(\"/isNew\")) {\n\t\t\t\tthis.getRouter().navTo(\"master\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.getModel().updateBindings(true);\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Deletes a sensor type.\n\t\t */\n\t\tonDelete: function() {\n\t\t    var oContext = this.getView().getBindingContext(),\n\t\t        fnOnSuccess = this.getRouter().navTo.bind(this.getRouter(), \"master\");\n\t        MessageBox.confirm(this.getResourceBundle().getText(\"confirmDeleteSensor\", [oContext.getProperty(\"name\")]), {\n\t            onClose: function(sAction) {\n\t                if (sAction === MessageBox.Action.OK) {\n\t                    oContext.getModel().remove(oContext.getPath(), {\n\t                        success: fnOnSuccess\n\t                    });\n\t                }\n\t            }\n\t        });\n\t\t},\n\t\t\n\t\t/**\n\t\t * Opens the conversion rule editor dialog.\n\t\t */\n\t\topenConvertDialog: function() {\n\t\t\tthis.getModel(\"detailView\").setProperty(\"/convertCorrect\", true);\n\t\t\tthis.byId(\"inpExpression\").setValue(this.byId(\"sensorConv\").getValue());\n\t\t\tthis.byId(\"lblExprResult\").setText(this.getResourceBundle().getText(\"testResultEmpty\"));\n\t\t\tthis.byId(\"dialogConvert\").setVisible(true).open();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Closes the conversion rule editor dialog.\n\t\t */\n\t\tcloseConvertDialog: function() {\n\t\t\tthis.byId(\"dialogConvert\").setVisible(false).close();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Parses and evaluates a conversion formula.\n\t\t */\n\t\ttestExpression: function() {\n\t\t\tif (this.byId(\"inpExpression\").getValue() === \"\") {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar sValue = this.byId(\"inpExpression\").getValue();\n\t\t\tvar sReplaced = sValue.replace(new RegExp(\"(\" + aMathFunctions.join(\"|\") + \")\", \"g\"), \"0\");\n\t\t\tif (!oConversionRegex.test(sReplaced)){\n\t\t\t\tthis.byId(\"lblExprResult\").setText(this.getResourceBundle().getText(\"exprError\"));\n\t\t\t\tthis.getModel(\"detailView\").setProperty(\"/convertCorrect\", false);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (this.byId(\"inpTest\").getValue() === \"\") {\n\t\t\t\t\tthis.byId(\"lblExprResult\").setText(this.getResourceBundle().getText(\"testResultEmpty\"));\n\t\t\t\t\tthis.getModel(\"detailView\").setProperty(\"/convertCorrect\", true);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar nTest = Number(this.byId(\"inpTest\").getValue());\n\t\t\t\tif (isNaN(nTest)) {\n\t\t\t\t\tthis.byId(\"lblExprResult\").setText(this.getResourceBundle().getText(\"testError\"));\n\t\t\t\t\tthis.getModel(\"detailView\").setProperty(\"/convertCorrect\", false);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tsReplaced = sValue.replace(new RegExp(\"(\" + aMathFunctions.join(\"|\") + \")\", \"g\"), \"Math.$1\");\n\t\t\t\t\tsReplaced = sReplaced.replace(/[#]+/g, nTest);\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthis.byId(\"lblExprResult\").setText(this.getResourceBundle().getText(\"testResult\", [eval(sReplaced)]));\n\t\t\t\t\t\tthis.getModel(\"detailView\").setProperty(\"/convertCorrect\", true);\n\t\t\t\t\t}\n\t\t\t\t\tcatch(e) {\n\t\t\t\t\t\tthis.byId(\"lblExprResult\").setText(this.getResourceBundle().getText(\"exprError\"));\n\t\t\t\t\t\tthis.getModel(\"detailView\").setProperty(\"/convertCorrect\", false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Applies the changes made in the dialog to the \"real\" input field.\n\t\t */\n\t\tchangeConvertValue: function() {\n\t\t\tthis.byId(\"sensorConv\").setValue(this.byId(\"inpExpression\").getValue());\n\t\t\tthis.closeConvertDialog();\n\t\t},\n\t\t\n\t\t\t/**\n\t\t * Opens the expression rule editor dialog.\n\t\t */\n\t\topenExpressionDialog: function() {\n\t\t\tvar sValue = this.byId(\"sensorExpr\").getValue();\n\t\t\tthis.getModel(\"detailView\").setProperty(\"/expressionCorrect\", true);\n\t\t\tthis.byId(\"inpCalculation\").setValue(sValue);\n\t\t\tthis._parseExpressionFields(sValue);\n\t\t\tthis.byId(\"lblCalcResult\").setText(this.getResourceBundle().getText(\"testResultEmpty\"));\n\t\t\tthis.byId(\"dialogExpression\").setVisible(true).open();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Closes the expression rule editor dialog.\n\t\t */\n\t\tcloseExpressionDialog: function() {\n\t\t\tthis.byId(\"dialogExpression\").setVisible(false).close();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Retrieves the fields from an expression and saves them in the model.\n\t\t * @param\t{string}\tsExpression\tThe calculation expression.\n\t\t * @returns {void}\n\t\t */\n\t\t_parseExpressionFields: function(sExpression) {\n\t\t\tvar aFields = sExpression.match(oExprFieldRegex),\n\t\t\t\taResults = [],\n\t\t\t\ti,\n\t\t\t\ti18n = this.getResourceBundle(); \n\t\t\tfor (i = 0; aFields && i < aFields.length; ++i) {\n\t\t\t\tvar sLabel = aFields[i].charAt(1) === \"S\" \n\t\t\t\t\t? i18n.getText(\"systemFieldLabel\", [aFields[i].substring(3, aFields[i].length - 1)])\n\t\t\t\t\t: i18n.getText(\"measureFieldLabel\", [aFields[i].substring(3, aFields[i].length - 1)]);\n\t\t\t\taResults.push({\n\t\t\t\t\tlabel: sLabel,\n\t\t\t\t\tname: aFields[i],\n\t\t\t\t\tvalue: 0\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.getModel(\"detailView\").getData().expressionFields = aResults;\n\t\t\tthis.getModel(\"detailView\").refresh();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Called when the calculation expression is changed. Parses the expression and tests it.\n\t\t */\n\t\tonCalcExprChanged: function() {\n\t\t\tvar sValue = this.byId(\"inpCalculation\").getValue();\n\t\t\tif (sValue === \"\") {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._parseExpressionFields(sValue);\n\t\t\tthis.testCalculation();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Parses and evaluates a calculation formula.\n\t\t */\n\t\ttestCalculation: function() {\n\t\t\tvar sValue = this.byId(\"inpCalculation\").getValue(),\n\t\t\t\tsReplaced,\n\t\t\t\taItems = this.byId(\"frcFields\").getFormElements(),\n\t\t\t\ti,\n\t\t\t\tsName,\n\t\t\t\tnTest;\n\t\t\tsReplaced = sValue.replace(new RegExp(\"(\" + aMathFunctions.join(\"|\") + \")\", \"g\"), \"0\");\n\t\t\tsReplaced = sReplaced.replace(oExprFieldRegex, \"0\");\n\t\t\tif (!oConversionRegex.test(sReplaced)){\n\t\t\t\tthis.byId(\"lblCalcResult\").setText(this.getResourceBundle().getText(\"exprError\"));\n\t\t\t\tthis.getModel(\"detailView\").setProperty(\"/expressionCorrect\", false);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsReplaced = sValue;\n\t\t\t\tfor (i = 0; i < aItems.length; ++i) {\n\t\t\t\t\tsName = aItems[i].getBindingContext(\"detailView\").getProperty(\"name\");\n\t\t\t\t\tnTest = parseFloat(aItems[i].getFields()[0].getValue()) || 0;\n\t\t\t\t\tnTest = isNaN(nTest) ? 0 : nTest;\n\t\t\t\t\tsReplaced = sReplaced.replace(new RegExp(sName.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"), \"g\"), nTest);\n\t\t\t\t}\n\t\t\t\tsReplaced = sReplaced.replace(new RegExp(\"(\" + aMathFunctions.join(\"|\") + \")\", \"g\"), \"Math.$1\");\n\t\t\t\ttry {\n\t\t\t\t\tthis.byId(\"lblCalcResult\").setText(this.getResourceBundle().getText(\"testResult\", [eval(sReplaced)]));\n\t\t\t\t\tthis.getModel(\"detailView\").setProperty(\"/expressionCorrect\", true);\n\t\t\t\t}\n\t\t\t\tcatch(e) {\n\t\t\t\t\tthis.byId(\"lblCalcResult\").setText(this.getResourceBundle().getText(\"exprError\"));\n\t\t\t\t\tthis.getModel(\"detailView\").setProperty(\"/expressionCorrect\", false);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Applies the changes made in the dialog to the \"real\" input field.\n\t\t */\n\t\tchangeExpressionValue: function() {\n\t\t\tthis.byId(\"sensorExpr\").setValue(this.byId(\"inpCalculation\").getValue());\n\t\t\tthis.closeExpressionDialog();\n\t\t}\n\t\t\n\n\t});\n\n});",
		"diploma/admin/sensor/model/models.js": "sap.ui.define([\n\t\"sap/ui/model/json/JSONModel\",\n\t\"sap/ui/Device\"\n], function(JSONModel, Device) {\n\t\"use strict\";\n\n\treturn {\n\t\tcreateDeviceModel: function() {\n\t\t\tvar oModel = new JSONModel(Device);\n\t\t\toModel.setDefaultBindingMode(\"OneWay\");\n\t\t\treturn oModel;\n\t\t},\n\n\t\tcreateFLPModel: function() {\n\t\t\tvar fnGetuser = jQuery.sap.getObject(\"sap.ushell.Container.getUser\"),\n\t\t\t\tbIsShareInJamActive = fnGetuser ? fnGetuser().isJamActive() : false,\n\t\t\t\toModel = new JSONModel({\n\t\t\t\t\tisShareInJamActive: bIsShareInJamActive\n\t\t\t\t});\n\t\t\toModel.setDefaultBindingMode(\"OneWay\");\n\t\t\treturn oModel;\n\t\t},\n\t\t\t\n\t\tcreateGlobalModel : function() {\n\t\t\treturn new JSONModel({\n\t\t\t\tedit: false,\n\t\t\t\tisNew: false\n\t\t\t});\n\t\t}\n\t};\n\n});",
		"diploma/admin/sensor/view/DetailObjectNotFound.view.xml": "<mvc:View controllerName=\"diploma.admin.sensor.controller.BaseController\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\">\n\t<MessagePage description=\"\" icon=\"{sap-icon://product}\" id=\"page\" navButtonPress=\"onNavBack\" showNavButton=\"{device>/system/phone}\"\n\t\ttext=\"{i18n>noObjectFoundText}\" title=\"{i18n>detailTitle}\"></MessagePage>\n</mvc:View>",
		"diploma/admin/sensor/view/Detail.view.xml": "<mvc:View controllerName=\"diploma.admin.sensor.controller.Detail\" \n    xmlns:footerbar=\"sap.ushell.ui.footerbar\" \n    xmlns:mvc=\"core.mvc\"\n\txmlns:semantic=\"sap.m.semantic\" \n\txmlns=\"sap.m\" \n\txmlns:core=\"sap.ui.core\" \n\txmlns:form=\"sap.ui.layout.form\"\n\txmlns:l=\"sap.ui.layout\">\n\t<semantic:DetailPage busy=\"{detailView>/busy}\" busyIndicatorDelay=\"{detailView>/delay}\" id=\"page\" navButtonPress=\"onNavBack\"\n\t\tshowNavButton=\"{device>/system/phone}\" title=\"{i18n>detailTitle}\">\n\t\t<semantic:content>\n\t\t\t<ObjectHeader id=\"objectHeader\" title=\"{name}\" visible=\"{= !${global>/isNew}}\"/>\n\t\t\t\t<form:SimpleForm editable=\"true\" \n\t\t\t\t    layout=\"ResponsiveGridLayout\" \n\t\t\t\t\tclass=\"editableForm\" maxContainerCols=\"2\"\n\t\t\t\t\ttitle=\"{i18n&gt;sensorHeader}\" \n\t\t\t\t\tlabelSpanL=\"3\" labelSpanM=\"3\" \n\t\t\t\t\temptySpanL=\"2\" emptySpanM=\"2\" \n\t\t\t\t\tcolumnsL=\"1\" columnsM=\"1\"\n\t\t\t\t\tvisible=\"{global>/edit}\">\n\t\t\t\t    \n\t\t\t\t\t<Label text=\"{i18n>sensorName}\"/>\n\t\t\t\t\t<Input value=\"{name}\" width=\"100%\" id=\"sensorName\"/>\n\t\t\t\t\t    \n\t\t\t\t\t<Label text=\"{i18n>sensorDesc}\" />\n\t\t\t\t\t<Input value=\"{description}\" width=\"100%\" id=\"sensorDesc\"/>\n\t\t\t\t\t    \n\t\t\t\t\t<Label text=\"{i18n>sensorVirtual}\" />\n\t\t\t\t\t<CheckBox id=\"sensorVirtual\" \n\t\t\t\t\t    selected=\"{= ${virtual} === 1 }\" \n\t\t\t\t\t    width=\"100%\" \n\t\t\t\t\t    select=\"onVirtualChanged\"/>\n\t\t\t\t\t    \n\t\t\t\t\t<Label text=\"{i18n>measure}\" />\n\t\t\t\t\t<Select id=\"sensorMeasure\" \n\t\t\t\t\t    items=\"{path: '/Measures', sorter: { path: 'name', descending: false } }\" \n\t\t\t\t\t\tselectedKey=\"{measure}\" \n\t\t\t\t\t\twidth=\"100%\">\n\t\t\t\t\t\t<core:Item key=\"{id}\" text=\"{name}\"/>\n\t\t\t\t\t</Select>\n\t\t\t\t\t\n\t\t\t\t\t<Label text=\"{i18n>sensorConv}\" visible=\"{= !${virtual} }\" id=\"lblConv\"/>\n\t\t\t\t\t<Input id=\"sensorConv\" \n\t\t\t\t\t    value=\"{= ${virtual} ? '' : ${conversion}}\"\n\t\t\t\t        width=\"100%\" \n\t\t\t\t        visible=\"{= !${virtual} }\" \n\t\t\t\t\t\tvalueHelpRequest=\"openConvertDialog\" \n\t\t\t\t\t\tshowValueHelp=\"true\" \n\t\t\t\t\t\tvalueHelpOnly=\"true\"/>\n\t\t\t\t\t    \n\t\t\t\t\t<Label id=\"lblExpr\" text=\"{i18n>sensorExpr}\" visible=\"{= !${virtual} === false }\"/>\n\t\t\t\t\t<Input id=\"sensorExpr\" \n\t\t\t\t\t    value=\"{= ${virtual} ? ${conversion} : ''}\" \n\t\t\t\t\t    width=\"100%\" \n\t\t\t\t\t\tvisible=\"{= !${virtual} === false }\" \n\t\t\t\t\t\tvalueHelpRequest=\"openExpressionDialog\" \n\t\t\t\t\t\tshowValueHelp=\"true\" \n\t\t\t\t\t\tvalueHelpOnly=\"true\" />\n\t\t\t\t\t    \n\t\t\t\t</form:SimpleForm>\n\t\t\t\n\t\t\t\t<form:SimpleForm \n\t\t\t\t    layout=\"ResponsiveGridLayout\" \n\t\t\t\t\tclass=\"editableForm\" maxContainerCols=\"2\"\n\t\t\t\t\ttitle=\"{i18n&gt;sensorHeader}\" \n\t\t\t\t\tlabelSpanL=\"3\" labelSpanM=\"3\" \n\t\t\t\t\temptySpanL=\"2\" emptySpanM=\"2\" \n\t\t\t\t\tcolumnsL=\"1\" columnsM=\"1\"\n\t\t\t\t\tvisible=\"{= !${global>/edit} }\">\n\t\t\t\t    \n\t\t\t\t\t<Label text=\"{i18n>sensorName}\"/>\n\t\t\t\t\t<Text text=\"{name}\"/>\n\t\t\t\t\t    \n\t\t\t\t\t<Label text=\"{i18n>sensorDesc}\" />\n\t\t\t\t\t<Text text=\"{description}\"/>\n\t\t\t\t\t    \n\t\t\t\t\t<Label text=\"{i18n>sensorVirtual}\" />\n\t\t\t\t\t<Text text=\"{= !${virtual} ? ${i18n>no} : ${i18n>yes} }\"/>\n\t\t\t\t\t    \n\t\t\t\t\t<Label text=\"{i18n>measure}\" />\n\t\t\t\t\t<Text  text=\"{\n\t\t\t\t\t\tparts: [{path: 'i18n>txtSensorMeasureText'}, {path: 'Measure/name'}, {path: 'Measure/unit'}], \n\t\t\t\t\t\tformatter: '.formatter.measureText'\n\t\t\t\t\t}\"/>\n\t\t\t\t\t    \n\t\t\t\t\t<Label text=\"{i18n>sensorConv}\" visible=\"{= !${virtual} }\"/>\n\t\t\t\t\t<Text text=\"{= ${conversion} || ${i18n>none} }\" visible=\"{= !${virtual} }\"/>\n\t\t\t\t\t    \n\t\t\t\t\t<Label text=\"{i18n>sensorExpr}\" visible=\"{= !${virtual} === false }\"/>\n\t\t\t\t\t<Text text=\"{= ${conversion} || ${i18n>none} }\" visible=\"{= !${virtual} === false }\" />\n\t\t\t\t\t    \n\t\t\t\t</form:SimpleForm>\n\t\t</semantic:content>\n\t\t\n\t\t<semantic:dependents>\n    \t    <core:Fragment fragmentName=\"diploma.admin.sensor.view.ExpressionDialog\" type=\"XML\" />\n    \t    <core:Fragment fragmentName=\"diploma.admin.sensor.view.ConversionDialog\" type=\"XML\" />\n\t\t</semantic:dependents>\n\t\t\n\t\t<semantic:customFooterContent>\n\t\t\t<OverflowToolbarButton visible=\"{= !${global>/edit} }\" icon=\"sap-icon://delete\" text=\"{i18n>btnRemove}\" press=\"onDelete\"/>\n\t\t\t<OverflowToolbarButton visible=\"{= !${global>/edit} }\" icon=\"sap-icon://edit\" text=\"{i18n>btnEdit}\" press=\"onEdit\"/>\n\t\t\t<OverflowToolbarButton visible=\"{global>/edit}\" icon=\"sap-icon://decline\" text=\"{i18n>btnCancel}\" press=\"onCancel\" />\n\t\t\t<OverflowToolbarButton visible=\"{global>/edit}\" icon=\"sap-icon://save\" text=\"{i18n>btnSave}\" press=\"onSave\" />\n\t\t</semantic:customFooterContent>\n\t</semantic:DetailPage>\n</mvc:View>",
		"diploma/admin/sensor/view/App.view.xml": "<mvc:View busy=\"{appView>/busy}\" busyIndicatorDelay=\"{appView>/delay}\" controllerName=\"diploma.admin.sensor.controller.App\"\n\tdisplayBlock=\"true\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\">\n\t<SplitApp id=\"idAppControl\"/>\n</mvc:View>",
		"diploma/admin/sensor/view/NotFound.view.xml": "<mvc:View controllerName=\"diploma.admin.sensor.controller.BaseController\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\">\n\t<MessagePage description=\"\" icon=\"{sap-icon://document}\" id=\"page\" navButtonPress=\"onNavBack\" showNavButton=\"{device>/system/phone}\"\n\t\ttext=\"{i18n>notFoundText}\" title=\"{i18n>notFoundTitle}\"></MessagePage>\n</mvc:View>",
		"diploma/admin/sensor/view/DetailNoObjectsAvailable.view.xml": "<mvc:View controllerName=\"diploma.admin.sensor.controller.BaseController\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\">\n\t<MessagePage description=\"\" icon=\"{sap-icon://product}\" id=\"page\" navButtonPress=\"onNavBack\" showNavButton=\"{device>/system/phone}\"\n\t\ttext=\"{i18n>noObjectsAvailableText}\" title=\"{i18n>notAvailableViewTitle}\"></MessagePage>\n</mvc:View>",
		"diploma/admin/sensor/view/ViewSettingsDialog.fragment.xml": "<core:FragmentDefinition xmlns:core=\"sap.ui.core\" xmlns=\"sap.m\">\n\t<ViewSettingsDialog confirm=\"onConfirmViewSettingsDialog\" id=\"viewSettingsDialog\" resetFilters=\"onViewSettingsDialogResetFilters\">\n\t\t<filterItems>\n\t\t\t<ViewSettingsFilterItem id=\"filterItems\" key=\"Price\" multiSelect=\"false\" text=\"{i18n>masterFilterName}\">\n\t\t\t\t<items>\n\t\t\t\t\t<ViewSettingsItem id=\"viewFilter1\" key=\"Filter1\" text=\"{i18n>masterFilter1}\"/>\n\t\t\t\t\t<ViewSettingsItem id=\"viewFilter2\" key=\"Filter2\" text=\"{i18n>masterFilter2}\"/>\n\t\t\t\t</items>\n\t\t\t</ViewSettingsFilterItem>\n\t\t</filterItems>\n\t</ViewSettingsDialog>\n</core:FragmentDefinition>",
		"diploma/admin/sensor/view/Master.view.xml": "<mvc:View controllerName=\"diploma.admin.sensor.controller.Master\" xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns:semantic=\"sap.m.semantic\" xmlns=\"sap.m\">\n\t<semantic:MasterPage id=\"page\" navButtonPress=\"onNavBack\" showNavButton=\"true\" title=\"{masterView>/title}\">\n\t\t<semantic:subHeader>\n\t\t\t<Bar id=\"headerBar\">\n\t\t\t\t<contentMiddle>\n\t\t\t\t\t<SearchField id=\"searchField\" search=\"onSearch\" showRefreshButton=\"{= !${device>/support/touch} }\" tooltip=\"{i18n>masterSearchTooltip}\"\n\t\t\t\t\t\twidth=\"100%\"></SearchField>\n\t\t\t\t</contentMiddle>\n\t\t\t</Bar>\n\t\t</semantic:subHeader>\n\t\t<semantic:content>\n\t\t\t<PullToRefresh id=\"pullToRefresh\" refresh=\"onRefresh\" visible=\"{device>/support/touch}\"/>\n\t\t\t<!-- For client side filtering add this to the items attribute:  parameters: {operationMode: 'Client'}}\" -->\n\t\t\t<List busyIndicatorDelay=\"{masterView>/delay}\" growing=\"true\" growingScrollToLoad=\"true\" growingThreshold=\"10\" id=\"list\"\n\t\t\t\titems=\"{ path: '/SensorTypes', sorter: { path: 'name', descending: false }, groupHeaderFactory: '.createGroupHeader' }\"\n\t\t\t\tmode=\"{= ${device>/system/phone} ? 'None' : 'SingleSelectMaster'}\" noDataText=\"{masterView>/noDataText}\" selectionChange=\"onSelectionChange\"\n\t\t\t\tupdateFinished=\"onUpdateFinished\">\n\t\t\t\t<infoToolbar>\n\t\t\t\t\t<Toolbar active=\"true\" id=\"filterBar\" press=\"onOpenViewSettings\" visible=\"{masterView>/isFilterBarVisible}\">\n\t\t\t\t\t\t<Title id=\"filterBarLabel\" text=\"{masterView>/filterBarLabel}\"/>\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</infoToolbar>\n\t\t\t\t<items>\n\t\t\t\t\t<ObjectListItem press=\"onSelectionChange\" title=\"{name}\" type=\"{= ${device>/system/phone} ? 'Active' : 'Inactive'}\"></ObjectListItem>\n\t\t\t\t</items>\n\t\t\t</List>\n\t\t</semantic:content>\n\t\t<semantic:dependents>\n    \t    <core:Fragment fragmentName=\"diploma.admin.sensor.view.MeasureManagement\" type=\"XML\" />\n\t\t</semantic:dependents>\n\t\t<semantic:customFooterContent>\n\t\t\t<Button icon=\"sap-icon://measuring-point\" \n\t\t\t    text=\"{i18n>btnMeasures}\"\n\t\t\t    tooltip=\"{i18n>btnMeasuresTooltip}\" \n\t\t\t    press=\"openMeasureDialog\"/>\n\t\t\t<Button icon=\"sap-icon://create\" \n\t\t\t    text=\"{i18n>btnCreate}\" \n\t\t\t    tooltip=\"{i18n>btnCreateTooltip}\" \n\t\t\t    visible=\"{= !${global>/edit} }\" \n\t\t\t    press=\"onCreate\"/>\n\t\t</semantic:customFooterContent>\n\t</semantic:MasterPage>\n</mvc:View>",
		"diploma/admin/sensor/view/MeasureManagement.fragment.xml": "<core:FragmentDefinition \n    xmlns:core=\"sap.ui.core\" \n    xmlns=\"sap.m\">\n    <Dialog title=\"{i18n>measureTitle}\" busyIndicatorDelay=\"500\" id=\"measureDialog\" \n\t\ttype=\"Standard\" contentHeight=\"75%\" contentWidth=\"20rem\" stretch=\"{device>/system/phone}\">\n\t\t<content>\n\t\t\t<IconTabBar expandable=\"false\" expanded=\"true\" >\n\t\t\t\t<items>\n\t\t\t\t\t<IconTabFilter icon=\"sap-icon://create\" text=\"{i18n>tabCreateMeasure}\" iconColor=\"Positive\">\n\t\t\t\t\t    <Panel>\n    \t\t\t\t\t\t<Label text=\"{i18n>measureName}\" />\n    \t\t\t\t\t\t<Input width=\"100%\" id=\"measureName\" />\n    \t\t\t\t\t\t<Label text=\"{i18n>measureDesc}\" />\n    \t\t\t\t\t\t<Input width=\"100%\" id=\"measureDesc\" />\n    \t\t\t\t\t\t<Label text=\"{i18n>measureUnit}\" />\n    \t\t\t\t\t\t<Input width=\"100%\" id=\"measureUnit\"  />\n    \t\t\t\t\t\t<Button text=\"{i18n>create}\" type=\"Accept\" press=\"createMeasure\" />\n\t\t\t\t\t    </Panel>\n\t\t\t\t\t</IconTabFilter>\n\t\t\t\t\t<IconTabFilter icon=\"sap-icon://delete\" text=\"{i18n>tabDeleteMeasure}\" iconColor=\"Negative\">\n\t\t\t\t\t\t<List id=\"measureList\" headerText=\"{i18n>measures}\" mode=\"Delete\" delete=\"deleteMeasure\"\n\t\t\t\t\t\t\titems=\"{path: '/Measures', sorter: { path: 'name', descending: false } }\" >\n\t\t\t\t\t\t\t<StandardListItem title=\"{name} ({unit})\" description=\"{description}\"/>\n\t\t\t\t\t\t</List>\n\t\t\t\t\t</IconTabFilter>\n\t\t\t\t</items>\n\t\t\t</IconTabBar>\n\t\t</content>\n\t\t<endButton><Button text=\"{i18n>close}\" press=\"closeMeasureDialog\"/></endButton>\n\t</Dialog>\n</core:FragmentDefinition>",
		"diploma/admin/sensor/view/ExpressionDialog.fragment.xml": "<core:FragmentDefinition \n    xmlns:core=\"sap.ui.core\" \n    xmlns:l=\"sap.ui.layout\" \n    xmlns:f=\"sap.ui.layout.form\"\n    xmlns=\"sap.m\">\n\t<Dialog title=\"{i18n>exprTitle}\" id=\"dialogExpression\" contentWidth=\"25rem\" contentHeight=\"35rem\" stretch=\"{device>/system/phone}\">\n\t\t<content>\n\t\t\t<Panel><l:VerticalLayout>\n\t\t\t\t<Label text=\"{i18n>expression}\"/>\n\t\t\t\t<Input width=\"100%\" id=\"inpCalculation\" change=\"onCalcExprChanged\"/>\n\t\t\t\t<Label text=\"{i18n>testExpr}\" />\n\t\t\t\t<f:Form maxContainerCols=\"2\" editable=\"true\">\n\t\t\t\t    <f:layout>\n        \t\t\t\t<f:ResponsiveGridLayout\n        \t\t\t\t\tlabelSpanL=\"3\" labelSpanM=\"3\"\n        \t\t\t\t\temptySpanL=\"1\" emptySpanM=\"1\"\n        \t\t\t\t\tcolumnsL=\"1\" columnsM=\"1\" />\n    \t\t\t    </f:layout>\n\t\t\t\t    <f:FormContainer id=\"frcFields\" formElements=\"{detailView>/expressionFields}\">\n\t\t\t\t\t    <f:FormElement label=\"{detailView>label}\">\n    \t\t\t\t\t\t<Input value=\"{detailView>value}\" liveChange=\"testCalculation\" \n    \t\t\t\t\t\t\tplaceholder=\"{i18n>testValue}\" type=\"Number\"/>\n\t\t\t\t\t\t</f:FormElement>\n\t\t\t\t\t</f:FormContainer>\n\t\t\t\t</f:Form>\n\t\t\t\t<Text id=\"lblCalcResult\" text=\"{i18n>testResultEmpty}\" class=\"sapUiSmallMarginBottom\"/>\n\t\t\t\t<Label text=\"{i18n>about}\" />\n\t\t\t\t<Text text=\"{i18n>aboutExpr}\" />\n\t\t\t</l:VerticalLayout></Panel>\n\t\t</content>\n\t\t<beginButton><Button text=\"{i18n>apply}\" press=\"changeExpressionValue\" enabled=\"{detailView>/expressionCorrect}\"/></beginButton>\n\t\t<endButton><Button text=\"{i18n>cancel}\" press=\"closeExpressionDialog\"/></endButton>\n\t</Dialog>\n</core:FragmentDefinition>",
		"diploma/admin/sensor/view/ConversionDialog.fragment.xml": "<core:FragmentDefinition \n    xmlns:core=\"sap.ui.core\" \n    xmlns:l=\"sap.ui.layout\"\n    xmlns=\"sap.m\">\n    <Dialog title=\"{i18n>convTitle}\" id=\"dialogConvert\" contentWidth=\"25rem\" contentHeight=\"35rem\" stretch=\"{device>/system/phone}\">\n    \t<content>\n    \t\t<Panel><l:VerticalLayout>\n    \t\t\t<Label text=\"{i18n>expression}\"/>\n    \t\t\t<Input width=\"100%\" id=\"inpExpression\" change=\"testExpression\"/>\n    \t\t\t<Label text=\"{i18n>testExpr}\" />\n    \t\t\t<Input id=\"inpTest\" width=\"100%\" liveChange=\"testExpression\" placeholder=\"{i18n>testValue}\" type=\"Number\"/>\n\t\t\t\t<Text id=\"lblExprResult\" text=\"{i18n>testResultEmpty}\" class=\"sapUiSmallMarginBottom\"/>\n    \t\t\t<Label text=\"{i18n>about}\" />\n    \t\t\t<Text text=\"{i18n>aboutLong}\" />\n    \t\t</l:VerticalLayout></Panel>\n    \t</content>\n    \t<beginButton>\n    \t    <Button text=\"{i18n>apply}\" press=\"changeConvertValue\" enabled=\"{detailView>/convertCorrect}\"/>\n\t    </beginButton>\n    \t<endButton>\n\t        <Button text=\"{i18n>cancel}\" press=\"closeConvertDialog\"/>\n        </endButton>\n    </Dialog>\n</core:FragmentDefinition>"
	}
});