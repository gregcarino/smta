/**
* This file was auto-generated by SAP Web IDE build and includes all
* the source files required by SAPUI5 runtime for performance optimization.
* PLEASE DO NOT EDIT THIS FILE!! Changes will be overwritten the next time the build is run.
*/
jQuery.sap.registerPreloadedModules({
	"version": "2.0",
	"name": "diploma/tracking/overview/Component-preload",
	"modules": {
		"diploma/tracking/overview/controller/App.controller.js": "sap.ui.define([\n\t\"diploma/tracking/overview/controller/BaseController\",\n\t\"sap/ui/model/json/JSONModel\"\n], function(BaseController, JSONModel) {\n\t\"use strict\";\n\n\treturn BaseController.extend(\"diploma.tracking.overview.controller.App\", {\n\n\t\tonInit: function() {\n\t\t\tvar oViewModel,\n\t\t\t\tfnSetAppNotBusy,\n\t\t\t\tiOriginalBusyDelay = this.getView().getBusyIndicatorDelay();\n\n\t\t\toViewModel = new JSONModel({\n\t\t\t\tbusy: true,\n\t\t\t\tdelay: 0\n\t\t\t});\n\t\t\tthis.setModel(oViewModel, \"appView\");\n\n\t\t\tfnSetAppNotBusy = function() {\n\t\t\t\toViewModel.setProperty(\"/busy\", false);\n\t\t\t\toViewModel.setProperty(\"/delay\", iOriginalBusyDelay);\n\t\t\t};\n\n\t\t\tthis.getOwnerComponent().getModel().metadataLoaded().\n\t\t\tthen(fnSetAppNotBusy);\n\n\t\t\t// apply content density mode to root view\n\t\t\tthis.getView().addStyleClass(this.getOwnerComponent().getContentDensityClass());\n\t\t}\n\t});\n\n});",
		"diploma/tracking/overview/controller/BaseController.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\"\n], function(Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"diploma.tracking.overview.controller.BaseController\", {\n\t\t/**\n\t\t * Convenience method for accessing the router.\n\t\t * @public\n\t\t * @returns {sap.ui.core.routing.Router} the router for this component\n\t\t */\n\t\tgetRouter: function() {\n\t\t\treturn sap.ui.core.UIComponent.getRouterFor(this);\n\t\t},\n\n\t\t/**\n\t\t * Convenience method for getting the view model by name.\n\t\t * @public\n\t\t * @param {string} [sName] the model name\n\t\t * @returns {sap.ui.model.Model} the model instance\n\t\t */\n\t\tgetModel: function(sName) {\n\t\t\treturn this.getView().getModel(sName);\n\t\t},\n\n\t\t/**\n\t\t * Convenience method for setting the view model.\n\t\t * @public\n\t\t * @param {sap.ui.model.Model} oModel the model instance\n\t\t * @param {string} sName the model name\n\t\t * @returns {sap.ui.mvc.View} the view instance\n\t\t */\n\t\tsetModel: function(oModel, sName) {\n\t\t\treturn this.getView().setModel(oModel, sName);\n\t\t},\n\n\t\t/**\n\t\t * Getter for the resource bundle.\n\t\t * @public\n\t\t * @returns {sap.ui.model.resource.ResourceModel} the resourceModel of the component\n\t\t */\n\t\tgetResourceBundle: function() {\n\t\t\treturn this.getOwnerComponent().getModel(\"i18n\").getResourceBundle();\n\t\t},\n\n\t\t/**\n\t\t * Event handler when the share by E-Mail button has been clicked\n\t\t * @public\n\t\t */\n\t\tonShareEmailPress: function() {\n\t\t\tvar oViewModel = (this.getModel(\"objectView\") || this.getModel(\"worklistView\"));\n\t\t\tsap.m.URLHelper.triggerEmail(\n\t\t\t\tnull,\n\t\t\t\toViewModel.getProperty(\"/shareSendEmailSubject\"),\n\t\t\t\toViewModel.getProperty(\"/shareSendEmailMessage\")\n\t\t\t);\n\t\t}\n\n\t});\n\n});",
		"diploma/tracking/overview/controller/ErrorHandler.js": "sap.ui.define([\n\t\"sap/ui/base/Object\",\n\t\"sap/m/MessageBox\"\n], function(Object, MessageBox) {\n\t\"use strict\";\n\n\treturn Object.extend(\"diploma.tracking.overview.controller.ErrorHandler\", {\n\n\t\t/**\n\t\t * Handles application errors by automatically attaching to the model events and displaying errors when needed.\n\t\t * @class\n\t\t * @param {sap.ui.core.UIComponent} oComponent reference to the app's component\n\t\t * @public\n\t\t * @alias diploma.tracking.overview.controller.ErrorHandler\n\t\t */\n\t\tconstructor: function(oComponent) {\n\t\t\tthis._oResourceBundle = oComponent.getModel(\"i18n\").getResourceBundle();\n\t\t\tthis._oComponent = oComponent;\n\t\t\tthis._oModel = oComponent.getModel();\n\t\t\tthis._bMessageOpen = false;\n\t\t\tthis._sErrorText = this._oResourceBundle.getText(\"errorText\");\n\n\t\t\tthis._oModel.attachMetadataFailed(function(oEvent) {\n\t\t\t\tvar oParams = oEvent.getParameters();\n\t\t\t\tthis._showMetadataError(oParams.response);\n\t\t\t}, this);\n\n\t\t\tthis._oModel.attachRequestFailed(function(oEvent) {\n\t\t\t\tvar oParams = oEvent.getParameters();\n\n\t\t\t\t// An entity that was not found in the service is also throwing a 404 error in oData.\n\t\t\t\t// We already cover this case with a notFound target so we skip it here.\n\t\t\t\t// A request that cannot be sent to the server is a technical error that we have to handle though\n\t\t\t\tif (oParams.response.statusCode !== \"404\" || (oParams.response.statusCode === 404 && oParams.response.responseText.indexOf(\n\t\t\t\t\t\"Cannot POST\") === 0)) {\n\t\t\t\t\tthis._showServiceError(oParams.response);\n\t\t\t\t}\n\t\t\t}, this);\n\t\t},\n\n\t\t/**\n\t\t * Shows a {@link sap.m.MessageBox} when the metadata call has failed.\n\t\t * The user can try to refresh the metadata.\n\t\t * @param {string} sDetails a technical error to be displayed on request\n\t\t * @private\n\t\t */\n\t\t_showMetadataError: function(sDetails) {\n\t\t\tMessageBox.error(\n\t\t\t\tthis._sErrorText, {\n\t\t\t\t\tid: \"metadataErrorMessageBox\",\n\t\t\t\t\tdetails: sDetails,\n\t\t\t\t\tstyleClass: this._oComponent.getContentDensityClass(),\n\t\t\t\t\tactions: [MessageBox.Action.RETRY, MessageBox.Action.CLOSE],\n\t\t\t\t\tonClose: function(sAction) {\n\t\t\t\t\t\tif (sAction === MessageBox.Action.RETRY) {\n\t\t\t\t\t\t\tthis._oModel.refreshMetadata();\n\t\t\t\t\t\t}\n\t\t\t\t\t}.bind(this)\n\t\t\t\t}\n\t\t\t);\n\t\t},\n\n\t\t/**\n\t\t * Shows a {@link sap.m.MessageBox} when a service call has failed.\n\t\t * Only the first error message will be display.\n\t\t * @param {string} sDetails a technical error to be displayed on request\n\t\t * @private\n\t\t */\n\t\t_showServiceError: function(sDetails) {\n\t\t\tif (this._bMessageOpen) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._bMessageOpen = true;\n\t\t\tMessageBox.error(\n\t\t\t\tthis._sErrorText, {\n\t\t\t\t\tid: \"serviceErrorMessageBox\",\n\t\t\t\t\tdetails: sDetails,\n\t\t\t\t\tstyleClass: this._oComponent.getContentDensityClass(),\n\t\t\t\t\tactions: [MessageBox.Action.CLOSE],\n\t\t\t\t\tonClose: function() {\n\t\t\t\t\t\tthis._bMessageOpen = false;\n\t\t\t\t\t}.bind(this)\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t});\n});",
		"diploma/tracking/overview/controller/Main.controller.js": "/* global google */\nsap.ui.define([\n\t\"diploma/tracking/overview/controller/BaseController\",\n\t\"sap/ui/model/json/JSONModel\",\n    \"sap/m/GroupHeaderListItem\",\n    \"diploma/tracking/overview/controller/MapManager\",\n    \"diploma/tracking/overview/controller/MarkerBase\",\n    \"diploma/tracking/overview/controller/Marker\",\n\t\"diploma/tracking/overview/model/formatter\"\n], function(BaseController, JSONModel, GroupHeaderListItem, MapManager, MarkerBase, Marker, formatter) {\n\t\"use strict\";\n\t\n\tvar iAutoRefreshInterval = 5000;\n\n\treturn BaseController.extend(\"diploma.tracking.overview.controller.Main\", {\n\n\t\tformatter: formatter,\n\t\t\n\t\t/* =========================================================== */\n\t\t/* lifecycle methods                                           */\n\t\t/* =========================================================== */\n\n\t\t/**\n\t\t * Called when the controller is instantiated.\n\t\t */\n\t\tonInit: function() {\n\t\t\tvar oi18n = this.getResourceBundle(),\n\t\t\t\toViewModel = new JSONModel({\n\t\t\t\ttype: -1,\n\t\t\t\tfilters: [{\n\t\t\t\t\ticon:\t\t$.sap.getModulePath(\"diploma.tracking.overview.images\", \"/blue.png\"),\n\t\t\t\t\ttitle:\t\toi18n.getText(\"inactiveLocations\"),\n\t\t\t\t\tselected:\ttrue\n\t\t\t\t},{\n\t\t\t\t\ticon:\t\t$.sap.getModulePath(\"diploma.tracking.overview.images\", \"/blue-dot.png\"),\n\t\t\t\t\ttitle:\t\toi18n.getText(\"activeLocations\"),\n\t\t\t\t\tselected:\ttrue\n\t\t\t\t},{\n\t\t\t\t\ticon:\t\t$.sap.getModulePath(\"diploma.tracking.overview.images\", \"/red-dot.png\"),\n\t\t\t\t\ttitle:\t\toi18n.getText(\"transports\"),\n\t\t\t\t\tselected:\ttrue\n\t\t\t\t}],\n\t\t\t\tsettings: {\n\t\t\t\t\tfetchType: 0,\n\t\t\t\t\tautorefresh: true,\n\t\t\t\t\tfixedDate: new Date(),\n\t\t\t\t\tbeginDate: new Date(new Date().setDate(new Date().getDate()-1)),\n\t\t\t\t\tendDate: new Date()\n\t\t\t\t},\n\t\t\t\tcontrols: {\n\t\t\t\t\tfirstFetch: true,\n\t\t\t\t\tsecondFetch: false,\n\t\t\t\t\tthirdFetch: false\n\t\t\t\t},\n\t\t\t\tslider: {\n\t\t\t\t\tmin:\t\t0,\n\t\t\t\t\tmax:\t\t100,\n\t\t\t\t\tselected:\t50\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tthis._lastDate = new Date();\n\t\t\t\n\t\t\tthis.setModel(oViewModel, \"main\");\n\t\t\tthis.getOwnerComponent().getMapPromise().then(this.onAfterMapRender.bind(this));\n\t\t\tthis.byId(\"map\").attachAfterRendering(this.onAfterMapRender, this);\n\t\t\t\n\t\t\tsetInterval(function(){\n\t\t\t\tif (oViewModel.getProperty(\"/settings/autorefresh\") && oViewModel.getProperty(\"/settings/fetchType\") === 0) {\n\t\t\t\t\tthis.onRebind();\n\t\t\t\t}\n\t\t\t}.bind(this), iAutoRefreshInterval);\n\t\t\t\n\t\t\tvar oText = new sap.m.Text({\n\t\t\t\twidth:\t\t\"100%\",\n\t\t\t\ttextAlign:\t\"Center\"\n\t\t\t});\n\t\t\tthis._popover = new sap.m.Popover({\n\t\t\t\tshowHeader: false,\n\t\t\t\tplacement:  \"Top\",\n\t\t\t\tcontent:\t[oText]\n\t\t\t});\n\t\t\tthis._popover.setText = oText.setText.bind(oText);\n\t\t\t\n\t\t\tvar sDensityClass = this.getOwnerComponent().getContentDensityClass();\n\t\t\tthis.byId(\"page\").getDependents().forEach(function(oItem) {\n\t\t\t    oItem.addStyleClass(sDensityClass);\n\t\t\t});\n\t\t\tjQuery.sap.delayedCall(500, this, function(){\n\t\t\t\tif (google && this._map) {\n\t\t\t\t\tgoogle.maps.event.trigger(this._map, \"resize\");\n\t\t\t\t\tthis._map.setCenter(new google.maps.LatLng(45.33,28.20));\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t/* =========================================================== */\n\t\t/* event handlers                                              */\n\t\t/* =========================================================== */\n\t\t\n\t\t/** \n\t\t * Called after the map is redered or the google maps lib is loaded.\n\t\t * Initializes the map and map manager.\n\t\t */\n\t\tonAfterMapRender: function(){\n\t\t\tvar oMapRef = this.byId(\"map\").getDomRef();\n\t\t\tif (typeof google !== \"undefined\" && oMapRef && !this._map) {\n\t\t\t\tthis._map = new google.maps.Map(oMapRef, {\n    \t\t\t\tmapTypeId:\tgoogle.maps.MapTypeId.ROADMAP,\n    \t\t\t\tzoom:\t\t6\n\t\t\t\t});\n\t\t\t\tthis._map.data.setStyle({\n\t\t\t\t\tstrokeWeight: 3,\n\t\t\t\t\tstrokeColor: \"blue\"\n\t\t\t\t});\n\t\t\t\tthis._createMapManager();\n\t\t\t\tthis.onRebind();\n\t\t\t}\n\t\t},\n\t\t\n\t\tonRefresh: function() {\n\t\t\tthis.getModel().refresh();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Called when the model manager needs to be rebinded.\n\t\t * Selects the appropriate date on for the rebinding and rebinds the datail aggragations.\n\t\t * @param\t{Date=}\toDate\tThe date to be used for the binding. \n\t\t *\t\t\t\t\t\t\tIf it is not provided, the current date is used.\n\t\t * @returns {void}\n\t\t */\n\t\tonRebind: function(oDate) {\n\t\t\tvar oManager = this.byId(\"mapManager\");\n\t\t\tif (!oManager) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!oDate) {\n\t\t\t\toDate = new Date();\n\t\t\t}\n\t\t\tthis._lastDate = oDate;\n\t\t\toManager.bindLocationDetails({\n\t\t\t\tpath: \"/\" + this.getModel().createKey(\"LatestLocationTypesParameters\", {\n\t\t\t\t\t\"IV_DATE\":\toDate\n\t\t\t\t}) + \"/LatestLocationTypes\",\n\t\t\t\ttemplate: new MarkerBase({\n\t\t\t\t\tkey:\t\"{id}\",\n\t\t\t\t\ticon: {\n\t\t\t\t\t\tpath: \"active\",\n\t\t\t\t\t\tformatter: function(iIsActive) {\n\t\t\t\t\t\t\treturn $.sap.getModulePath(\"diploma.tracking.overview.images\", \n\t\t\t\t\t\t\t\tiIsActive === 0 ? \"/blue.png\" : \"/blue-dot.png\");\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tvisible: {\n\t\t\t\t\t\tparts: [\"active\", \"main>/filters/1/selected\", \"main>/filters/0/selected\"],\n\t\t\t\t\t\tformatter: function(iIsActive, bShowActive, bShowInactive) {\n\t\t\t\t\t\t\treturn (iIsActive === 0 && bShowInactive) || (iIsActive === 1 && bShowActive);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t});\n\t\t\toManager.bindTransportDetails({\n\t\t\t\tpath: \"/\" + this.getModel().createKey(\"LatestTransportReadingParameters\", {\n\t\t\t\t\t\"IV_DATE\":\toDate\n\t\t\t\t}) + \"/LatestTransportReadings\",\n\t\t\t\ttemplate: new MarkerBase({\n\t\t\t\t\tkey:\t\t\"{transport}\",\n\t\t\t\t\tdetailKey:\t\"{reading}\",\n\t\t\t\t\tvisible: {\n\t\t\t\t\t\tpath: \"active\",\n\t\t\t\t\t\tformatter: function(iIsActive) {\n\t\t\t\t\t\t\treturn iIsActive !== 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tlatitude: {\n\t\t\t\t\t\tpath:\t\t\"latitude\",\n\t\t\t\t\t\tformatter:\tparseFloat\n\t\t\t\t\t},\n\t\t\t\t\tlongitude: {\n\t\t\t\t\t\tpath:\t\t\"longitude\",\n\t\t\t\t\t\tformatter:\tparseFloat\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t});\n\t\t},\n\t\t\n        /**\n         * Factory function for the grouping headers of the linked transport list for a location.\n         * @param   {object}    oGroup  The group object passed by the framework.\n         * @returns {GroupHeaderListItem} The created list item (group header).\n         */\n        getLinkGroupHeader: function(oGroup) {\n            var oi18n = this.getResourceBundle();\n            return new GroupHeaderListItem({\n                title:  oGroup.key === 0 ? oi18n.getText(\"incoming\") : oi18n.getText(\"outgoing\"),\n\t\t\t\tupperCase: false\n            });\n        },\n\t\t\n\t\t/**\n\t\t * Navigates back in the browser history, if the entry was created by this app.\n\t\t * If not, it navigates to the Fiori Launchpad home page.\n\t\t */\n\t\tonNavBack: function() {\n\t\t\tvar oHistory = sap.ui.core.routing.History.getInstance(),\n\t\t\t\tsPreviousHash = oHistory.getPreviousHash(),\n\t\t\t\toCrossAppNavigator = sap.ushell.Container.getService(\"CrossApplicationNavigation\");\n\n\t\t\tif (sPreviousHash !== undefined) {\n\t\t\t\t// The history contains a previous entry\n\t\t\t\thistory.go(-1);\n\t\t\t} else {\n\t\t\t\t// Navigate back to FLP home\n\t\t\t\toCrossAppNavigator.toExternal({\n\t\t\t\t\ttarget: {\n\t\t\t\t\t\tshellHash: \"#\"\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Open the place filter dialog.\n\t\t */\n\t\topenFilterDialog: function() {\n\t\t\tthis.byId(\"dialogFilter\").open();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Event handler for when the user changes the slider (and releases it).\n\t\t * Refreshes the map content based on the slider value.\n\t\t * @param\t{object}\toEvent The event object.\n\t\t * @returns {void}\n\t\t */\n\t\tonSliderChange: function(oEvent) {\n\t\t\tvar iValue = oEvent.getSource().getValue();\n\t\t\tthis.onRebind(new Date(iValue));\n\t\t},\n\t\t\n\t\t/**\n\t\t * Event handler for when the user changes the slider (and does not yet release it).\n\t\t * Refreshes the popover value.\n\t\t * @param\t{object}\toEvent The event object.\n\t\t * @returns {void}\n\t\t */\n\t\tonSliderLiveChange: function(oEvent) {\n\t\t\tthis._popover.setText(formatter.dateTime(oEvent.getSource().getValue()));\n\t\t\tthis._popover.openBy(oEvent.getSource());\n\t\t},\n\t\t\n\t\t/**\n\t\t * Closes the filter dialog\n\t\t */\n\t\tcloseFilter: function() {\n\t\t\tthis.byId(\"dialogFilter\").close();\n\t\t},\n\t\t\n\t\t\n\t\t/**\n\t\t * Open the place search dialog.\n\t\t */\n\t\topenSearchDialog: function() {\n\t\t\tthis.getModel(\"main\").setProperty(\"/markers\", this.byId(\"mapManager\").getVisibleMarkers());        \n\t\t\tthis.byId(\"dialogSearch\").getBinding(\"items\").filter([]);\n\t\t\tthis.byId(\"dialogSearch\").open();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Close the place search dialog.\n\t\t */\n\t\tcloseSearchDialog: function(oEvent) {\n\t\t\tvar aContexts = oEvent.getParameter(\"selectedContexts\");\n\t\t\tif (aContexts && aContexts.length) {\n\t\t\t\tthis.byId(\"mapManager\").goToMarker(aContexts[0].getProperty(\"key\"));\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Open the settings dialog.\n\t\t */\n\t\topenSettingsDialog: function() {\n\t\t\tthis.byId(\"dialogSettings\").open();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Event handler for the change event of the radio button group.\n\t\t */\n\t\tonRadioChange: function() {\n\t\t\tvar oModel = this.getModel(\"main\");\n\t\t\tvar iIndex = oModel.getProperty(\"/settings/fetchType\");\n\t\t\toModel.setProperty(\"/controls/firstFetch\", iIndex === 0);\n\t\t\toModel.setProperty(\"/controls/secondFetch\", iIndex === 1);\n\t\t\toModel.setProperty(\"/controls/thirdFetch\", iIndex === 2);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Applies the settings entered by the user.\n\t\t */\n\t\tapplySettings: function() {\n\t\t\tvar oModel = this.getModel(\"main\");\n\t\t\tvar iType = oModel.getProperty(\"/settings/fetchType\");\n\t\t\tif (iType === 0) {\n\t\t\t\tthis.onRebind();\n\t\t\t}\n\t\t\telse if (iType === 1) {\n\t\t\t\tthis.onRebind(oModel.getProperty(\"/settings/fixedDate\"));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvar iBegin = Math.min(oModel.getProperty(\"/settings/beginDate\").getTime(), oModel.getProperty(\"/settings/endDate\").getTime());\n\t\t\t\tvar iEnd   = Math.max(oModel.getProperty(\"/settings/beginDate\").getTime(), oModel.getProperty(\"/settings/endDate\").getTime());\n\t\t\t\toModel.setProperty(\"/slider/min\", iBegin);\n\t\t\t\toModel.setProperty(\"/slider/max\", iEnd);\n\t\t\t\toModel.setProperty(\"/slider/selected\", (iEnd + iBegin) / 2);\n\t\t\t\tthis.onRebind(new Date((iEnd + iBegin) / 2));\n\t\t\t}\n\t\t\tthis.byId(\"dialogSettings\").close();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Search a string in the list of places.\n\t\t * @param\t{Event}\toEvent\tThe event object.\n\t\t * @retuns {void}\n\t\t */\n\t\tonSearch: function(oEvent) {\n\t\t\tvar sValue = oEvent.getParameter(\"value\");\n\t\t\tvar oFilter = new sap.ui.model.Filter(\"title\", sap.ui.model.FilterOperator.Contains, sValue);\n\t\t\tvar oBinding = oEvent.getSource().getBinding(\"items\");\n\t\t\toBinding.filter([oFilter]);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Event handler for pressing a transport list item.\n\t\t * @param\t{Event}\toEvent\tThe event object.\n\t\t * @returns\t{void}\n\t\t */\n\t\tonTransportPress: function(oEvent) {\n\t\t\tvar oItem = oEvent.getParameter(\"listItem\");\n\t\t\tif (oItem) {\n\t\t\t\tvar sId = oItem.getBindingContext().getProperty(\"transport\");\n\t\t\t\tthis.byId(\"mapManager\").goToMarker(sId);\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Event handler for pressing a link to a location.\n\t\t * @param\t{Event}\toEvent\tThe event object.\n\t\t * @returns {void}\n\t\t */\n\t\tonLocationPress: function(oEvent) {\n\t\t\tthis.byId(\"mapManager\").goToMarker(oEvent.getSource().data(\"id\"));\n\t\t},\n\t\t\n\t\t/** \n\t\t * Event handler for when the user presses the \"X\" button on the side content.\n\t\t * Closes the side content and notifies the map manager to clear the selection.\n\t\t */\n\t\tonCloseSizeContent: function() {\n\t\t\tthis._hideSideContent(true);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Called when a transport marker is pressed.\n\t\t * Rebinds the transport details panel. Loads the route if necessary.\n\t\t * @param\t{Event}\toEvent\tThe event object.\n\t\t * @returns {void}\n\t\t */\n\t\tonTransportMarkerPress: function(oEvent) {\t\n\t\t\tvar oModel = this.getModel(),\n\t\t\t\tsPath = \"/\" + oModel.createKey(\"Readings\", {id: oEvent.getParameter(\"reading\")});\n\t\t\tthis._onMarkerPress(2);\n\t\t\tthis.byId(\"readingDetails\").bindElement(sPath, {\n\t\t\t\texpand: \"Transport,Transport/Route/ToLocation,Transport/Route/FromLocation\"\n\t\t\t});\n\t\t\tif (!oEvent.getParameter(\"alreadySelected\")) {\n\t\t\t\tthis._clearRoute();\n\t\t\t\tthis._loadRoute(oEvent.getParameter(\"transport\"));\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Called when a location marker is pressed.\n\t\t * Rebinds the location links table and the location details panel.\n\t\t * @param\t{Event}\toEvent\tThe event object.\n\t\t * @returns {void}\n\t\t */\n\t\tonLocationMarkerPress: function(oEvent) {\n\t\t\tvar oModel = this.getModel(),\n\t\t\t\tsLocationPath = \"/\" + oModel.createKey(\"Locations\", {id: oEvent.getParameter(\"location\")}),\n\t\t\t\tsLinkPath = \"/\" + oModel.createKey(\"LocationLinkParameters\", {\n\t\t\t\t\t\"IV_LOCATION\":\toEvent.getParameter(\"location\"),\n\t\t\t\t\t\"IV_DATE\":\t\tthis._lastDate\n\t\t\t\t});\n\t\t\tthis._clearRoute();\n\t\t\tthis._onMarkerPress(1);\n\t\t\tthis.byId(\"lstLocationLinks\").bindElement(sLinkPath);\n\t\t\tthis.byId(\"locationDetails\").bindElement(sLocationPath);\n\t\t},\n\t\t\n\t\t/* =========================================================== */\n\t\t/* internal methods                                            */\n\t\t/* =========================================================== */\n\t\t\n\t\t/**\n\t\t * Hide the content of the side panel.\n\t\t * The function can also notify the map manager to clear the selection.\n\t\t * @private\n\t\t * @param\t{boolean}\tbNotifyManager\tFlag indicating if the manager should be notified.\n\t\t * @returns {void}\t\n\t\t */\n\t\t_hideSideContent: function(bNotifyManager) {\n\t\t\tthis.getModel(\"main\").setProperty(\"/type\", -1);\n\t\t\tvar oCenter = this._map.getCenter();\n\t\t\tgoogle.maps.event.trigger(this._map, \"resize\");\n\t\t\tthis._map.setCenter(oCenter);\n\t\t\tif (bNotifyManager === true) {\n\t\t\t\tthis.byId(\"mapManager\").clearSelection();            \n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Helper method which manages the side content when a marker is pressed.\n\t\t * @private\n\t\t * @param\t{integer}\tiNewType\tThe type of the pressed marker. 1 for locations, 2 for transports.\n\t\t * @returns {void}\n\t\t */\n\t\t_onMarkerPress: function(iNewType) {\n\t\t\tvar iType = this.getModel(\"main\").getProperty(\"/type\");\n\t\t\tthis.getModel(\"main\").setProperty(\"/type\", iNewType);\n\t\t\tif (this.byId(\"sideContent\").getCurrentBreakpoint() === \"S\") {\n\t\t\t\tthis.byId(\"sideContent\").toggle();\n\t\t\t}\n\t\t\tif (iType < 0) {\n\t\t\t\tvar oCenter = this._map.getCenter();\n\t\t\t\tgoogle.maps.event.trigger(this._map, \"resize\");\n\t\t\t\tthis._map.setCenter(oCenter);\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Loads a route to display it.\n\t\t * @private\n\t\t * @param\t{string}\tsTransportId\tThe id of the transport.\n\t\t * @returns {void}\t\n\t\t */\n\t\t_loadRoute: function(sTransportId) {\n\t\t\tvar oMap = this._map;\n\t\t\t$.ajax({\n\t\t\t\tmethod: \"GET\",\n\t\t\t\turl:\t\"/destinations/INET_HTTP_DIPLOMA_J0I/services/primary.xsjs\", \n\t\t\t\tdata: {\n\t\t\t\t\tentity:\t\"Transport\",\n\t\t\t\t\tid:\t\tsTransportId\n\t\t\t\t}, \n\t\t\t\tdataType: \"json\",\n\t\t\t\tsuccess: function(oData){\n\t\t\t\t\tif (oData) {\n\t\t\t\t\t\toMap.data.addGeoJson({\n\t\t\t\t\t\t\ttype: \"Feature\",\n\t\t\t\t\t\t\tgeometry: oData\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t\n\t\t/**\n\t\t * Clears the route from the map.\n\t\t * @private\n\t\t */\n\t\t_clearRoute: function() {\n\t\t\tthis._map.data.forEach(function(feature) {\n\t\t        this._map.data.remove(feature);\n\t\t    }.bind(this));\n\t\t},\n\t\t\n\t\t/** \n\t\t *  Builds the map manager. \n\t\t *  @private \n\t\t */\n\t\t_createMapManager: function() {\n\t\t\tvar oMapManager = new MapManager(this.createId(\"mapManager\"), {\n\t\t\t\tgoogleMap: this._map,\n\t\t\t\tlocationPress: [this.onLocationMarkerPress, this],\n\t\t\t\ttransportPress: [this.onTransportMarkerPress, this],\n\t\t\t\tselectionRemoved: [function(){\n\t\t\t\t\tthis._hideSideContent(false);\n\t\t\t\t\tthis._clearRoute();\n\t\t\t\t}, this]\n\t\t\t});\n\t\t\tthis.getView().addDependent(oMapManager);\n\t\t\toMapManager.bindLocations({\n\t\t\t\tpath:\t\"/ExpandedLocations\",\n\t\t\t\ttemplate: new Marker({\n\t\t\t\t\tkey:\t\t\"{id}\",\n\t\t\t\t\tdetailKey:\t\"{id}\",\n\t\t\t\t\ttitle:\t\t\"{name}\",\n\t\t\t\t\tvisible:\ttrue,\n\t\t\t\t\tlatitude: {\n\t\t\t\t\t\tpath:\t\t\"latitude\",\n\t\t\t\t\t\tformatter:\tparseFloat\n\t\t\t\t\t},\n\t\t\t\t\tlongitude: {\n\t\t\t\t\t\tpath:\t\t\"longitude\",\n\t\t\t\t\t\tformatter:\tparseFloat\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t});\n\t\t\toMapManager.bindTransports({\n\t\t\t\tpath:\t\"/Transports\",\n\t\t\t\ttemplate: new Marker({\n\t\t\t\t\tkey:\t\"{id}\",\n\t\t\t\t\ticon:\t$.sap.getModulePath(\"diploma.tracking.overview.images\", \"/red-dot.png\"),\n\t\t\t\t\ttitle:\t\"{description}\",\n\t\t\t\t\tvisible: \"{main>/filters/2/selected}\"\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t\t\n\t});\n});",
		"diploma/tracking/overview/controller/MarkerBase.js": "sap.ui.define([\n\t\"sap/ui/core/Element\"\n], function(Element) {\n\t\"use strict\";\n\t\n\t/**\n\t * Base class for markers. Only holds simple properties with no logic attached.\n\t * @class\n\t * @name MarkerBase\n\t */\n\treturn Element.extend(\"diploma.tracking.overview.controller.MarkerBase\", {\n\t\tmetadata: {\n\t\t\tproperties: {\n\t\t\t\tkey:\t\t{type: \"string\", defaultValue: undefined},\n\t\t\t\tdetailKey:\t{type: \"string\", defaultValue: undefined},\n\t\t\t\ttitle:\t\t{type: \"string\", defaultValue: undefined},\n\t\t\t\ticon:\t\t{type: \"sap.ui.core.URI\", defaultValue: undefined},\n\t\t\t\tlatitude:\t{type: \"float\", defaultValue: undefined},\n\t\t\t\tlongitude:\t{type: \"float\", defaultValue: undefined},\n\t\t\t\tvisible:\t{type: \"boolean\", defaultValue: undefined}\n\t\t\t}\n\t\t}\n\t});\n});",
		"diploma/tracking/overview/controller/MarkerManager.js": "/* global google */\nsap.ui.define([], function() {\n\t\"use strict\";\n\tvar aFree = [];\n\t\n\treturn {\n\t\t/**\n\t\t * Gets a \"new\" marker. This marker can either be created or taken from the \"free\" markers.\n\t\t * @returns {object}\tA google maps marker.\n\t\t */\n\t\tcreate: function() {\n\t\t\tvar oMarker;\n\t\t\tif (aFree.length) {\n\t\t\t\toMarker = aFree.pop();\n\t\t\t}\n\t\t\telse {\n\t\t\t\toMarker = new google.maps.Marker(); \n\t\t\t}\n\t\t\treturn oMarker;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Marks a marker as being free. The marker can then be reused by subsequent create calls.\n\t\t * @param\t{object}\toMarker\tA google maps marker.\n\t\t * @returns {void}\n\t\t */\n\t\tremove: function(oMarker) {\n\t\t\taFree.push(oMarker);\n\t\t\toMarker.setMap(null);\n\t\t\tgoogle.maps.event.clearListeners(oMarker, \"mousedown\");\n\t\t}\n\t\t\n\t};\n});",
		"diploma/tracking/overview/controller/Marker.js": "sap.ui.define([\n\t\"diploma/tracking/overview/controller/MarkerBase\",\n\t\"diploma/tracking/overview/controller/MarkerManager\"\n], function(MarkerBase, MarkerManager) {\n\t\"use strict\";\n\t\n\t/**\n\t * Helper function for checking if a value is \"set\" (not null or undefined).\n\t * @param\t{any}\taValue\tThe value to be checked.\n\t * @returns {boolean}\tFlag indicating if the value is \"set\" or not.\n\t */\n\tfunction isSet(aValue) {\n\t\treturn aValue !== undefined && aValue !== null;\n\t}\n\t\n\t/**\n\t * Helper function for checking if a value is \"set\" and has changed.\n\t * @param\t{any}\taPrev\tThe previous value.\n\t * @param\t{any}\taCurr\tThe current value.\n\t * @returns {boolean}\tFlag indicating if the current value is set and has changed.\n\t */\n\tfunction hasChanged(aPrev, aCurr) {\n\t\treturn isSet(aCurr) && (aPrev !== aCurr);\n\t}\n\t\n\t/**\n\t * Class which encapsulates a google maps marker.\n\t * @class\n\t * @name Marker\n\t */\n\treturn MarkerBase.extend(\"diploma.tracking.overview.controller.Marker\", {\n\t\tmetadata: {\n\t\t\tevents: {\n\t\t\t\tpress: {}\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Setter method for the \"visible\" property.\n\t\t * Also updates the underlying google maps marker.\n\t\t * @override\n\t\t * @param\t{boolean}\tbVisible\tThe new value of the visibility.\n\t\t * @returns {void}\n\t\t */\n\t\tsetVisible: function(bVisible) {\n\t\t\tthis.setProperty(\"visible\", bVisible);\n\t\t\tthis._updateVisible();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Gets the position of the marker.\n\t\t * @return {LatLng}\tThe marker's position.\n\t\t */\n\t\tgetPosition: function() {\n\t\t\treturn this._marker.getPosition();\n\t\t},\n\t\t\n\t\t/** Lifecycle hook. Creates the google map marker and adds the press event listener. */\n\t\tinit: function() {\n\t\t\tthis._marker = MarkerManager.create();\n\t\t\tthis._marker.addListener(\"mousedown\", this.fireEvent.bind(this, \"press\"));\n\t\t\tthis._oBase = null;\n\t\t},\n\t\t\n\t\t/** Lifecycle hook. Removes the marker from the map. */\n\t\texit: function() {\n\t\t\tMarkerManager.remove(this._marker);                         \n\t\t},\n\t\t\n\t\t/**\n\t\t * Copies out the data from the given marker base. Only the \"set\" properties are transferred.\n\t\t * The given marker base is linked with the current instance: a change in the marker base's \n\t\t * visibility affects the marker itself as well.\n\t\t * @param\t{MarkerBase}\toBase\tThe marker base which holds the data.\n\t\t * @returns {void}\n\t\t */\n\t\tsetData: function(oBase) {\n\t\t\tvar oThat = this;\n\t\t\tthis._oBase = oBase;\n\t\t\tthis._oBase.setVisible = function(bVisible) {\n\t\t\t\tthis.setProperty(\"visible\", bVisible);\n\t\t\t\toThat._updateVisible();\n\t\t\t};\n\t\t\tif (isSet(oBase.getTitle())) {\n\t\t\t\tthis.setProperty(\"title\", oBase.getTitle());\n\t\t\t}\n\t\t\tif (isSet(oBase.getIcon())) {\n\t\t\t\tthis.setProperty(\"icon\", oBase.getIcon());\n\t\t\t}\n\t\t\tif (isSet(oBase.getLatitude())) {\n\t\t\t\tthis.setProperty(\"latitude\", oBase.getLatitude());\n\t\t\t}\n\t\t\tif (isSet(oBase.getLongitude())) {\n\t\t\t\tthis.setProperty(\"longitude\", oBase.getLongitude());\n\t\t\t}\n\t\t\tif (isSet(oBase.getDetailKey())) {\n\t\t\t\tthis.setProperty(\"detailKey\", oBase.getDetailKey());\n\t\t\t}\n\t\t\tthis._copyToMarker();\n\t\t},\n\t\t\n\t\t/**\n\t\t * Checks if the marker is visible on the map. This is not necessarily the same as the \n\t\t * visible property (because the linked marker base is also taken into account).\n\t\t * @returns {boolean}\tFlag indicating if the marker is visible.\n\t\t */\n\t\tisCurrentlyVisible: function() {\n\t\t\treturn this._marker.getMap() !== null;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Updates the visibility of the underlying marker based on the current properties and base.\n\t\t * @private\n\t\t */\n\t\t_updateVisible: function() {\n\t\t\tif (this._oBase && this._oBase.getVisible() && this.getVisible()) {\n\t\t\t\tif (!this.isCurrentlyVisible()) {\n\t\t\t\t\tthis._marker.setMap(this.getParent().getGoogleMap());\n\t\t\t\t} \n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis._marker.setMap(null);\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Copies the data from this instance to the google maps marker object.\n\t\t * @private\n\t\t */\n\t\t_copyToMarker: function() {\n\t\t\tthis._updateVisible();\n\t\t\tif (hasChanged(this._marker.getTitle(), this.getTitle())) {\n\t\t\t\tthis._marker.setTitle(this.getTitle());\n\t\t\t}\n\t\t\tif (hasChanged(this._marker.getIcon(), this.getIcon())) {\n\t\t\t\tthis._marker.setIcon(this.getIcon());\n\t\t\t}\n\t\t\tvar oPosition = this._marker.getPosition() || {lat: function(){}, lng: function(){}};\n\t\t\tif (hasChanged(oPosition.lat(), this.getLatitude()) || hasChanged(oPosition.lng(), this.getLongitude())) {\n\t\t\t\tthis._marker.setPosition({\n\t\t\t\t\tlat:\tthis.getLatitude(),\n\t\t\t\t\tlng:\tthis.getLongitude()\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n});",
		"diploma/tracking/overview/controller/MapManager.js": "sap.ui.define([\n\t\"sap/ui/core/Control\"\n], function(Control) {\n\t\"use strict\";\n\t\n\t/**\n\t * Helper control for managing the map and it's markers. \n\t * @class\n\t * @name MapManager\n\t */\n\treturn Control.extend(\"diploma.tracking.overview.controller.MapManager\", {\n\t\tmetadata: {\n\t\t\tproperties: {\n\t\t\t\tgoogleMap: {type: \"object\"}\n\t\t\t},\n\t\t\taggregations: {\n\t\t\t\t\"locations\": {\n\t\t\t\t\tsingularName: \"location\", \n\t\t\t\t\tmultiple: true, \n\t\t\t\t\ttype: \"diploma.tracking.overview.controller.Marker\",\n\t\t\t\t\tbindable: true\n\t\t\t\t},\n\t\t\t\t\"transports\": {\n\t\t\t\t\tsingularName: \"transport\", \n\t\t\t\t\tmultiple: true, \n\t\t\t\t\ttype: \"diploma.tracking.overview.controller.Marker\",\n\t\t\t\t\tbindable: true\n\t\t\t\t},\n\t\t\t\t\"locationDetails\": {\n\t\t\t\t\tsingularName: \"locationDetail\", \n\t\t\t\t\tmultiple: true, \n\t\t\t\t\ttype: \"diploma.tracking.overview.controller.MarkerBase\",\n\t\t\t\t\tbindable: true\n\t\t\t\t},\n\t\t\t\t\"transportDetails\": {\n\t\t\t\t\tsingularName: \"transportDetail\", \n\t\t\t\t\tmultiple: true, \n\t\t\t\t\ttype: \"diploma.tracking.overview.controller.MarkerBase\",\n\t\t\t\t\tbindable: true\n\t\t\t\t}\n\t\t\t},\n\t\t\tevents: {\n\t\t\t\tlocationPress: {\n\t\t\t\t\tlocation: \"string\"\n\t\t\t\t},\n\t\t\t\ttransportPress: {\n\t\t\t\t\ttransport: \"string\",\n\t\t\t\t\treading: \"string\",\n\t\t\t\t\talreadySelected: \"boolean\"\n\t\t\t\t},\n\t\t\t\tselectionRemoved: {}\n\t\t\t}\n\t\t},\n\t\t\n\t\t/** Lifecycle hook. Initializes the control. */\n\t\tinit: function() {\n\t\t\tthis._mMarkers = {};\n\t\t\tthis._selectedKey = \"\";\n\t\t},\n\t\t\n\t\t/**\n\t\t * Adds a location to the location aggregation.\n\t\t * Saves the location in the marker map and attaches a press event handler.\n\t\t * @override\n\t\t * @param\t{Marker}\toLocation\tThe location marker to be added.\n\t\t * @returns {void}\n\t\t */\n\t\taddLocation: function(oLocation) {\n\t\t\tthis.addAggregation(\"locations\", oLocation);\n\t\t\tthis._mMarkers[oLocation.getKey()] = oLocation;\n\t\t\toLocation.attachPress(function(oEvent){\n\t\t\t\tvar oSource = oEvent.getSource();\n\t\t\t\tthis._selectedKey = oSource.getKey();\n\t\t\t\tthis.fireEvent(\"locationPress\", {\n\t\t\t\t\tlocation: oSource.getKey()\n\t\t\t\t});\n\t\t\t}, this);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Adds a transport to the transport aggregation.\n\t\t * Saves the transport in the marker map and attaches a press event handler.\n\t\t * @override\n\t\t * @param\t{Marker}\toTransport\tThe transport marker to be added.\n\t\t * @returns {void}\n\t\t */\n\t\taddTransport: function(oTransport) {\n\t\t\tthis.addAggregation(\"transports\", oTransport);\n\t\t\tthis._mMarkers[oTransport.getKey()] = oTransport;\n\t\t\toTransport.attachPress(function(oEvent){\n\t\t\t\tvar oSource = oEvent.getSource();\n\t\t\t\tthis.fireEvent(\"transportPress\", {\n\t\t\t\t\ttransport: oSource.getKey(),\n\t\t\t\t\treading:   oSource.getDetailKey(),\n\t\t\t\t\talreadySelected: this._selectedKey === oSource.getKey()\n\t\t\t\t});\n\t\t\t\tthis._selectedKey = oSource.getKey();\n\t\t\t}, this);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Adds a location detail to the location detail aggregation.\n\t\t * Updates the corresponding marker with the detail information.\n\t\t * @override\n\t\t * @param\t{MarkerBase}\toDetail\tThe location marker data.\n\t\t * @returns {void}\n\t\t */\n\t\taddLocationDetail: function(oDetail) {\n\t\t\tthis.addAggregation(\"locationDetails\", oDetail);\n\t\t\tif (this._mMarkers.hasOwnProperty(oDetail.getKey())) {\n\t\t\t\tthis._mMarkers[oDetail.getKey()].setData(oDetail);                         \n\t\t\t}\n\t\t\tif (this._selectedKey === oDetail.getKey()) {\n\t\t\t\tif (oDetail.getVisible()) {\n\t\t\t\t\tthis.fireEvent(\"locationPress\", {\n\t\t\t\t\t\tlocation:\toDetail.getKey()\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis._selectedKey = \"\";\n\t\t\t\t\tthis.fireEvent(\"selectionRemoved\");\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Adds a transport detail to the transport detail aggregation.\n\t\t * Updates the corresponding marker with the detail information.\n\t\t * @override\n\t\t * @param\t{MarkerBase}\toDetail\tThe transport marker data.\n\t\t * @returns {void}\n\t\t */\n\t\taddTransportDetail: function(oDetail) {\n\t\t\tthis.addAggregation(\"transportDetails\", oDetail);\n\t\t\tif (this._mMarkers.hasOwnProperty(oDetail.getKey())) {\n\t\t\t\tthis._mMarkers[oDetail.getKey()].setData(oDetail);                         \n\t\t\t}\n\t\t\tif (this._selectedKey === oDetail.getKey()) {\n\t\t\t\tif (oDetail.getVisible()) {\n\t\t\t\t\tthis.fireEvent(\"transportPress\", {\n\t\t\t\t\t\ttransport:\toDetail.getKey(),\n\t\t\t\t\t\treading:\toDetail.getDetailKey(),\n\t\t\t\t\t\talreadySelected: true\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis._selectedKey = \"\";\n\t\t\t\t\tthis.fireEvent(\"selectionRemoved\");\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Clears the currently selected marker.\n\t\t */\n\t\tclearSelection: function() {\n\t\t\tthis._selectedKey = null;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Centers the map arround a marker.\n\t\t * @param\t{Marker|string}\toMarker\tThe marker or the key of the marker.\n\t\t * @returns {void}\n\t\t */\n\t\tgoToMarker: function(oMarker) {\n\t\t\tvar oMap = this.getGoogleMap();\n\t\t\tif (!oMap) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (typeof oMarker === \"string\") {\n\t\t\t\tif (this._mMarkers.hasOwnProperty(oMarker)) {\n\t\t\t\t\toMarker = this._mMarkers[oMarker];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\toMap.setZoom(9);\n\t\t\toMap.setCenter(oMarker.getPosition());\n\t\t\tif (oMarker.isCurrentlyVisible()) {\n\t\t\t\toMarker.fireEvent(\"press\");\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Gets data out of all the currently visible markers.\n\t\t * @returns {object[]}\tAn array of marker data (key, icon and title). \n\t\t */\n\t\tgetVisibleMarkers: function() {\n\t\t\tvar aMarkers = [],\n\t\t\t\taTransports = this.getTransports(),\n\t\t\t\taLocations = this.getLocations(),\n\t\t\t\ti;\n\t\t\tfor (i = 0; aLocations && i < aLocations.length; ++i) {\n\t\t\t\tif (aLocations[i].isCurrentlyVisible()) {\n\t\t\t\t\taMarkers.push({\n\t\t\t\t\t\tkey:\taLocations[i].getKey(),\n\t\t\t\t\t\ticon:\taLocations[i].getIcon(),\n\t\t\t\t\t\ttitle:\taLocations[i].getTitle()\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (i = 0; aTransports && i < aTransports.length; ++i) {\n\t\t\t\tif (aTransports[i].isCurrentlyVisible()) {\n\t\t\t\t\taMarkers.push({\n\t\t\t\t\t\tkey:\taTransports[i].getKey(),\n\t\t\t\t\t\ticon:\taTransports[i].getIcon(),\n\t\t\t\t\t\ttitle:\taTransports[i].getTitle()\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn aMarkers;\n\t\t}\n\t});\n});",
		"diploma/tracking/overview/localService/mockserver.js": "sap.ui.define([\n\t\"sap/ui/core/util/MockServer\"\n], function(MockServer) {\n\t\"use strict\";\n\tvar oMockServer,\n\t\t_sAppModulePath = \"diploma/tracking/overview/\",\n\t\t_sJsonFilesModulePath = _sAppModulePath + \"localService/mockdata\";\n\n\treturn {\n\n\t\t/**\n\t\t * Initializes the mock server.\n\t\t * You can configure the delay with the URL parameter \"serverDelay\".\n\t\t * The local mock data in this folder is returned instead of the real data for testing.\n\t\t * @public\n\t\t */\n\t\tinit: function() {\n\t\t\tvar oUriParameters = jQuery.sap.getUriParameters(),\n\t\t\t\tsJsonFilesUrl = jQuery.sap.getModulePath(_sJsonFilesModulePath),\n\t\t\t\tsManifestUrl = jQuery.sap.getModulePath(_sAppModulePath + \"manifest\", \".json\"),\n\t\t\t\tsEntity = \"Locations\",\n\t\t\t\tsErrorParam = oUriParameters.get(\"errorType\"),\n\t\t\t\tiErrorCode = sErrorParam === \"badRequest\" ? 400 : 500,\n\t\t\t\toManifest = jQuery.sap.syncGetJSON(sManifestUrl).data,\n\t\t\t\toMainDataSource = oManifest[\"sap.app\"].dataSources.mainService,\n\t\t\t\tsMetadataUrl = jQuery.sap.getModulePath(_sAppModulePath + oMainDataSource.settings.localUri.replace(\".xml\", \"\"), \".xml\"),\n\t\t\t\t// ensure there is a trailing slash\n\t\t\t\tsMockServerUrl = /.*\\/$/.test(oMainDataSource.uri) ? oMainDataSource.uri : oMainDataSource.uri + \"/\";\n\n\t\t\toMockServer = new MockServer({\n\t\t\t\trootUri: sMockServerUrl\n\t\t\t});\n\n\t\t\t// configure mock server with a delay of 1s\n\t\t\tMockServer.config({\n\t\t\t\tautoRespond: true,\n\t\t\t\tautoRespondAfter: (oUriParameters.get(\"serverDelay\") || 1000)\n\t\t\t});\n\n\t\t\t// load local mock data\n\t\t\toMockServer.simulate(sMetadataUrl, {\n\t\t\t\tsMockdataBaseUrl: sJsonFilesUrl,\n\t\t\t\tbGenerateMissingMockData: true\n\t\t\t});\n\n\t\t\tvar aRequests = oMockServer.getRequests(),\n\t\t\t\tfnResponse = function(iErrCode, sMessage, aRequest) {\n\t\t\t\t\taRequest.response = function(oXhr) {\n\t\t\t\t\t\toXhr.respond(iErrCode, {\n\t\t\t\t\t\t\t\"Content-Type\": \"text/plain;charset=utf-8\"\n\t\t\t\t\t\t}, sMessage);\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t// handling the metadata error test\n\t\t\tif (oUriParameters.get(\"metadataError\")) {\n\t\t\t\taRequests.forEach(function(aEntry) {\n\t\t\t\t\tif (aEntry.path.toString().indexOf(\"$metadata\") > -1) {\n\t\t\t\t\t\tfnResponse(500, \"metadata Error\", aEntry);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Handling request errors\n\t\t\tif (sErrorParam) {\n\t\t\t\taRequests.forEach(function(aEntry) {\n\t\t\t\t\tif (aEntry.path.toString().indexOf(sEntity) > -1) {\n\t\t\t\t\t\tfnResponse(iErrorCode, sErrorParam, aEntry);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\toMockServer.start();\n\n\t\t\tjQuery.sap.log.info(\"Running the app with mock data\");\n\t\t},\n\n\t\t/**\n\t\t * @public returns the mockserver of the app, should be used in integration tests\n\t\t * @returns {sap.ui.core.util.MockServer} the mockserver instance\n\t\t */\n\t\tgetMockServer: function() {\n\t\t\treturn oMockServer;\n\t\t}\n\t};\n\n});",
		"diploma/tracking/overview/model/formatter.js": "sap.ui.define([\n\t\"sap/ui/core/format/DateFormat\"\n\t], function(DateFormat) {\n\t\"use strict\";\n\t\n\tvar _dInstance = DateFormat.getInstance({pattern: \"dd.MM.yyyy\"});\n\tvar _dtInstance = DateFormat.getInstance({pattern: \"dd.MM.yyyy HH:mm:ss\"});\n\t\n\treturn {\n\n\t\t/**\n\t\t * Rounds the number unit value to 2 digits\n\t\t * @public\n\t\t * @param {string} sValue the number string to be rounded\n\t\t * @returns {string} sValue with 2 digits rounded\n\t\t */\n\t\tnumberUnit: function(sValue) {\n\t\t\tif (!sValue) {\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t\treturn parseFloat(sValue).toFixed(2);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Formats a date.\n\t\t * @public\n\t\t * @param {any}\taValue\tThe value to be formatted.\n\t\t * @returns {string}\tThe formatted date.\t\n\t\t */\n\t\tdate: function(aValue) {\n\t\t\tif (typeof aValue === \"object\") {\n\t\t\t\treturn _dInstance.format(aValue);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn _dInstance.format(new Date(aValue));\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Formats a date and time.\n\t\t * @public\n\t\t * @param {any}\taValue\tThe value to be formatted.\n\t\t * @returns {string}\tThe formatted date and time.\t\n\t\t */\n\t\tdateTime: function(aValue) {\n\t\t\tif (typeof aValue === \"object\") {\n\t\t\t\treturn _dtInstance.format(aValue);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn _dtInstance.format(new Date(aValue));\n\t\t\t}\n\t\t}\n\n\t};\n\n});",
		"diploma/tracking/overview/model/models.js": "sap.ui.define([\n\t\"sap/ui/model/json/JSONModel\",\n\t\"sap/ui/Device\"\n], function(JSONModel, Device) {\n\t\"use strict\";\n\n\treturn {\n\n\t\tcreateDeviceModel: function() {\n\t\t\tvar oModel = new JSONModel(Device);\n\t\t\toModel.setDefaultBindingMode(\"OneWay\");\n\t\t\treturn oModel;\n\t\t},\n\n\t\tcreateFLPModel: function() {\n\t\t\tvar fnGetUser = jQuery.sap.getObject(\"sap.ushell.Container.getUser\"),\n\t\t\t\tbIsShareInJamActive = fnGetUser ? fnGetUser().isJamActive() : false,\n\t\t\t\toModel = new JSONModel({\n\t\t\t\t\tisShareInJamActive: bIsShareInJamActive\n\t\t\t\t});\n\t\t\toModel.setDefaultBindingMode(\"OneWay\");\n\t\t\treturn oModel;\n\t\t}\n\n\t};\n\n});",
		"diploma/tracking/overview/view/App.view.xml": "<mvc:View controllerName=\"diploma.tracking.overview.controller.App\" displayBlock=\"true\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\">\n\t<App busy=\"{appView>/busy}\" busyIndicatorDelay=\"{appView>/delay}\" id=\"app\"/>\n</mvc:View>",
		"diploma/tracking/overview/view/Main.view.xml": "<mvc:View controllerName=\"diploma.tracking.overview.controller.Main\" xmlns:footerbar=\"sap.ushell.ui.footerbar\"\n\txmlns:mvc=\"sap.ui.core.mvc\" xmlns:semantic=\"sap.m.semantic\" xmlns=\"sap.m\" xmlns:core=\"sap.ui.core\" xmlns:layout=\"sap.ui.layout\">\n\t<semantic:FullscreenPage id=\"page\" navButtonPress=\"onNavBack\" showNavButton=\"true\" title=\"{i18n>mainViewTitle}\">\n\t\t<semantic:customHeaderContent>\n\t\t\t<OverflowToolbarButton  press=\"openSearchDialog\" icon=\"sap-icon://search\" text=\"{i18n>search}\"/>\n\t\t\t<OverflowToolbarButton  press=\"openFilterDialog\" icon=\"sap-icon://filter\" text=\"{i18n>filter}\"/>\n\t\t\t<OverflowToolbarButton  press=\"onRefresh\" icon=\"sap-icon://refresh\" text=\"{i18n>refresh}\"/>\n\t\t\t<OverflowToolbarButton  press=\"openSettingsDialog\" icon=\"sap-icon://settings\" text=\"{i18n>settings}\"/>\n\t\t</semantic:customHeaderContent>\n\t\t<semantic:content>\n\t\t\t<layout:DynamicSideContent id=\"sideContent\" containerQuery=\"true\" sideContentFallDown=\"BelowM\" \n\t\t\t\tshowSideContent=\"{= ${main>/type} !== -1 }\">\n\t\t\t\t<layout:mainContent>\n\t\t\t\t\t<core:HTML content=\"&lt;div style=&quot;height:100%&quot; /&gt;\" id=\"map\"/>\n\t\t\t\t</layout:mainContent>\n\t\t\t\t<layout:sideContent>\n\t\t\t\t\t<Panel>\n\t\t\t\t\t\t<headerToolbar>\n\t\t\t\t\t\t\t<Toolbar >\n\t\t\t\t\t\t\t\t<Title text=\"{i18n>detailHeader}\"/>\n\t\t\t\t\t\t\t\t<ToolbarSpacer />\n\t\t\t\t\t\t\t\t<Button icon=\"sap-icon://decline\" press=\"onCloseSizeContent\"  />\n\t\t\t\t\t\t\t</Toolbar>\n\t\t\t\t\t\t</headerToolbar>\n\t\t\t\t\t\t<content>\n\t\t\t\t\t\t\t<layout:VerticalLayout id=\"locationDetails\" visible=\"{= ${main>/type} === 1 }\" width=\"100%\">\n\t\t\t\t\t\t\t\t<Label text=\"{i18n>locationName}\"/>\n\t\t\t\t\t\t\t\t<Text text=\"{name}\" />\n\t\t\t\t\t\t\t\t<List width=\"100%\" id=\"lstLocationLinks\" items=\"{ \n\t\t\t\t\t\t\t\t        path: 'LocationLinks',\n\t\t\t\t\t\t\t\t        sorter: {\n\t\t\t\t\t\t\t\t            path: 'direction',\n\t\t\t\t\t\t\t\t            group: true\n\t\t\t\t\t\t\t\t        },\n\t\t\t\t\t\t\t\t        groupHeaderFactory: '.getLinkGroupHeader',\n\t\t\t\t\t\t\t\t        parameters: {expand: 'Transport'}\n\t\t\t\t\t\t\t\t    }\" headerText=\"{i18n>transports}\"\n\t\t\t\t\t\t\t\t\tvisible=\"{= ${main>/type} === 1 }\" itemPress=\"onTransportPress\">\n\t\t\t\t\t\t\t\t\t<StandardListItem title=\"{Transport/description}\" type=\"Navigation\"  />\n\t\t\t\t\t\t\t\t</List>\n\t\t\t\t\t\t\t</layout:VerticalLayout>\n\t\t\t\t\t\t\t<layout:VerticalLayout id=\"readingDetails\" visible=\"{= ${main>/type} === 2 }\" width=\"100%\">\n\t\t\t\t\t\t\t\t<Label text=\"{i18n>transportDesc}\" />\n\t\t\t\t\t\t\t\t<Text text=\"{Transport/description}\" />\n\t\t\t\t\t\t\t\t<Label text=\"{i18n>transportFrom}\" />\n\t\t\t\t\t\t\t\t<Link text=\"{Transport/Route/FromLocation/name}\" press=\"onLocationPress\" >\n\t\t\t\t\t\t\t\t\t<customData><core:CustomData key=\"id\" value=\"{Transport/Route/FromLocation/id}\" /></customData>\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t<Label text=\"{i18n>transportTo}\" />\n\t\t\t\t\t\t\t\t<Link text=\"{Transport/Route/ToLocation/name}\" press=\"onLocationPress\"  >\n\t\t\t\t\t\t\t\t\t<customData><core:CustomData key=\"id\" value=\"{Transport/Route/ToLocation/id}\" /></customData>\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t<List width=\"100%\" items=\"{ path: 'Values', parameters: { expand: 'Sensor/Type/Measure'}}\"\n\t\t\t\t\t\t\t\t\tvisible=\"{= ${main>/type} === 2 }\" headerText=\"{i18n>transportValues}\">\n\t\t\t\t\t\t\t\t\t<StandardListItem info=\"{value} {Sensor/Type/Measure/unit}\" title=\"{Sensor/Type/Measure/name}\"  />\n\t\t\t\t\t\t\t\t</List>\n\t\t\t\t\t\t\t</layout:VerticalLayout>\n\t\t\t\t\t\t</content>\n\t\t\t\t\t</Panel>\n\t\t\t\t</layout:sideContent>\n\t\t\t</layout:DynamicSideContent>\n\t\t</semantic:content>\n\t\t<semantic:dependents>\n\t        <core:Fragment fragmentName=\"diploma.tracking.overview.view.Dialogs\" type=\"XML\" />\n\t\t</semantic:dependents>\n\t\t<semantic:customFooterContent>\n\t\t\t<Slider width=\"100%\" min=\"{main>/slider/min}\" max=\"{main>/slider/max}\" value=\"{main>/slider/selected}\" change=\"onSliderChange\" \n\t\t\t\tvisible=\"{main>/controls/thirdFetch}\" liveChange=\"onSliderLiveChange\" showHandleTooltip=\"false\"/>\n\t\t</semantic:customFooterContent>\n\t</semantic:FullscreenPage>\n</mvc:View>",
		"diploma/tracking/overview/view/Dialogs.fragment.xml": "<core:FragmentDefinition\r\n\txmlns=\"sap.m\"\r\n\txmlns:form=\"sap.ui.layout.form\"\r\n\txmlns:core=\"sap.ui.core\">\r\n\t<SelectDialog id=\"dialogSearch\" \r\n\t\tnoDataText=\"{i18n>noResults}\" \r\n\t\ttitle=\"{i18n>searchTitle}\" \r\n\t\tsearch=\"onSearch\" \r\n\t\tconfirm=\"closeSearchDialog\"\r\n\t\tclose=\"closeSearchDialog\" \r\n\t\tmultiSelect=\"false\"\r\n\t\trememberSelections=\"false\"\r\n\t\titems=\"{path: 'main>/markers', sorter: {path: 'title'} }\">\r\n\t\t<StandardListItem title=\"{main>title}\" icon=\"{main>icon}\" iconInset=\"true\"/>\r\n\t</SelectDialog>\r\n\t<Dialog id=\"dialogFilter\" \r\n\t\ttitle=\"{i18n>filterTitle}\" \r\n\t\tcontentHeight=\"10rem\" \r\n\t\tstretch=\"{device>/system/phone}\" >\r\n\t\t<List items=\"{main>/filters}\" mode=\"MultiSelect\" class=\"sapUiTinyMarginTop\">\r\n\t\t\t<StandardListItem title=\"{main>title}\" icon=\"{main>icon}\" iconInset=\"true\" selected=\"{main>selected}\"/>\r\n\t\t</List>\r\n\t\t<beginButton>\r\n\t\t\t<Button text=\"{i18n>close}\" press=\"closeFilter\"/>\r\n\t\t</beginButton>\r\n\t</Dialog>\r\n\t<Dialog id=\"dialogSettings\" \r\n\t\tstretch=\"{device>/system/phone}\" \r\n\t\tcontentHeight=\"20rem\"\r\n\t\ttitle=\"{i18n>settingsTitle}\" >\r\n\t\t<Panel><VBox>\r\n\t\t\t<Label text=\"{i18n>fetchTypeIntro}\"/>\r\n\t\t\t<RadioButtonGroup columns=\"1\" width=\"100%\" select=\"onRadioChange\" selectedIndex=\"{main>/settings/fetchType}\">\r\n\t\t\t\t<buttons>\r\n\t\t\t\t\t<RadioButton text=\"{i18n>firstFetchType}\" />\r\n\t\t\t\t\t<RadioButton text=\"{i18n>secondFetchType}\" />\r\n\t\t\t\t\t<RadioButton text=\"{i18n>thirdFetchType}\" />\r\n\t\t\t\t</buttons>\r\n\t\t\t</RadioButtonGroup>\r\n\t\t\t<CheckBox text=\"{i18n>autorefreshEnabled}\" selected=\"{main>/settings/autorefresh}\" visible=\"{main>/controls/firstFetch}\"/>\r\n\t\t\t<Label text=\"{i18n>fixedDate}\" visible=\"{main>/controls/secondFetch}\"/>\r\n\t\t\t<DateTimeInput type=\"DateTime\" dateValue=\"{main>/settings/fixedDate}\" visible=\"{main>/controls/secondFetch}\" />\r\n\t\t\t<Label text=\"{i18n>beginDate}\" visible=\"{main>/controls/thirdFetch}\"/>\r\n\t\t\t<DateTimeInput type=\"DateTime\" dateValue=\"{main>/settings/beginDate}\" visible=\"{main>/controls/thirdFetch}\" />\r\n\t\t\t<Label text=\"{i18n>endDate}\" visible=\"{main>/controls/thirdFetch}\"/>\r\n\t\t\t<DateTimeInput type=\"DateTime\" dateValue=\"{main>/settings/endDate}\" visible=\"{main>/controls/thirdFetch}\" />\r\n\t\t</VBox></Panel>\r\n\t\t<beginButton>\r\n\t\t\t<Button text=\"{i18n>close}\" press=\"applySettings\"/>\r\n\t\t</beginButton>\r\n\t</Dialog>\r\n</core:FragmentDefinition>",
		"diploma/tracking/overview/Component.js": "/* global google */\nsap.ui.define([\n\t\"sap/ui/core/UIComponent\",\n\t\"sap/ui/Device\",\n\t\"diploma/tracking/overview/model/models\",\n\t\"diploma/tracking/overview/controller/ErrorHandler\"\n], function(UIComponent, Device, models, ErrorHandler) {\n\t\"use strict\";\n\n\treturn UIComponent.extend(\"diploma.tracking.overview.Component\", {\n\n\t\tmetadata: {\n\t\t\tmanifest: \"json\"\n\t\t},\n\n\t\t/**\n\t\t * The component is initialized by UI5 automatically during the startup of the app and calls the init method once.\n\t\t * In this function, the FLP and device models are set and the router is initialized.\n\t\t * @public\n\t\t * @override\n\t\t */\n\t\tinit: function() {\n\t\t\t// call the base component's init function\n\t\t\tUIComponent.prototype.init.apply(this, arguments);\n\t\t\tthis.getModel().setSizeLimit(5000);\n\t\t\tthis._loadGoogleMaps();\n\t\t\t\n\t\t\t// initialize the error handler with the component\n\t\t\tthis._oErrorHandler = new ErrorHandler(this);\n\n\t\t\t// set the device model\n\t\t\tthis.setModel(models.createDeviceModel(), \"device\");\n\t\t\t// set the FLP model\n\t\t\tthis.setModel(models.createFLPModel(), \"FLP\");\n\n\t\t\t// create the views based on the url/hash\n\t\t\tthis.getRouter().initialize();\n\t\t},\n\n\t\t/**\n\t\t * @function _loadGoogleMaps\n\t\t * @private\n\t\t * Loads the Google libraries if not already loaded.\n\t\t * \n\t\t * @returns {void}\n\t\t */\n\t\t _loadGoogleMaps: function() {\n\t\t \tvar oPromise = jQuery.Deferred();\n\t\t \tif (typeof google === \"undefined\") {\n\t\t \t\tjQuery.sap.includeScript(\"https://maps.googleapis.com/maps/api/js?libraries=visualization\", \"gmaps\", \n\t\t \t\t\toPromise.resolve.bind(oPromise), oPromise.reject.bind(oPromise));\n\t\t \t}\n\t\t \telse {\n\t\t \t\toPromise.resolve();\n\t\t \t}\n\t\t \tthis.getMapPromise = function() {\n\t\t \t\treturn oPromise.promise();\n\t\t \t};\n\t\t },\n\t\n\t\t/**\n\t\t * The component is destroyed by UI5 automatically.\n\t\t * In this method, the ErrorHandler is destroyed.\n\t\t * @public\n\t\t * @override\n\t\t */\n\t\tdestroy: function() {\n\t\t\tthis._oErrorHandler.destroy();\n\t\t\t// call the base component's destroy function\n\t\t\tUIComponent.prototype.destroy.apply(this, arguments);\n\t\t},\n\n\t\t/**\n\t\t * This method can be called to determine whether the sapUiSizeCompact or sapUiSizeCozy\n\t\t * design mode class should be set, which influences the size appearance of some controls.\n\t\t * @public\n\t\t * @return {string} css class, either 'sapUiSizeCompact' or 'sapUiSizeCozy' - or an empty string if no css class should be set\n\t\t */\n\t\tgetContentDensityClass: function() {\n\t\t\tif (this._sContentDensityClass === undefined) {\n\t\t\t\t// check whether FLP has already set the content density class; do nothing in this case\n\t\t\t\tif (jQuery(document.body).hasClass(\"sapUiSizeCozy\") || jQuery(document.body).hasClass(\"sapUiSizeCompact\")) {\n\t\t\t\t\tthis._sContentDensityClass = \"\";\n\t\t\t\t} else if (!Device.support.touch) { // apply \"compact\" mode if touch is not supported\n\t\t\t\t\tthis._sContentDensityClass = \"sapUiSizeCompact\";\n\t\t\t\t} else {\n\t\t\t\t\t// \"cozy\" in case of touch support; default for most sap.m controls, but needed for desktop-first controls like sap.ui.table.Table\n\t\t\t\t\tthis._sContentDensityClass = \"sapUiSizeCozy\";\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this._sContentDensityClass;\n\t\t}\n\n\t});\n\n});"
	}
});