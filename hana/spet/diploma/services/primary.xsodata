service namespace "spet.diploma.services" {
    "spet.diploma.data::ctxCore.eTransport" as "Transports"
        navigates(
            "TransportToDevices"    as "Devices",
            "TransportToReadings"   as "Readings",
            "TransportToLimits"     as "Limits",
            "TransportToRoute"      as "Route",
            "TransportToSchedule"   as "Schedule", 
            "TransportInvolvements" as "Involvements",
            "TransportsToMeasures"  as "Measures",
            "TransportToScheduleEvolution" as "ScheduleEvolutions" 
        )
        create events( 
            before "spet.diploma.library:PrimaryController.xsjslib::beforeCreate" 
        ) 
        delete using "spet.diploma.procedures::deleteTransport";
    
    "spet.diploma.data::ctxCore.eLimit" as "Limits"
        navigates (
            "MeasureToLimits"       as "Measure"
        );
    
    "spet.diploma.data::ctxCore.eDevice" as "Devices"
        navigates(
            "DeviceToSensors"       as "Sensors", 
            "TransportToDevices"    as "Transport",
            "DeviceToValues"        as "Values"
        )
        create events ( 
            before "spet.diploma.library:PrimaryController.xsjslib::beforeCreate" 
        )
        delete using "spet.diploma.procedures::deleteDevice"; 
    
    "spet.diploma.data::ctxCore.eDeviceSensor" as "DeviceSensors"
        navigates(
            "TypeToSensors"   as "Type"
        );
    
    "spet.diploma.data::ctxCore.eSensorType" as "SensorTypes"
        navigates(
            "MeasureToTypes"  as "Measure"
        )
        create events( 
            before "spet.diploma.library:PrimaryController.xsjslib::beforeCreate" 
        );
    
    "spet.diploma.data::ctxCore.eMeasure" as "Measures"
        navigates(
            "TransportsToMeasures"  as "Transports",
            "ETransportsToMeasures" as "ExpandedTransports"
        )
        create events( 
            before "spet.diploma.library:PrimaryController.xsjslib::beforeCreate" 
        );
    
    "spet.diploma.data::ctxCore.eLocation" as "Locations" 
        with ("id", "name", "country", "region")
        create forbidden
        update forbidden;
    
    "spet.diploma.data::ctxCore.eReading" as "Readings" 
        with ("id", "transport", "timestamp") 
        navigates(
            "ReadingToValues"       as "Values",
            "TransportToReadings"   as "Transport"
        )
        create forbidden
        update forbidden
        delete forbidden;
        
    "spet.diploma.data::ctxCore.eValue" as "Values"
        navigates(
            "DeviceToValues"        as "Device",
            "ReadingToValues"       as "Reading",
            "SensorToValues"        as "Sensor"
        )
        create forbidden
        update forbidden
        delete forbidden;
    
    "spet.diploma.data::ctxCore.eRoute" as "Routes"
        with("id", "name", "tFrom", "tTo")
        navigates( 
            "RouteToLegs"           as "Legs",
            "RouteToSchedules"      as "Schedules",
            "LocationToRoutesTo"    as "ToLocation",
            "LocationToRoutesFrom"  as "FromLocation"
        )
        create events( 
            before "spet.diploma.library:PrimaryController.xsjslib::beforeCreate" 
        )
        delete using "spet.diploma.procedures::deleteRoute";
    
    "spet.diploma.data::ctxCore.eRouteLeg" as "RouteLegs"
        navigates(
            "LocationToLegsTo"    as "ToLocation",
            "LocationToLegsFrom"  as "FromLocation"
        );
    
    "spet.diploma.data::ctxCore.eSchedule" as "Schedules"
        navigates(
            "ScheduleToDurations" as "LegDurations",
            "RouteToSchedules"    as "Route"
        )
        create events( 
            before "spet.diploma.library:PrimaryController.xsjslib::beforeCreate" 
        )
        delete using "spet.diploma.procedures::deleteSchedule";
        
    "spet.diploma.data::ctxCore.eLegDuration" as "LegDurations"
        navigates(
            "LegToDurations"    as "Leg"
        ); 
    
    "spet.diploma.data::ctxCore.eOrganization" as "Organizations"
        navigates(
            "OrganizationPersons" as "Persons"
        )
        create events( 
            before "spet.diploma.library:PrimaryController.xsjslib::beforeCreate" 
        )
        delete using "spet.diploma.procedures::deleteOrganization"; 
        
    "spet.diploma.data::ctxCore.eRole" as "Roles"
        navigates(
            "RoleInvolvements"   as "Involvements"
        )
        create events( 
            before "spet.diploma.library:PrimaryController.xsjslib::beforeCreate" 
        )
        delete using "spet.diploma.procedures::deleteRole";
        
    "spet.diploma.data::ctxCore.ePerson" as "Persons"
        navigates(
            "PersonInvolvements"   as "Involvements",
            "PersonToRole"         as "DefaultRole",
            "OrganizationPersons"  as "Organization"
        )
        create events( 
            before "spet.diploma.library:PrimaryController.xsjslib::beforeCreate" 
        )
        delete using "spet.diploma.procedures::deletePerson";
        
    "spet.diploma.data::ctxCore.eInvolvement" as "Involvements"
        navigates(
            "PersonInvolvements"    as "Person",
            "TransportInvolvements" as "Transport",
            "RoleInvolvements"      as "Role"
        ); 
        
    "spet.diploma.data::ctxCore.eTrace" as "Traces"
        navigates(
            "TransportTraces"           as "Transport"
        )
        delete forbidden   
        create forbidden  
        update forbidden; 
     
    "spet.diploma.model::CV_EXPANDED_TRANSPORT" as "ExpandedTransports"
        key("id") 
        navigates(
            "TransportToExpanded" as "Transport",
            "ETransportsToMeasures" as "Measures" 
        )
        delete forbidden   
        create forbidden  
        update forbidden;
           
    "spet.diploma.data::ctxCore.vExpandedLocation" as "ExpandedLocations"
        key("id")
        delete forbidden   
        create forbidden  
        update forbidden;
           
    "spet.diploma.model::CV_TRANSPORTS_BY_DATE" as "LatestTransportReadings"
        key("transport")
        parameters via key and entity "LatestTransportReadingParameters" results property "LatestTransportReadings"; 
        
    "spet.diploma.model::CV_TRANSPORT_SCHEDULE_EVOLUTION" as "ScheduleEvolutions"
        key("transport", "location")
        navigates(
            "TransportToScheduleEvolution"   as "Transport",
            "LocationToScheduleEvolution"   as "Location"
        )
        delete forbidden   
        create forbidden  
        update forbidden;
        
    "spet.diploma.model::CV_LOCATION_LINKS_BY_DATE" as "LocationLinks"
        key generate local "local"
        navigates(
            "TransportToLocationLink"   as "Transport"
        )
        parameters via entity "LocationLinkParameters" results property "LocationLinks"; 
    
    "spet.diploma.model::CV_LOCATION_TYPES_BY_DATE" as "LatestLocationTypes"
        key ("id")
        parameters via key and entity "LatestLocationTypesParameters" results property "LatestLocationTypes";
    
    association "TransportToScheduleEvolution" with referential constraint principal "Transports"("id") multiplicity "1"
        dependent "ScheduleEvolutions"("transport") multiplicity "*";
        
    association "LocationToScheduleEvolution" with referential constraint principal "Locations"("id") multiplicity "1"
        dependent "ScheduleEvolutions"("location") multiplicity "*";
        
    association "TransportToLocationLink" with referential constraint principal "Transports"("id") multiplicity "1"
        dependent "LocationLinks"("transport") multiplicity "*";
          
    association "TransportsToMeasures" 
        principal "Transports"("id") multiplicity "*"
        dependent "Measures"("id") multiplicity "*"
        over "spet.diploma.data::ctxCore.vTransportMeasures"
        principal ("transport") dependent ("measure"); 
        
    association "ETransportsToMeasures" 
        principal "ExpandedTransports"("id") multiplicity "*"
        dependent "Measures"("id") multiplicity "*"
        over "spet.diploma.data::ctxCore.vTransportMeasures"
        principal ("transport") dependent ("measure"); 
        
    association "TransportToExpanded" with referential constraint principal "Transports"("id") multiplicity "1"
        dependent "ExpandedTransports"("id") multiplicity "1";
        
    association "PersonToRole" with referential constraint principal "Roles"("id") multiplicity "1"
        dependent "Persons"("defaultRole") multiplicity "*";
     
    association "TransportInvolvements" with referential constraint principal "Transports"("id") multiplicity "1"
        dependent "Involvements"("transport") multiplicity "*";
    
    association "RoleInvolvements" with referential constraint principal "Roles"("id") multiplicity "1"
        dependent "Involvements"("role") multiplicity "*"; 
    
    association "PersonInvolvements" with referential constraint principal "Persons"("id") multiplicity "1"
        dependent "Involvements"("person") multiplicity "*";
     
    association "OrganizationPersons" with referential constraint principal "Organizations"("id") multiplicity "1"
        dependent "Persons"("organization") multiplicity "*";
    
    association "RouteToLegs" with referential constraint principal "Routes"("id") multiplicity "1"
        dependent "RouteLegs"("route") multiplicity "*";
        
    association "RouteToSchedules" with referential constraint principal "Routes"("id") multiplicity "1"
        dependent "Schedules"("route") multiplicity "*";
    
    association "LocationToRoutesTo" with referential constraint principal "Locations"("id") multiplicity "1"
        dependent "Routes"("tTo") multiplicity "*";
        
    association "LocationToRoutesFrom" with referential constraint principal "Locations"("id") multiplicity "1"
        dependent "Routes"("tFrom") multiplicity "*";
        
    association "LocationToLegsTo" with referential constraint principal "Locations"("id") multiplicity "1"
        dependent "RouteLegs"("tTo") multiplicity "*";
        
    association "LocationToLegsFrom" with referential constraint principal "Locations"("id") multiplicity "1"
        dependent "RouteLegs"("tFrom") multiplicity "*";
        
    association "ScheduleToDurations" with referential constraint principal "Schedules"("id") multiplicity "1"
        dependent "LegDurations"("schedule") multiplicity "*";    
         
    association "LegToDurations" with referential constraint principal "RouteLegs"("route", "sequence") multiplicity "1"
        dependent "LegDurations"("route", "sequence") multiplicity "*";
        
    association "OrganizationToPersons" with referential constraint principal "Organizations"("id") multiplicity "1"
        dependent "Persons"("organization") multiplicity "*";    
    
    association "PersonToInvovements" with referential constraint principal "Persons"("id") multiplicity "1"
        dependent "Involvements"("person") multiplicity "*";
        
    association "RoleToInvolvements" with referential constraint principal "Roles"("id") multiplicity "1"
        dependent "Involvements"("role") multiplicity "*";
        
    association "TransportToInvolvements" with referential constraint principal "Transports"("id") multiplicity "1"
        dependent "Involvements"("transport") multiplicity "*";
        
    association "DeviceToSensors" with referential constraint principal "Devices"("id") multiplicity "1" 
        dependent "DeviceSensors"("device") multiplicity "*";
        
    association "TransportToDevices" with referential constraint principal "Transports"("id") multiplicity "1"
        dependent "Devices"("transport") multiplicity "*";
        
    association "TransportToLimits" with referential constraint principal "Transports"("id") multiplicity "1"
        dependent "Limits"("transport") multiplicity "*";
        
    association "TypeToSensors" with referential constraint principal "SensorTypes"("id") multiplicity "1"
        dependent "DeviceSensors"("sensorType") multiplicity "*";
        
    association "MeasureToTypes" with referential constraint principal "Measures"("id") multiplicity "1"
        dependent "SensorTypes"("measure") multiplicity "*";
           
    association "TransportToReadings" with referential constraint principal "Transports"("id") multiplicity "1"
        dependent "Readings"("transport") multiplicity "*";
        
    association "DeviceToValues" with referential constraint principal "Devices"("id") multiplicity "1"
        dependent "Values"("device") multiplicity "*";
         
    association "ReadingToValues" with referential constraint principal "Readings"("id") multiplicity "1"
        dependent "Values"("reading") multiplicity "*";
        
    association "MeasureToLimits" with referential constraint principal "Measures"("id") multiplicity "1"
        dependent "Limits"("measure") multiplicity "*";
        
    association "SensorToValues" with referential constraint principal "DeviceSensors"("device", "number") multiplicity "1"
        dependent "Values"("device", "sensor") multiplicity "*";
    
    association "TransportToRoute" with referential constraint principal "Routes"("id") multiplicity "1"
        dependent "Transports"("route") multiplicity "*";
        
    association "TransportToSchedule" with referential constraint principal "Schedules"("id") multiplicity "1"
        dependent "Transports"("schedule") multiplicity "*";
     
    association "TransportTraces" with referential constraint principal "Transports"("id") multiplicity "1"
        dependent "Traces"("transport") multiplicity "*";
}