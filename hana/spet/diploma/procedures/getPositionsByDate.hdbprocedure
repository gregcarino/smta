-------------------------------------------------------------------------------------------------------------------
-- @date:           23.12.2015
-- @component:      Tracking
-------------------------------------------------------------------------------------------------------------------
-- @description:
-- Retrieves the positions / places which are relevant at a given moment in time (iv_date). The places are:
--  - All locations (both active and inactive)
--  - The latest position of each transport.
-- @param {timestamp}   iv_date         - Null value equates to reading the latest possible values.
-- @param {table}       et_data         - The result table.
--  @column {string}    et_data.label   - The "name" of the place.
--  @column {integer}   et_data.type    - The "type" of the place (0 - inactive loc, 1 - active loc, 2 - transport)
--  @column {string}    et_data.position    - GeoJSON representation of the position.
--  @column {string}    et_data.reference   - The id of the corresponding entity (location or reading).
--  @column {string}    et_data.parent      - The id of the parent entity (null or transport id).
-------------------------------------------------------------------------------------------------------------------
PROCEDURE "SPET_DIPLOMA"."spet.diploma.procedures::getPositionsByDate" ( 
        IN  iv_date     TIMESTAMP,
        OUT et_data     TABLE(
            "label"     NVARCHAR(54), 
            "type"      INT, 
            "position"  NVARCHAR(512), 
            "reference" NVARCHAR(32), 
            "child"     NVARCHAR(32)
        )
    )
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   READS SQL DATA AS 
BEGIN
    
    --filter the raw readings using the date
    lt_filtered = SELECT * FROM "SPET_DIPLOMA"."spet.diploma.data::ctxCore.eReading"
        WHERE "timestamp" < :iv_date OR :iv_date IS NULL;
    
    -- obtain the most recent reading for each transport
    lt_readings = SELECT  t1."transport" AS "transport", TO_NVARCHAR(t1."position".ST_AsGeoJSON()) AS "position", 
        t1."id" AS "reading" FROM :lt_filtered AS t1 LEFT OUTER JOIN :lt_filtered AS t2 ON t1."transport" = t2."transport" 
        AND (t1."timestamp" < t2."timestamp" OR (t1."timestamp" = t2."timestamp" AND t1."id" < t2."id"))
        WHERE t2."transport" IS NULL;
        
    -- select the IDs of the active locations (at least one incoming / outgoing transport)
    lt_aids = SELECT DISTINCT "location" AS "id" 
            FROM "SPET_DIPLOMA"."spet.diploma.data::ctxCore.vLocationTransports";
    
    --get the inactive location IDs (all the locations - active locations = inactive locations)
    lt_iids = SELECT "id" FROM "SPET_DIPLOMA"."spet.diploma.data::ctxCore.eLocation"
        EXCEPT SELECT "id" FROM :lt_aids;
    
    --obtain the rows corresponding to the IDs
    lt_aloc = SELECT t1.* FROM "SPET_DIPLOMA"."spet.diploma.data::ctxCore.eLocation" AS t1
        INNER JOIN :lt_aids ON t1."id" = :lt_aids."id";
    lt_iloc = SELECT t1.* FROM "SPET_DIPLOMA"."spet.diploma.data::ctxCore.eLocation" AS t1
        INNER JOIN :lt_iids ON t1."id" = :lt_iids."id";
        
    --combine the data + set the types accordingly
    et_data =  SELECT "name" AS "label", 0 AS "type", TO_NVARCHAR("position".ST_AsGeoJSON()) AS "position", 
            "id" AS "reference", '' AS "child" FROM :lt_iloc
        UNION SELECT "name" AS "label", 1 AS "type", TO_NVARCHAR("position".ST_AsGeoJSON()) AS "position", 
            "id" AS "reference", '' AS "child" FROM :lt_aloc
        UNION SELECT "description" AS "label", 2 AS "type", "position", "id" AS "reference", "reading" AS "child" FROM 
            :lt_readings INNER JOIN "SPET_DIPLOMA"."spet.diploma.data::ctxCore.eTransport" 
            AS t1 ON :lt_readings."transport" = t1."id";
            
END