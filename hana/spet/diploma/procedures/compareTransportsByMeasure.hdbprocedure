-------------------------------------------------------------------------------------------------------------------
-- @date:           26.12.2015
-- @component:      Anaytics
-------------------------------------------------------------------------------------------------------------------
-- @description:
-- Equalizes the values of the given transports (for the given measure) using the same scale. 
-- @param   {table}         it_transports       The transports.
--  @column {string}        it_transports.id    The ID of a transport.
-- @param   {string}        iv_measure          The measure.
-- @param   {integer}       iv_desired_count    The aproximate number of ticks on the scale.
-- @param   {table}         et_results          The results (ordered by timestamp and transport).
--  @column {string}        et_results.transport    The transport ID.
--  @column {decimal}       et_results.value        The value in the point.
--  @column {timestamp}     et_results.timestamp    The time dimension of the point.
-------------------------------------------------------------------------------------------------------------------
PROCEDURE "SPET_DIPLOMA"."spet.diploma.procedures::compareTransportsByMeasure" ( 
    IN  it_transports       "SPET_DIPLOMA"."spet.diploma.data::ctxCore.styUUID",
        iv_measure          NVARCHAR(32),    
        iv_desired_count    INT DEFAULT 500,
        iv_align_type       TINYINT DEFAULT 1,
    OUT et_results          "SPET_DIPLOMA"."spet.diploma.data::ctxCore.styTransportValue"
    )
    LANGUAGE SQLSCRIPT 
    SQL SECURITY DEFINER AS
BEGIN
    DECLARE lv_min_ts TIMESTAMP;
    DECLARE lv_max_ts TIMESTAMP;
    DECLARE lv_interval INTEGER; 
    DECLARE lv_interval_s NVARCHAR(64);
    
    CREATE LOCAL TEMPORARY TABLE "#COMPARE" LIKE 
        "SPET_DIPLOMA"."spet.diploma.data::ctxCore.styTransportValue";
    
    --retrieve the earliest reading using during the comparison
    SELECT MIN("timestamp") INTO lv_min_ts FROM 
        "SPET_DIPLOMA"."spet.diploma.data::ctxCore.vMeasuredValues"
        WHERE "measure" = :iv_measure AND "transport" IN (SELECT "id" FROM :it_transports);
    
    lt_indiv_bounds = SELECT "transport", MAX("timestamp") as "maxts", MIN("timestamp") as "mints" FROM
        "SPET_DIPLOMA"."spet.diploma.data::ctxCore.vMeasuredValues"
        WHERE "measure" = :iv_measure AND "transport" IN (SELECT "id" FROM :it_transports)
        GROUP BY "transport";
        
    lt_adj_bounds = SELECT "transport",
        CASE :iv_align_type
            WHEN 0 THEN     "mints"
            WHEN 1 THEN     ADD_DAYS("mints", DAYS_BETWEEN("mints", :lv_min_ts))
            ELSE            ADD_SECONDS("mints", SECONDS_BETWEEN("mints", :lv_min_ts))
        END AS "start",
        CASE :iv_align_type
            WHEN 0 THEN     "maxts"
            WHEN 1 THEN     ADD_DAYS("maxts", DAYS_BETWEEN("mints", :lv_min_ts))
            ELSE            ADD_SECONDS("maxts", SECONDS_BETWEEN("mints", :lv_min_ts))
        END AS "end",
        CASE :iv_align_type
            WHEN 0 THEN     0
            WHEN 1 THEN     DAYS_BETWEEN("mints", :lv_min_ts) * 24 * 3600
            ELSE            SECONDS_BETWEEN("mints", :lv_min_ts)
        END AS "offset"
    FROM :lt_indiv_bounds;
        
    --retrieve the rough begin and end of the analytic window
    SELECT MIN("start") INTO lv_min_ts FROM :lt_adj_bounds;
    SELECT MAX("end") INTO lv_max_ts FROM :lt_adj_bounds;

    --compute the rough interval
    lv_interval := SECONDS_BETWEEN(:lv_min_ts, :lv_max_ts) / iv_desired_count;
    
    --nice-en the interval and interval ends
    IF :lv_interval > 600 THEN
        lv_interval := :lv_interval - mod(:lv_interval, 60);
    ELSEIF :lv_interval > 60 THEN
        lv_interval := :lv_interval - mod(:lv_interval, 10);
    END IF;
    lv_min_ts := ADD_SECONDS(:lv_min_ts, - SECOND(:lv_min_ts) - 60 * mod(MINUTE(:lv_min_ts), 5));
    lv_max_ts := ADD_SECONDS(:lv_max_ts, 60 - SECOND(:lv_max_ts) + 60 * (5 - mod(MINUTE(:lv_max_ts), 5)));
    lv_interval_s := 'INTERVAL ' || :lv_interval || ' SECOND';
    
    BEGIN
        DECLARE CURSOR lc_transport FOR SELECT * FROM :lt_adj_bounds;
        
        -- compute the equalized values for each transport
        FOR ls_transport AS lc_transport DO
            INSERT INTO "#COMPARE" SELECT :ls_transport."transport" AS "id", "value", "timestamp" FROM
            "SPET_DIPLOMA"."spet.diploma.procedures::equalizeValues"(
                :ls_transport."transport", :iv_measure, :lv_interval_s, :lv_min_ts, :lv_max_ts, :ls_transport."offset"
            );
        END FOR;
        
        et_results = SELECT * FROM "#COMPARE" ORDER BY "timestamp", "transport";
    END;
    DROP TABLE "#COMPARE";
END